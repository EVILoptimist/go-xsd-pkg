//	Auto-generated by the "go-xsd" package located at:
//		github.com/metaleap/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		sovren.com/hr-xml/2006-02-28/Resume.xsd
package go_Resume

//	"Copyright  The HR-XML Consortium. All Rights Reserved. http://www.hr-xml.org"
//	Terms of license can be found in license.txt.
//	Stand alone (but non-normative) version of schema, with all "includes" inserted explicitly.  This file is auto-generated.  It should be considered a "convenience" alternative to the normative versions.
//	After merging all includes, the result is passed through a stylesheet which deletes any duplicative global components as well as any unused global types.  Finally, it sorts by component name.

import (
	xml "github.com/EVILoptimist/go-xsd-pkg/sovren.com/hr-xml/2006-02-28/xml.xsd_go"
	xsdt "github.com/metaleap/go-xsd/types"
)

type XsdtString struct { xsdt.String `xml:",chardata"` }
type XsdtDouble struct { xsdt.Double `xml:",chardata"` }
type XsdtInteger struct { xsdt.Integer `xml:",chardata"` }

type XsdGoPkgHasAttr_Id_XsdtString_ struct {
	Id xsdt.String `xml:"id,attr,omitempty"`
}

type XsdGoPkgHasAttr_IdOwner_XsdtString_ struct {
	IdOwner xsdt.String `xml:"idOwner,attr,omitempty"`
}

type XsdGoPkgHasAttr_Description_XsdtString_ struct {
	Description xsdt.String `xml:"description,attr,omitempty"`
}

type XsdGoPkgHasAtts_Id struct {
	XsdGoPkgHasAttr_Id_XsdtString_

	XsdGoPkgHasAttr_IdOwner_XsdtString_

	XsdGoPkgHasAttr_Description_XsdtString_
}

type XsdGoPkgHasElem_YearchoiceFlexibleDatesTypeschema_Year_XsdtGYear_ struct {
	Year xsdt.GYear `xml:"Year"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_YearchoiceFlexibleDatesTypeschema_Year_XsdtGYear_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_YearchoiceFlexibleDatesTypeschema_Year_XsdtGYear_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_YearchoiceFlexibleDatesTypeschema_Year_XsdtGYear_ instance.
func (me *XsdGoPkgHasElem_YearchoiceFlexibleDatesTypeschema_Year_XsdtGYear_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_YearchoiceFlexibleDatesTypeschema_Year_XsdtGYear_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MonthDaychoiceFlexibleDatesTypeschema_MonthDay_XsdtGMonthDay_ struct {
	MonthDay xsdt.GMonthDay `xml:"MonthDay"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MonthDaychoiceFlexibleDatesTypeschema_MonthDay_XsdtGMonthDay_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MonthDaychoiceFlexibleDatesTypeschema_MonthDay_XsdtGMonthDay_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_MonthDaychoiceFlexibleDatesTypeschema_MonthDay_XsdtGMonthDay_ instance.
func (me *XsdGoPkgHasElem_MonthDaychoiceFlexibleDatesTypeschema_MonthDay_XsdtGMonthDay_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MonthDaychoiceFlexibleDatesTypeschema_MonthDay_XsdtGMonthDay_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_StringDatechoiceFlexibleDatesTypeschema_StringDate_XsdtString_ struct {
	StringDate xsdt.String `xml:"StringDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_StringDatechoiceFlexibleDatesTypeschema_StringDate_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_StringDatechoiceFlexibleDatesTypeschema_StringDate_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_StringDatechoiceFlexibleDatesTypeschema_StringDate_XsdtString_ instance.
func (me *XsdGoPkgHasElem_StringDatechoiceFlexibleDatesTypeschema_StringDate_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_StringDatechoiceFlexibleDatesTypeschema_StringDate_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_DateDescription_XsdtString_ struct {
	DateDescription xsdt.String `xml:"dateDescription,attr,omitempty"`
}

type TNotKnownLiteral xsdt.String

//	Since TNotKnownLiteral is just a simple String type, this merely sets the current value from the specified string.
func (me *TNotKnownLiteral) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TNotKnownLiteral is just a simple String type, this merely returns the current string value.
func (me TNotKnownLiteral) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TNotKnownLiteral's alias type xsdt.String.
func (me TNotKnownLiteral) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TNotKnownLiteral is "notKnown".
func (me TNotKnownLiteral) IsNotKnown() bool { return me.String() == "notKnown" }

type TLocalDateTimeType xsdt.DateTime

//	Since TLocalDateTimeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TLocalDateTimeType) Set(s string) { (*xsdt.DateTime)(me).Set(s) }

//	Since TLocalDateTimeType is just a simple String type, this merely returns the current string value.
func (me TLocalDateTimeType) String() string { return xsdt.DateTime(me).String() }

//	This convenience method just performs a simple type conversion to TLocalDateTimeType's alias type xsdt.DateTime.
func (me TLocalDateTimeType) ToXsdtDateTime() xsdt.DateTime { return xsdt.DateTime(me) }

type TDateTimeType xsdt.DateTime

//	This convenience method just performs a simple type conversion to TDateTimeType's alias type xsdt.DateTime.
func (me TDateTimeType) ToXsdtDateTime() xsdt.DateTime { return xsdt.DateTime(me) }

//	Since TDateTimeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TDateTimeType) Set(s string) { (*xsdt.DateTime)(me).Set(s) }

//	Since TDateTimeType is just a simple String type, this merely returns the current string value.
func (me TDateTimeType) String() string { return xsdt.DateTime(me).String() }

type TDateType xsdt.Date

//	Since TDateType is just a simple String type, this merely sets the current value from the specified string.
func (me *TDateType) Set(s string) { (*xsdt.Date)(me).Set(s) }

//	Since TDateType is just a simple String type, this merely returns the current string value.
func (me TDateType) String() string { return xsdt.Date(me).String() }

//	This convenience method just performs a simple type conversion to TDateType's alias type xsdt.Date.
func (me TDateType) ToXsdtDate() xsdt.Date { return xsdt.Date(me) }

type TNotApplicableLiteral xsdt.String

//	Since TNotApplicableLiteral is just a simple String type, this merely sets the current value from the specified string.
func (me *TNotApplicableLiteral) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TNotApplicableLiteral is just a simple String type, this merely returns the current string value.
func (me TNotApplicableLiteral) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TNotApplicableLiteral's alias type xsdt.String.
func (me TNotApplicableLiteral) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TNotApplicableLiteral is "notApplicable".
func (me TNotApplicableLiteral) IsNotApplicable() bool { return me.String() == "notApplicable" }

type TLocalDateType xsdt.Date

//	This convenience method just performs a simple type conversion to TLocalDateType's alias type xsdt.Date.
func (me TLocalDateType) ToXsdtDate() xsdt.Date { return xsdt.Date(me) }

//	Since TLocalDateType is just a simple String type, this merely sets the current value from the specified string.
func (me *TLocalDateType) Set(s string) { (*xsdt.Date)(me).Set(s) }

//	Since TLocalDateType is just a simple String type, this merely returns the current string value.
func (me TLocalDateType) String() string { return xsdt.Date(me).String() }

type TAnyDateTimeNkNaType xsdt.String

//	Since TAnyDateTimeNkNaType is just a simple String type, this merely returns the current string value.
func (me TAnyDateTimeNkNaType) String() string { return xsdt.String(me).String() }

//	TAnyDateTimeNkNaType is an XSD union-type of several types. This is a simple type conversion to TLocalDateTimeType, but keep in mind the actual value may or may not be a valid TLocalDateTimeType value.
func (me TAnyDateTimeNkNaType) ToTLocalDateTimeType() TLocalDateTimeType {
	return TLocalDateTimeType(me)
}

//	TAnyDateTimeNkNaType is an XSD union-type of several types. This is a simple type conversion to TDateTimeType, but keep in mind the actual value may or may not be a valid TDateTimeType value.
func (me TAnyDateTimeNkNaType) ToTDateTimeType() TDateTimeType { return TDateTimeType(me) }

//	TAnyDateTimeNkNaType is an XSD union-type of several types. This is a simple type conversion to TNotKnownLiteral, but keep in mind the actual value may or may not be a valid TNotKnownLiteral value.
func (me TAnyDateTimeNkNaType) ToTNotKnownLiteral() TNotKnownLiteral { return TNotKnownLiteral(me) }

//	Since TAnyDateTimeNkNaType is just a simple String type, this merely sets the current value from the specified string.
func (me *TAnyDateTimeNkNaType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TAnyDateTimeNkNaType's alias type xsdt.String.
func (me TAnyDateTimeNkNaType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	TAnyDateTimeNkNaType is an XSD union-type of several types. This is a simple type conversion to TLocalDateType, but keep in mind the actual value may or may not be a valid TLocalDateType value.
func (me TAnyDateTimeNkNaType) ToTLocalDateType() TLocalDateType { return TLocalDateType(me) }

//	TAnyDateTimeNkNaType is an XSD union-type of several types. This is a simple type conversion to TDateType, but keep in mind the actual value may or may not be a valid TDateType value.
func (me TAnyDateTimeNkNaType) ToTDateType() TDateType { return TDateType(me) }

//	TAnyDateTimeNkNaType is an XSD union-type of several types. This is a simple type conversion to TNotApplicableLiteral, but keep in mind the actual value may or may not be a valid TNotApplicableLiteral value.
func (me TAnyDateTimeNkNaType) ToTNotApplicableLiteral() TNotApplicableLiteral {
	return TNotApplicableLiteral(me)
}

type XsdGoPkgHasElem_AnyDatechoiceFlexibleDatesTypeschema_AnyDate_TAnyDateTimeNkNaType_ struct {
	AnyDate TAnyDateTimeNkNaType `xml:"AnyDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AnyDatechoiceFlexibleDatesTypeschema_AnyDate_TAnyDateTimeNkNaType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AnyDatechoiceFlexibleDatesTypeschema_AnyDate_TAnyDateTimeNkNaType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AnyDatechoiceFlexibleDatesTypeschema_AnyDate_TAnyDateTimeNkNaType_ instance.
func (me *XsdGoPkgHasElem_AnyDatechoiceFlexibleDatesTypeschema_AnyDate_TAnyDateTimeNkNaType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AnyDatechoiceFlexibleDatesTypeschema_AnyDate_TAnyDateTimeNkNaType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_YearMonthchoiceFlexibleDatesTypeschema_YearMonth_XsdtGYearMonth_ struct {
	YearMonth xsdt.GYearMonth `xml:"YearMonth"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_YearMonthchoiceFlexibleDatesTypeschema_YearMonth_XsdtGYearMonth_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_YearMonthchoiceFlexibleDatesTypeschema_YearMonth_XsdtGYearMonth_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_YearMonthchoiceFlexibleDatesTypeschema_YearMonth_XsdtGYearMonth_ instance.
func (me *XsdGoPkgHasElem_YearMonthchoiceFlexibleDatesTypeschema_YearMonth_XsdtGYearMonth_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_YearMonthchoiceFlexibleDatesTypeschema_YearMonth_XsdtGYearMonth_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TFlexibleDatesType struct {
	XsdGoPkgHasElem_StringDatechoiceFlexibleDatesTypeschema_StringDate_XsdtString_

	XsdGoPkgHasAttr_DateDescription_XsdtString_

	XsdGoPkgHasElem_AnyDatechoiceFlexibleDatesTypeschema_AnyDate_TAnyDateTimeNkNaType_

	XsdGoPkgHasElem_YearMonthchoiceFlexibleDatesTypeschema_YearMonth_XsdtGYearMonth_

	XsdGoPkgHasElem_YearchoiceFlexibleDatesTypeschema_Year_XsdtGYear_

	XsdGoPkgHasElem_MonthDaychoiceFlexibleDatesTypeschema_MonthDay_XsdtGMonthDay_
}

//	If the WalkHandlers.TFlexibleDatesType function is not nil (ie. was set by outside code), calls it with this TFlexibleDatesType instance as the single argument. Then calls the Walk() method on 5/6 embed(s) and 0/0 field(s) belonging to this TFlexibleDatesType instance.
func (me *TFlexibleDatesType) Walk() (err error) {
	if fn := WalkHandlers.TFlexibleDatesType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_YearchoiceFlexibleDatesTypeschema_Year_XsdtGYear_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MonthDaychoiceFlexibleDatesTypeschema_MonthDay_XsdtGMonthDay_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_StringDatechoiceFlexibleDatesTypeschema_StringDate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AnyDatechoiceFlexibleDatesTypeschema_AnyDate_TAnyDateTimeNkNaType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_YearMonthchoiceFlexibleDatesTypeschema_YearMonth_XsdtGYearMonth_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DatesequenceAchievementTypeschema_Date_TFlexibleDatesType_ struct {
	Date *TFlexibleDatesType `xml:"Date"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DatesequenceAchievementTypeschema_Date_TFlexibleDatesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DatesequenceAchievementTypeschema_Date_TFlexibleDatesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DatesequenceAchievementTypeschema_Date_TFlexibleDatesType_ instance.
func (me *XsdGoPkgHasElem_DatesequenceAchievementTypeschema_Date_TFlexibleDatesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DatesequenceAchievementTypeschema_Date_TFlexibleDatesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Date.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DescriptionsequenceAchievementTypeschema_Description_XsdtString_ struct {
	Description xsdt.String `xml:"Description"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DescriptionsequenceAchievementTypeschema_Description_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DescriptionsequenceAchievementTypeschema_Description_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DescriptionsequenceAchievementTypeschema_Description_XsdtString_ instance.
func (me *XsdGoPkgHasElem_DescriptionsequenceAchievementTypeschema_Description_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DescriptionsequenceAchievementTypeschema_Description_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_IssuingAuthoritysequenceAchievementTypeschema_IssuingAuthority_XsdtString_ struct {
	IssuingAuthority xsdt.String `xml:"IssuingAuthority"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IssuingAuthoritysequenceAchievementTypeschema_IssuingAuthority_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IssuingAuthoritysequenceAchievementTypeschema_IssuingAuthority_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_IssuingAuthoritysequenceAchievementTypeschema_IssuingAuthority_XsdtString_ instance.
func (me *XsdGoPkgHasElem_IssuingAuthoritysequenceAchievementTypeschema_IssuingAuthority_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IssuingAuthoritysequenceAchievementTypeschema_IssuingAuthority_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAchievementType struct {
	XsdGoPkgHasElem_DatesequenceAchievementTypeschema_Date_TFlexibleDatesType_

	XsdGoPkgHasElem_DescriptionsequenceAchievementTypeschema_Description_XsdtString_

	XsdGoPkgHasElem_IssuingAuthoritysequenceAchievementTypeschema_IssuingAuthority_XsdtString_
}

//	If the WalkHandlers.TAchievementType function is not nil (ie. was set by outside code), calls it with this TAchievementType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TAchievementType instance.
func (me *TAchievementType) Walk() (err error) {
	if fn := WalkHandlers.TAchievementType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_IssuingAuthoritysequenceAchievementTypeschema_IssuingAuthority_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DatesequenceAchievementTypeschema_Date_TFlexibleDatesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DescriptionsequenceAchievementTypeschema_Description_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Achievement struct {
	Achievement *TAchievementType `xml:"Achievement"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Achievement function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Achievement instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Achievement instance.
func (me *XsdGoPkgHasElem_Achievement) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Achievement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Achievement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Achievement struct {
	Achievements []*TAchievementType `xml:"Achievement"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Achievement function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Achievement instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Achievement instance.
func (me *XsdGoPkgHasElems_Achievement) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Achievement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Achievements {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAchievements struct {
	XsdGoPkgHasElems_Achievement
}

//	If the WalkHandlers.TxsdAchievements function is not nil (ie. was set by outside code), calls it with this TxsdAchievements instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdAchievements instance.
func (me *TxsdAchievements) Walk() (err error) {
	if fn := WalkHandlers.TxsdAchievements; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Achievement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Achievements struct {
	Achievements *TxsdAchievements `xml:"Achievements"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Achievements function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Achievements instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Achievements instance.
func (me *XsdGoPkgHasElem_Achievements) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Achievements; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Achievements.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Achievements struct {
	Achievementses []*TxsdAchievements `xml:"Achievements"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Achievements function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Achievements instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Achievements instance.
func (me *XsdGoPkgHasElems_Achievements) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Achievements; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Achievementses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AreaCityCode struct {
	AreaCityCode xsdt.String `xml:"AreaCityCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AreaCityCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AreaCityCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AreaCityCode instance.
func (me *XsdGoPkgHasElem_AreaCityCode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AreaCityCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AreaCityCode struct {
	AreaCityCodes []xsdt.String `xml:"AreaCityCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AreaCityCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AreaCityCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AreaCityCode instance.
func (me *XsdGoPkgHasElems_AreaCityCode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AreaCityCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Name_XsdtString_ struct {
	Name xsdt.String `xml:"name,attr,omitempty"`
}

type TxsdEntityIdTypeSequenceIdValue struct {
	XsdtString

	XsdGoPkgHasAttr_Name_XsdtString_
}

//	If the WalkHandlers.TxsdEntityIdTypeSequenceIdValue function is not nil (ie. was set by outside code), calls it with this TxsdEntityIdTypeSequenceIdValue instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdEntityIdTypeSequenceIdValue instance.
func (me *TxsdEntityIdTypeSequenceIdValue) Walk() (err error) {
	if fn := WalkHandlers.TxsdEntityIdTypeSequenceIdValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_IdValuesequenceEntityIdTypeschema_IdValue_TxsdEntityIdTypeSequenceIdValue_ struct {
	IdValues []*TxsdEntityIdTypeSequenceIdValue `xml:"IdValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IdValuesequenceEntityIdTypeschema_IdValue_TxsdEntityIdTypeSequenceIdValue_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IdValuesequenceEntityIdTypeschema_IdValue_TxsdEntityIdTypeSequenceIdValue_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IdValuesequenceEntityIdTypeschema_IdValue_TxsdEntityIdTypeSequenceIdValue_ instance.
func (me *XsdGoPkgHasElems_IdValuesequenceEntityIdTypeschema_IdValue_TxsdEntityIdTypeSequenceIdValue_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IdValuesequenceEntityIdTypeschema_IdValue_TxsdEntityIdTypeSequenceIdValue_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.IdValues {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_ValidFrom_TAnyDateTimeNkNaType_ struct {
	ValidFrom TAnyDateTimeNkNaType `xml:"validFrom,attr,omitempty"`
}

type XsdGoPkgHasAttr_ValidTo_TAnyDateTimeNkNaType_ struct {
	ValidTo TAnyDateTimeNkNaType `xml:"validTo,attr,omitempty"`
}

type TEntityIdType struct {
	XsdGoPkgHasElems_IdValuesequenceEntityIdTypeschema_IdValue_TxsdEntityIdTypeSequenceIdValue_

	XsdGoPkgHasAttr_ValidFrom_TAnyDateTimeNkNaType_

	XsdGoPkgHasAttr_ValidTo_TAnyDateTimeNkNaType_

	XsdGoPkgHasAttr_IdOwner_XsdtString_
}

//	If the WalkHandlers.TEntityIdType function is not nil (ie. was set by outside code), calls it with this TEntityIdType instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TEntityIdType instance.
func (me *TEntityIdType) Walk() (err error) {
	if fn := WalkHandlers.TEntityIdType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_IdValuesequenceEntityIdTypeschema_IdValue_TxsdEntityIdTypeSequenceIdValue_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_IdsequenceAssociationTypeschema_Id_TEntityIdType_ struct {
	Id *TEntityIdType `xml:"Id"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IdsequenceAssociationTypeschema_Id_TEntityIdType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IdsequenceAssociationTypeschema_Id_TEntityIdType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_IdsequenceAssociationTypeschema_Id_TEntityIdType_ instance.
func (me *XsdGoPkgHasElem_IdsequenceAssociationTypeschema_Id_TEntityIdType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IdsequenceAssociationTypeschema_Id_TEntityIdType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Id.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TInternetWebAddressType xsdt.String

//	Since TInternetWebAddressType is just a simple String type, this merely sets the current value from the specified string.
func (me *TInternetWebAddressType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TInternetWebAddressType is just a simple String type, this merely returns the current string value.
func (me TInternetWebAddressType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TInternetWebAddressType's alias type xsdt.String.
func (me TInternetWebAddressType) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElem_LinksequenceAssociationTypeschema_Link_TInternetWebAddressType_ struct {
	Link TInternetWebAddressType `xml:"Link"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LinksequenceAssociationTypeschema_Link_TInternetWebAddressType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LinksequenceAssociationTypeschema_Link_TInternetWebAddressType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_LinksequenceAssociationTypeschema_Link_TInternetWebAddressType_ instance.
func (me *XsdGoPkgHasElem_LinksequenceAssociationTypeschema_Link_TInternetWebAddressType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LinksequenceAssociationTypeschema_Link_TInternetWebAddressType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_StartDatesequenceAssociationTypeschema_StartDate_TFlexibleDatesType_ struct {
	StartDate *TFlexibleDatesType `xml:"StartDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_StartDatesequenceAssociationTypeschema_StartDate_TFlexibleDatesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_StartDatesequenceAssociationTypeschema_StartDate_TFlexibleDatesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_StartDatesequenceAssociationTypeschema_StartDate_TFlexibleDatesType_ instance.
func (me *XsdGoPkgHasElem_StartDatesequenceAssociationTypeschema_StartDate_TFlexibleDatesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_StartDatesequenceAssociationTypeschema_StartDate_TFlexibleDatesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StartDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EndDatesequenceAssociationTypeschema_EndDate_TFlexibleDatesType_ struct {
	EndDate *TFlexibleDatesType `xml:"EndDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EndDatesequenceAssociationTypeschema_EndDate_TFlexibleDatesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EndDatesequenceAssociationTypeschema_EndDate_TFlexibleDatesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_EndDatesequenceAssociationTypeschema_EndDate_TFlexibleDatesType_ instance.
func (me *XsdGoPkgHasElem_EndDatesequenceAssociationTypeschema_EndDate_TFlexibleDatesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EndDatesequenceAssociationTypeschema_EndDate_TFlexibleDatesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EndDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DeliverablesequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Deliverable_XsdtString_ struct {
	Deliverables []xsdt.String `xml:"Deliverable"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DeliverablesequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Deliverable_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DeliverablesequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Deliverable_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DeliverablesequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Deliverable_XsdtString_ instance.
func (me *XsdGoPkgHasElems_DeliverablesequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Deliverable_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DeliverablesequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Deliverable_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CommentssequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Comments_XsdtString_ struct {
	Comments xsdt.String `xml:"Comments"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CommentssequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Comments_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CommentssequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Comments_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CommentssequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Comments_XsdtString_ instance.
func (me *XsdGoPkgHasElem_CommentssequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Comments_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CommentssequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Comments_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_NamesequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Name_XsdtString_ struct {
	Name xsdt.String `xml:"Name"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NamesequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Name_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NamesequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Name_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_NamesequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Name_XsdtString_ instance.
func (me *XsdGoPkgHasElem_NamesequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Name_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NamesequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Name_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAssociationTypeSequenceRole struct {
	XsdGoPkgHasElem_NamesequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Name_XsdtString_

	XsdGoPkgHasElems_DeliverablesequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Deliverable_XsdtString_

	XsdGoPkgHasElem_StartDatesequenceAssociationTypeschema_StartDate_TFlexibleDatesType_

	XsdGoPkgHasElem_EndDatesequenceAssociationTypeschema_EndDate_TFlexibleDatesType_

	XsdGoPkgHasElem_CommentssequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Comments_XsdtString_
}

//	If the WalkHandlers.TxsdAssociationTypeSequenceRole function is not nil (ie. was set by outside code), calls it with this TxsdAssociationTypeSequenceRole instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TxsdAssociationTypeSequenceRole instance.
func (me *TxsdAssociationTypeSequenceRole) Walk() (err error) {
	if fn := WalkHandlers.TxsdAssociationTypeSequenceRole; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_NamesequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Name_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_DeliverablesequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Deliverable_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_StartDatesequenceAssociationTypeschema_StartDate_TFlexibleDatesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EndDatesequenceAssociationTypeschema_EndDate_TFlexibleDatesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CommentssequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Comments_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RolesequenceAssociationTypeschema_Role_TxsdAssociationTypeSequenceRole_ struct {
	Roles []*TxsdAssociationTypeSequenceRole `xml:"Role"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RolesequenceAssociationTypeschema_Role_TxsdAssociationTypeSequenceRole_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RolesequenceAssociationTypeschema_Role_TxsdAssociationTypeSequenceRole_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RolesequenceAssociationTypeschema_Role_TxsdAssociationTypeSequenceRole_ instance.
func (me *XsdGoPkgHasElems_RolesequenceAssociationTypeschema_Role_TxsdAssociationTypeSequenceRole_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RolesequenceAssociationTypeschema_Role_TxsdAssociationTypeSequenceRole_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Roles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAssociationType struct {
	XsdGoPkgHasElem_NamesequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Name_XsdtString_

	XsdGoPkgHasElem_IdsequenceAssociationTypeschema_Id_TEntityIdType_

	XsdGoPkgHasElem_LinksequenceAssociationTypeschema_Link_TInternetWebAddressType_

	XsdGoPkgHasElem_StartDatesequenceAssociationTypeschema_StartDate_TFlexibleDatesType_

	XsdGoPkgHasElem_EndDatesequenceAssociationTypeschema_EndDate_TFlexibleDatesType_

	XsdGoPkgHasElems_RolesequenceAssociationTypeschema_Role_TxsdAssociationTypeSequenceRole_

	XsdGoPkgHasElem_CommentssequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Comments_XsdtString_
}

//	If the WalkHandlers.TAssociationType function is not nil (ie. was set by outside code), calls it with this TAssociationType instance as the single argument. Then calls the Walk() method on 7/7 embed(s) and 0/0 field(s) belonging to this TAssociationType instance.
func (me *TAssociationType) Walk() (err error) {
	if fn := WalkHandlers.TAssociationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_EndDatesequenceAssociationTypeschema_EndDate_TFlexibleDatesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RolesequenceAssociationTypeschema_Role_TxsdAssociationTypeSequenceRole_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CommentssequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Comments_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_NamesequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Name_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_IdsequenceAssociationTypeschema_Id_TEntityIdType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LinksequenceAssociationTypeschema_Link_TInternetWebAddressType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_StartDatesequenceAssociationTypeschema_StartDate_TFlexibleDatesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAssociationTypeType xsdt.String

//	Returns true if the value of this enumerated TAssociationTypeType is "Religious".
func (me TAssociationTypeType) IsReligious() bool { return me.String() == "Religious" }

//	Since TAssociationTypeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TAssociationTypeType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TAssociationTypeType is just a simple String type, this merely returns the current string value.
func (me TAssociationTypeType) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TAssociationTypeType is "Professional".
func (me TAssociationTypeType) IsProfessional() bool { return me.String() == "Professional" }

//	Returns true if the value of this enumerated TAssociationTypeType is "Community".
func (me TAssociationTypeType) IsCommunity() bool { return me.String() == "Community" }

//	Returns true if the value of this enumerated TAssociationTypeType is "Non-Profit".
func (me TAssociationTypeType) IsNonProfit() bool { return me.String() == "Non-Profit" }

//	This convenience method just performs a simple type conversion to TAssociationTypeType's alias type xsdt.String.
func (me TAssociationTypeType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TAssociationTypeType is "Social".
func (me TAssociationTypeType) IsSocial() bool { return me.String() == "Social" }

//	Returns true if the value of this enumerated TAssociationTypeType is "Political".
func (me TAssociationTypeType) IsPolitical() bool { return me.String() == "Political" }

type TxStringPatternExtensionType xsdt.String

//	Since TxStringPatternExtensionType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxStringPatternExtensionType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TxStringPatternExtensionType is just a simple String type, this merely returns the current string value.
func (me TxStringPatternExtensionType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TxStringPatternExtensionType's alias type xsdt.String.
func (me TxStringPatternExtensionType) ToXsdtString() xsdt.String { return xsdt.String(me) }

type TExtendedAssociationTypeType xsdt.String

//	Since TExtendedAssociationTypeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TExtendedAssociationTypeType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TExtendedAssociationTypeType is just a simple String type, this merely returns the current string value.
func (me TExtendedAssociationTypeType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TExtendedAssociationTypeType's alias type xsdt.String.
func (me TExtendedAssociationTypeType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	TExtendedAssociationTypeType is an XSD union-type of several types. This is a simple type conversion to TAssociationTypeType, but keep in mind the actual value may or may not be a valid TAssociationTypeType value.
func (me TExtendedAssociationTypeType) ToTAssociationTypeType() TAssociationTypeType {
	return TAssociationTypeType(me)
}

//	TExtendedAssociationTypeType is an XSD union-type of several types. This is a simple type conversion to TxStringPatternExtensionType, but keep in mind the actual value may or may not be a valid TxStringPatternExtensionType value.
func (me TExtendedAssociationTypeType) ToTxStringPatternExtensionType() TxStringPatternExtensionType {
	return TxStringPatternExtensionType(me)
}

type XsdGoPkgHasAttr_Type_TExtendedAssociationTypeType_ struct {
	Type TExtendedAssociationTypeType `xml:"type,attr,omitempty"`
}

type TxsdAssociation struct {
	TAssociationType

	XsdGoPkgHasAttr_Type_TExtendedAssociationTypeType_
}

//	If the WalkHandlers.TxsdAssociation function is not nil (ie. was set by outside code), calls it with this TxsdAssociation instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TxsdAssociation instance.
func (me *TxsdAssociation) Walk() (err error) {
	if fn := WalkHandlers.TxsdAssociation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TAssociationType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Association struct {
	Associations []*TxsdAssociation `xml:"Association"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Association function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Association instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Association instance.
func (me *XsdGoPkgHasElems_Association) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Association; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Associations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Association struct {
	Association *TxsdAssociation `xml:"Association"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Association function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Association instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Association instance.
func (me *XsdGoPkgHasElem_Association) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Association; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Association.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAssociations struct {
	XsdGoPkgHasElems_Association
}

//	If the WalkHandlers.TxsdAssociations function is not nil (ie. was set by outside code), calls it with this TxsdAssociations instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdAssociations instance.
func (me *TxsdAssociations) Walk() (err error) {
	if fn := WalkHandlers.TxsdAssociations; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Association.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Associations struct {
	Associations *TxsdAssociations `xml:"Associations"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Associations function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Associations instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Associations instance.
func (me *XsdGoPkgHasElem_Associations) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Associations; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Associations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Associations struct {
	Associationses []*TxsdAssociations `xml:"Associations"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Associations function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Associations instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Associations instance.
func (me *XsdGoPkgHasElems_Associations) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Associations; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Associationses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCompetencyTypeSequenceCompetencyId struct {
	XsdGoPkgHasAtts_Id
}

//	If the WalkHandlers.TxsdCompetencyTypeSequenceCompetencyId function is not nil (ie. was set by outside code), calls it with this TxsdCompetencyTypeSequenceCompetencyId instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TxsdCompetencyTypeSequenceCompetencyId instance.
func (me *TxsdCompetencyTypeSequenceCompetencyId) Walk() (err error) {
	if fn := WalkHandlers.TxsdCompetencyTypeSequenceCompetencyId; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CompetencyIdsequenceCompetencyTypeschema_CompetencyId_TxsdCompetencyTypeSequenceCompetencyId_ struct {
	CompetencyId *TxsdCompetencyTypeSequenceCompetencyId `xml:"CompetencyId"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CompetencyIdsequenceCompetencyTypeschema_CompetencyId_TxsdCompetencyTypeSequenceCompetencyId_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CompetencyIdsequenceCompetencyTypeschema_CompetencyId_TxsdCompetencyTypeSequenceCompetencyId_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CompetencyIdsequenceCompetencyTypeschema_CompetencyId_TxsdCompetencyTypeSequenceCompetencyId_ instance.
func (me *XsdGoPkgHasElem_CompetencyIdsequenceCompetencyTypeschema_CompetencyId_TxsdCompetencyTypeSequenceCompetencyId_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CompetencyIdsequenceCompetencyTypeschema_CompetencyId_TxsdCompetencyTypeSequenceCompetencyId_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CompetencyId.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TCompetencyWeightType xsdt.String

//	Since TCompetencyWeightType is just a simple String type, this merely sets the current value from the specified string.
func (me *TCompetencyWeightType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TCompetencyWeightType is just a simple String type, this merely returns the current string value.
func (me TCompetencyWeightType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TCompetencyWeightType's alias type xsdt.String.
func (me TCompetencyWeightType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TCompetencyWeightType is "levelOfInterest".
func (me TCompetencyWeightType) IsLevelOfInterest() bool { return me.String() == "levelOfInterest" }

//	Returns true if the value of this enumerated TCompetencyWeightType is "skillLevel".
func (me TCompetencyWeightType) IsSkillLevel() bool { return me.String() == "skillLevel" }

type TExtendedWeightType xsdt.String

//	Since TExtendedWeightType is just a simple String type, this merely returns the current string value.
func (me TExtendedWeightType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TExtendedWeightType's alias type xsdt.String.
func (me TExtendedWeightType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	TExtendedWeightType is an XSD union-type of several types. This is a simple type conversion to TCompetencyWeightType, but keep in mind the actual value may or may not be a valid TCompetencyWeightType value.
func (me TExtendedWeightType) ToTCompetencyWeightType() TCompetencyWeightType {
	return TCompetencyWeightType(me)
}

//	TExtendedWeightType is an XSD union-type of several types. This is a simple type conversion to TxStringPatternExtensionType, but keep in mind the actual value may or may not be a valid TxStringPatternExtensionType value.
func (me TExtendedWeightType) ToTxStringPatternExtensionType() TxStringPatternExtensionType {
	return TxStringPatternExtensionType(me)
}

//	Since TExtendedWeightType is just a simple String type, this merely sets the current value from the specified string.
func (me *TExtendedWeightType) Set(s string) { (*xsdt.String)(me).Set(s) }

type XsdGoPkgHasAttr_Type_TExtendedWeightType_ struct {
	Type TExtendedWeightType `xml:"type,attr,omitempty"`
}

type XsdGoPkgHasAttr_MaxValue_XsdtDouble_ struct {
	MaxValue xsdt.Double `xml:"maxValue,attr,omitempty"`
}

type XsdGoPkgHasAttr_Interval_XsdtDouble_ struct {
	Interval xsdt.Double `xml:"interval,attr,omitempty"`
}

type XsdGoPkgHasAttr_MinValue_XsdtDouble_ struct {
	MinValue xsdt.Double `xml:"minValue,attr,omitempty"`
}

type TxsdNumericValue struct {
	XsdGoPkgHasAttr_MinValue_XsdtDouble_

	XsdtDouble

	XsdGoPkgHasAttr_MaxValue_XsdtDouble_

	XsdGoPkgHasAttr_Interval_XsdtDouble_

	XsdGoPkgHasAttr_Description_XsdtString_
}

//	If the WalkHandlers.TxsdNumericValue function is not nil (ie. was set by outside code), calls it with this TxsdNumericValue instance as the single argument. Then calls the Walk() method on 0/5 embed(s) and 0/0 field(s) belonging to this TxsdNumericValue instance.
func (me *TxsdNumericValue) Walk() (err error) {
	if fn := WalkHandlers.TxsdNumericValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_NumericValue struct {
	NumericValue *TxsdNumericValue `xml:"NumericValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NumericValue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NumericValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_NumericValue instance.
func (me *XsdGoPkgHasElem_NumericValue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NumericValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.NumericValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_MinValue_XsdtString_ struct {
	MinValue xsdt.String `xml:"minValue,attr,omitempty"`
}

type XsdGoPkgHasAttr_MaxValue_XsdtString_ struct {
	MaxValue xsdt.String `xml:"maxValue,attr,omitempty"`
}

type TxsdStringValue struct {
	XsdtString

	XsdGoPkgHasAttr_MinValue_XsdtString_

	XsdGoPkgHasAttr_MaxValue_XsdtString_

	XsdGoPkgHasAttr_Description_XsdtString_
}

//	If the WalkHandlers.TxsdStringValue function is not nil (ie. was set by outside code), calls it with this TxsdStringValue instance as the single argument. Then calls the Walk() method on 0/4 embed(s) and 0/0 field(s) belonging to this TxsdStringValue instance.
func (me *TxsdStringValue) Walk() (err error) {
	if fn := WalkHandlers.TxsdStringValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_StringValue struct {
	StringValue *TxsdStringValue `xml:"StringValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_StringValue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_StringValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_StringValue instance.
func (me *XsdGoPkgHasElem_StringValue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_StringValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StringValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SupportingInformation struct {
	SupportingInformations []xsdt.String `xml:"SupportingInformation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SupportingInformation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SupportingInformation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SupportingInformation instance.
func (me *XsdGoPkgHasElems_SupportingInformation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SupportingInformation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCompetencyTypeSequenceCompetencyWeight struct {
	XsdGoPkgHasElem_StringValue

	XsdGoPkgHasElems_SupportingInformation

	XsdGoPkgHasAttr_Type_TExtendedWeightType_

	XsdGoPkgHasElem_NumericValue
}

//	If the WalkHandlers.TxsdCompetencyTypeSequenceCompetencyWeight function is not nil (ie. was set by outside code), calls it with this TxsdCompetencyTypeSequenceCompetencyWeight instance as the single argument. Then calls the Walk() method on 3/4 embed(s) and 0/0 field(s) belonging to this TxsdCompetencyTypeSequenceCompetencyWeight instance.
func (me *TxsdCompetencyTypeSequenceCompetencyWeight) Walk() (err error) {
	if fn := WalkHandlers.TxsdCompetencyTypeSequenceCompetencyWeight; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_NumericValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_StringValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_SupportingInformation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CompetencyWeightsequenceCompetencyTypeschema_CompetencyWeight_TxsdCompetencyTypeSequenceCompetencyWeight_ struct {
	CompetencyWeights []*TxsdCompetencyTypeSequenceCompetencyWeight `xml:"CompetencyWeight"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CompetencyWeightsequenceCompetencyTypeschema_CompetencyWeight_TxsdCompetencyTypeSequenceCompetencyWeight_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CompetencyWeightsequenceCompetencyTypeschema_CompetencyWeight_TxsdCompetencyTypeSequenceCompetencyWeight_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CompetencyWeightsequenceCompetencyTypeschema_CompetencyWeight_TxsdCompetencyTypeSequenceCompetencyWeight_ instance.
func (me *XsdGoPkgHasElems_CompetencyWeightsequenceCompetencyTypeschema_CompetencyWeight_TxsdCompetencyTypeSequenceCompetencyWeight_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CompetencyWeightsequenceCompetencyTypeschema_CompetencyWeight_TxsdCompetencyTypeSequenceCompetencyWeight_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CompetencyWeights {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	HR-XML Technical Steering Committee endorsed extension element.
type TUserAreaType struct {
}

//	If the WalkHandlers.TUserAreaType function is not nil (ie. was set by outside code), calls it with this TUserAreaType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/0 field(s) belonging to this TUserAreaType instance.
func (me *TUserAreaType) Walk() (err error) {
	if fn := WalkHandlers.TUserAreaType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_UserArea struct {
	//	HR-XML Technical Steering Committee endorsed extension element.
	UserArea *TUserAreaType `xml:"UserArea"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_UserArea function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_UserArea instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_UserArea instance.
func (me *XsdGoPkgHasElem_UserArea) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_UserArea; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.UserArea.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TaxonomyIdsequenceCompetencyTypeschema_TaxonomyId_TxsdCompetencyTypeSequenceTaxonomyId_ struct {
	TaxonomyIds []*TxsdCompetencyTypeSequenceCompetencyId `xml:"TaxonomyId"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TaxonomyIdsequenceCompetencyTypeschema_TaxonomyId_TxsdCompetencyTypeSequenceTaxonomyId_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TaxonomyIdsequenceCompetencyTypeschema_TaxonomyId_TxsdCompetencyTypeSequenceTaxonomyId_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TaxonomyIdsequenceCompetencyTypeschema_TaxonomyId_TxsdCompetencyTypeSequenceTaxonomyId_ instance.
func (me *XsdGoPkgHasElems_TaxonomyIdsequenceCompetencyTypeschema_TaxonomyId_TxsdCompetencyTypeSequenceTaxonomyId_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TaxonomyIdsequenceCompetencyTypeschema_TaxonomyId_TxsdCompetencyTypeSequenceTaxonomyId_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.TaxonomyIds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EvidenceIdsequenceTxsdCompetencyTypeSequenceCompetencyEvidenceCompetencyEvidencesequenceCompetencyTypeschema_EvidenceId_TxsdCompetencyTypeSequenceCompetencyEvidenceSequenceEvidenceId_ struct {
	EvidenceId *TxsdCompetencyTypeSequenceCompetencyId `xml:"EvidenceId"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EvidenceIdsequenceTxsdCompetencyTypeSequenceCompetencyEvidenceCompetencyEvidencesequenceCompetencyTypeschema_EvidenceId_TxsdCompetencyTypeSequenceCompetencyEvidenceSequenceEvidenceId_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EvidenceIdsequenceTxsdCompetencyTypeSequenceCompetencyEvidenceCompetencyEvidencesequenceCompetencyTypeschema_EvidenceId_TxsdCompetencyTypeSequenceCompetencyEvidenceSequenceEvidenceId_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_EvidenceIdsequenceTxsdCompetencyTypeSequenceCompetencyEvidenceCompetencyEvidencesequenceCompetencyTypeschema_EvidenceId_TxsdCompetencyTypeSequenceCompetencyEvidenceSequenceEvidenceId_ instance.
func (me *XsdGoPkgHasElem_EvidenceIdsequenceTxsdCompetencyTypeSequenceCompetencyEvidenceCompetencyEvidencesequenceCompetencyTypeschema_EvidenceId_TxsdCompetencyTypeSequenceCompetencyEvidenceSequenceEvidenceId_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EvidenceIdsequenceTxsdCompetencyTypeSequenceCompetencyEvidenceCompetencyEvidencesequenceCompetencyTypeschema_EvidenceId_TxsdCompetencyTypeSequenceCompetencyEvidenceSequenceEvidenceId_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EvidenceId.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAnyDateTimeType xsdt.String

//	TAnyDateTimeType is an XSD union-type of several types. This is a simple type conversion to TDateType, but keep in mind the actual value may or may not be a valid TDateType value.
func (me TAnyDateTimeType) ToTDateType() TDateType { return TDateType(me) }

//	TAnyDateTimeType is an XSD union-type of several types. This is a simple type conversion to TLocalDateTimeType, but keep in mind the actual value may or may not be a valid TLocalDateTimeType value.
func (me TAnyDateTimeType) ToTLocalDateTimeType() TLocalDateTimeType { return TLocalDateTimeType(me) }

//	TAnyDateTimeType is an XSD union-type of several types. This is a simple type conversion to TDateTimeType, but keep in mind the actual value may or may not be a valid TDateTimeType value.
func (me TAnyDateTimeType) ToTDateTimeType() TDateTimeType { return TDateTimeType(me) }

//	Since TAnyDateTimeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TAnyDateTimeType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TAnyDateTimeType is just a simple String type, this merely returns the current string value.
func (me TAnyDateTimeType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TAnyDateTimeType's alias type xsdt.String.
func (me TAnyDateTimeType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	TAnyDateTimeType is an XSD union-type of several types. This is a simple type conversion to TLocalDateType, but keep in mind the actual value may or may not be a valid TLocalDateType value.
func (me TAnyDateTimeType) ToTLocalDateType() TLocalDateType { return TLocalDateType(me) }

type XsdGoPkgHasAttr_DateOfIncident_TAnyDateTimeType_ struct {
	DateOfIncident TAnyDateTimeType `xml:"dateOfIncident,attr,omitempty"`
}

type XsdGoPkgHasAttr_TypeDescription_XsdtString_ struct {
	TypeDescription xsdt.String `xml:"typeDescription,attr,omitempty"`
}

type XsdGoPkgHasAttr_TypeId_XsdtString_ struct {
	TypeId xsdt.String `xml:"typeId,attr,omitempty"`
}

type XsdGoPkgHasAttr_LastUsed_TAnyDateTimeType_ struct {
	LastUsed TAnyDateTimeType `xml:"lastUsed,attr,omitempty"`
}

type XsdGoPkgHasAttr_ExpirationDate_TAnyDateTimeType_ struct {
	ExpirationDate TAnyDateTimeType `xml:"expirationDate,attr,omitempty"`
}

type XsdGoPkgHasAttr_Required_XsdtBoolean_ struct {
	Required xsdt.Boolean `xml:"required,attr,omitempty"`
}

type TxsdCompetencyTypeSequenceCompetencyEvidence struct {
	XsdGoPkgHasAttr_TypeDescription_XsdtString_

	XsdGoPkgHasAttr_TypeId_XsdtString_

	XsdGoPkgHasElem_NumericValue

	XsdGoPkgHasElem_StringValue

	XsdGoPkgHasElem_EvidenceIdsequenceTxsdCompetencyTypeSequenceCompetencyEvidenceCompetencyEvidencesequenceCompetencyTypeschema_EvidenceId_TxsdCompetencyTypeSequenceCompetencyEvidenceSequenceEvidenceId_

	XsdGoPkgHasAttr_DateOfIncident_TAnyDateTimeType_

	XsdGoPkgHasAttr_Name_XsdtString_

	XsdGoPkgHasElems_SupportingInformation

	XsdGoPkgHasAttr_LastUsed_TAnyDateTimeType_

	XsdGoPkgHasAttr_ExpirationDate_TAnyDateTimeType_

	XsdGoPkgHasAttr_Required_XsdtBoolean_
}

//	If the WalkHandlers.TxsdCompetencyTypeSequenceCompetencyEvidence function is not nil (ie. was set by outside code), calls it with this TxsdCompetencyTypeSequenceCompetencyEvidence instance as the single argument. Then calls the Walk() method on 4/11 embed(s) and 0/0 field(s) belonging to this TxsdCompetencyTypeSequenceCompetencyEvidence instance.
func (me *TxsdCompetencyTypeSequenceCompetencyEvidence) Walk() (err error) {
	if fn := WalkHandlers.TxsdCompetencyTypeSequenceCompetencyEvidence; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_NumericValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_StringValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EvidenceIdsequenceTxsdCompetencyTypeSequenceCompetencyEvidenceCompetencyEvidencesequenceCompetencyTypeschema_EvidenceId_TxsdCompetencyTypeSequenceCompetencyEvidenceSequenceEvidenceId_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_SupportingInformation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CompetencyEvidencesequenceCompetencyTypeschema_CompetencyEvidence_TxsdCompetencyTypeSequenceCompetencyEvidence_ struct {
	CompetencyEvidences []*TxsdCompetencyTypeSequenceCompetencyEvidence `xml:"CompetencyEvidence"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CompetencyEvidencesequenceCompetencyTypeschema_CompetencyEvidence_TxsdCompetencyTypeSequenceCompetencyEvidence_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CompetencyEvidencesequenceCompetencyTypeschema_CompetencyEvidence_TxsdCompetencyTypeSequenceCompetencyEvidence_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CompetencyEvidencesequenceCompetencyTypeschema_CompetencyEvidence_TxsdCompetencyTypeSequenceCompetencyEvidence_ instance.
func (me *XsdGoPkgHasElems_CompetencyEvidencesequenceCompetencyTypeschema_CompetencyEvidence_TxsdCompetencyTypeSequenceCompetencyEvidence_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CompetencyEvidencesequenceCompetencyTypeschema_CompetencyEvidence_TxsdCompetencyTypeSequenceCompetencyEvidence_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CompetencyEvidences {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Competency struct {
	Competencies []*TCompetencyType `xml:"Competency"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Competency function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Competency instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Competency instance.
func (me *XsdGoPkgHasElems_Competency) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Competency; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TCompetencyType struct {
	XsdGoPkgHasElems_CompetencyWeightsequenceCompetencyTypeschema_CompetencyWeight_TxsdCompetencyTypeSequenceCompetencyWeight_

	XsdGoPkgHasElem_UserArea

	XsdGoPkgHasAttr_Name_XsdtString_

	XsdGoPkgHasElem_CompetencyIdsequenceCompetencyTypeschema_CompetencyId_TxsdCompetencyTypeSequenceCompetencyId_

	XsdGoPkgHasElems_CompetencyEvidencesequenceCompetencyTypeschema_CompetencyEvidence_TxsdCompetencyTypeSequenceCompetencyEvidence_

	XsdGoPkgHasElems_Competency

	XsdGoPkgHasAttr_Description_XsdtString_

	XsdGoPkgHasAttr_Required_XsdtBoolean_

	XsdGoPkgHasElems_TaxonomyIdsequenceCompetencyTypeschema_TaxonomyId_TxsdCompetencyTypeSequenceTaxonomyId_
}

//	If the WalkHandlers.TCompetencyType function is not nil (ie. was set by outside code), calls it with this TCompetencyType instance as the single argument. Then calls the Walk() method on 6/9 embed(s) and 0/0 field(s) belonging to this TCompetencyType instance.
func (me *TCompetencyType) Walk() (err error) {
	if fn := WalkHandlers.TCompetencyType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_CompetencyIdsequenceCompetencyTypeschema_CompetencyId_TxsdCompetencyTypeSequenceCompetencyId_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_CompetencyWeightsequenceCompetencyTypeschema_CompetencyWeight_TxsdCompetencyTypeSequenceCompetencyWeight_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_UserArea.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_TaxonomyIdsequenceCompetencyTypeschema_TaxonomyId_TxsdCompetencyTypeSequenceTaxonomyId_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_CompetencyEvidencesequenceCompetencyTypeschema_CompetencyEvidence_TxsdCompetencyTypeSequenceCompetencyEvidence_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Competency.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Competency struct {
	Competency *TCompetencyType `xml:"Competency"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Competency function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Competency instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Competency instance.
func (me *XsdGoPkgHasElem_Competency) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Competency; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Competency.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Must conform to ISO 3166 Representation of Countries.
type TCountryCodeType xsdt.String

//	Since TCountryCodeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TCountryCodeType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TCountryCodeType is just a simple String type, this merely returns the current string value.
func (me TCountryCodeType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TCountryCodeType's alias type xsdt.String.
func (me TCountryCodeType) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElem_CountryCode struct {
	CountryCode TCountryCodeType `xml:"CountryCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CountryCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CountryCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CountryCode instance.
func (me *XsdGoPkgHasElem_CountryCode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CountryCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CountryCode struct {
	CountryCodes []TCountryCodeType `xml:"CountryCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CountryCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CountryCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CountryCode instance.
func (me *XsdGoPkgHasElems_CountryCode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CountryCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Must conform to ISO 4217 - Representation of Currency and Funds
type TCurrencyCodeType xsdt.String

//	Since TCurrencyCodeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TCurrencyCodeType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TCurrencyCodeType is just a simple String type, this merely returns the current string value.
func (me TCurrencyCodeType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TCurrencyCodeType's alias type xsdt.String.
func (me TCurrencyCodeType) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElem_CurrencyCode struct {
	CurrencyCode TCurrencyCodeType `xml:"CurrencyCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CurrencyCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CurrencyCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CurrencyCode instance.
func (me *XsdGoPkgHasElem_CurrencyCode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CurrencyCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CurrencyCode struct {
	CurrencyCodes []TCurrencyCodeType `xml:"CurrencyCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CurrencyCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CurrencyCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CurrencyCode instance.
func (me *XsdGoPkgHasElems_CurrencyCode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CurrencyCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TDunsNumberBaseType xsdt.Integer

//	Since TDunsNumberBaseType is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TDunsNumberBaseType) Set(s string) { (*xsdt.Integer)(me).Set(s) }

//	Returns a string representation of this TDunsNumberBaseType's current non-string scalar value.
func (me TDunsNumberBaseType) String() string { return xsdt.Integer(me).String() }

//	This convenience method just performs a simple type conversion to TDunsNumberBaseType's alias type xsdt.Integer.
func (me TDunsNumberBaseType) ToXsdtInteger() xsdt.Integer { return xsdt.Integer(me) }

type TxsdDunsNumberDataTypeSimpleContentExtensionDunsNumberType xsdt.String

//	Since TxsdDunsNumberDataTypeSimpleContentExtensionDunsNumberType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdDunsNumberDataTypeSimpleContentExtensionDunsNumberType) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

//	Since TxsdDunsNumberDataTypeSimpleContentExtensionDunsNumberType is just a simple String type, this merely returns the current string value.
func (me TxsdDunsNumberDataTypeSimpleContentExtensionDunsNumberType) String() string {
	return xsdt.String(me).String()
}

//	This convenience method just performs a simple type conversion to TxsdDunsNumberDataTypeSimpleContentExtensionDunsNumberType's alias type xsdt.String.
func (me TxsdDunsNumberDataTypeSimpleContentExtensionDunsNumberType) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

//	Returns true if the value of this enumerated TxsdDunsNumberDataTypeSimpleContentExtensionDunsNumberType is "standard Duns".
func (me TxsdDunsNumberDataTypeSimpleContentExtensionDunsNumberType) IsStandardDuns() bool {
	return me.String() == "standard Duns"
}

//	Returns true if the value of this enumerated TxsdDunsNumberDataTypeSimpleContentExtensionDunsNumberType is "global ultimate".
func (me TxsdDunsNumberDataTypeSimpleContentExtensionDunsNumberType) IsGlobalUltimate() bool {
	return me.String() == "global ultimate"
}

//	Returns true if the value of this enumerated TxsdDunsNumberDataTypeSimpleContentExtensionDunsNumberType is "domestic ultimate".
func (me TxsdDunsNumberDataTypeSimpleContentExtensionDunsNumberType) IsDomesticUltimate() bool {
	return me.String() == "domestic ultimate"
}

type XsdGoPkgHasAttr_DunsNumberType_TxsdDunsNumberDataTypeSimpleContentExtensionDunsNumberType_ struct {
	DunsNumberType TxsdDunsNumberDataTypeSimpleContentExtensionDunsNumberType `xml:"dunsNumberType,attr,omitempty"`
}

type TDunsNumberDataType struct {
	TDunsNumberBaseType

	XsdGoPkgHasAttr_DunsNumberType_TxsdDunsNumberDataTypeSimpleContentExtensionDunsNumberType_
}

//	If the WalkHandlers.TDunsNumberDataType function is not nil (ie. was set by outside code), calls it with this TDunsNumberDataType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TDunsNumberDataType instance.
func (me *TDunsNumberDataType) Walk() (err error) {
	if fn := WalkHandlers.TDunsNumberDataType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DunsNumber struct {
	DunsNumber *TDunsNumberDataType `xml:"DunsNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DunsNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DunsNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DunsNumber instance.
func (me *XsdGoPkgHasElem_DunsNumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DunsNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DunsNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DunsNumber struct {
	DunsNumbers []*TDunsNumberDataType `xml:"DunsNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DunsNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DunsNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DunsNumber instance.
func (me *XsdGoPkgHasElems_DunsNumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DunsNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DunsNumbers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	School, College or institution attended.  Associated type attribute further qualifies the name as current, prior,  degree or joint.
//	Identifier of the School, College or institution attended.  Associated type attribute further qualifies the name as current, prior,  degree or joint.
type XsdGoPkgHasElems_SchoolIdsequenceSchoolDataTypeschema_SchoolId_TEntityIdType_ struct {
	//	Identifier of the School, College or institution attended.  Associated type attribute further qualifies the name as current, prior,  degree or joint.
	SchoolIds []*TEntityIdType `xml:"SchoolId"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SchoolIdsequenceSchoolDataTypeschema_SchoolId_TEntityIdType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SchoolIdsequenceSchoolDataTypeschema_SchoolId_TEntityIdType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SchoolIdsequenceSchoolDataTypeschema_SchoolId_TEntityIdType_ instance.
func (me *XsdGoPkgHasElems_SchoolIdsequenceSchoolDataTypeschema_SchoolId_TEntityIdType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SchoolIdsequenceSchoolDataTypeschema_SchoolId_TEntityIdType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SchoolIds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	School, College or institution attended.  Associated type attribute further qualifies the name as current, prior,  degree or joint.
type XsdGoPkgHasElem_SchoolNamesequenceSchoolDataTypeschema_SchoolName_XsdtString_ struct {
	//	School, College or institution attended.  Associated type attribute further qualifies the name as current, prior,  degree or joint.
	SchoolName xsdt.String `xml:"SchoolName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SchoolNamesequenceSchoolDataTypeschema_SchoolName_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SchoolNamesequenceSchoolDataTypeschema_SchoolName_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SchoolNamesequenceSchoolDataTypeschema_SchoolName_XsdtString_ instance.
func (me *XsdGoPkgHasElem_SchoolNamesequenceSchoolDataTypeschema_SchoolName_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SchoolNamesequenceSchoolDataTypeschema_SchoolName_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Further refines the name of the institution.
type TSchoolTypeType xsdt.String

//	This convenience method just performs a simple type conversion to TSchoolTypeType's alias type xsdt.String.
func (me TSchoolTypeType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TSchoolTypeType is "current".
func (me TSchoolTypeType) IsCurrent() bool { return me.String() == "current" }

//	Returns true if the value of this enumerated TSchoolTypeType is "prior".
func (me TSchoolTypeType) IsPrior() bool { return me.String() == "prior" }

//	Returns true if the value of this enumerated TSchoolTypeType is "joint".
func (me TSchoolTypeType) IsJoint() bool { return me.String() == "joint" }

//	Returns true if the value of this enumerated TSchoolTypeType is "degree".
func (me TSchoolTypeType) IsDegree() bool { return me.String() == "degree" }

//	Since TSchoolTypeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TSchoolTypeType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TSchoolTypeType is just a simple String type, this merely returns the current string value.
func (me TSchoolTypeType) String() string { return xsdt.String(me).String() }

type XsdGoPkgHasAttr_Type_TSchoolTypeType_ struct {
	Type TSchoolTypeType `xml:"type,attr,omitempty"`
}

type XsdGoPkgHasAttr_PrimaryIndicator_XsdtBoolean_ struct {
	PrimaryIndicator xsdt.Boolean `xml:"primaryIndicator,attr,omitempty"`
}

type TInternetDomainNameType struct {
	XsdtString

	XsdGoPkgHasAttr_PrimaryIndicator_XsdtBoolean_
}

//	If the WalkHandlers.TInternetDomainNameType function is not nil (ie. was set by outside code), calls it with this TInternetDomainNameType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TInternetDomainNameType instance.
func (me *TInternetDomainNameType) Walk() (err error) {
	if fn := WalkHandlers.TInternetDomainNameType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_InternetDomainNamesequenceSchoolDataTypeschema_InternetDomainName_TInternetDomainNameType_ struct {
	InternetDomainNames []*TInternetDomainNameType `xml:"InternetDomainName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InternetDomainNamesequenceSchoolDataTypeschema_InternetDomainName_TInternetDomainNameType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InternetDomainNamesequenceSchoolDataTypeschema_InternetDomainName_TInternetDomainNameType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InternetDomainNamesequenceSchoolDataTypeschema_InternetDomainName_TInternetDomainNameType_ instance.
func (me *XsdGoPkgHasElems_InternetDomainNamesequenceSchoolDataTypeschema_InternetDomainName_TInternetDomainNameType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InternetDomainNamesequenceSchoolDataTypeschema_InternetDomainName_TInternetDomainNameType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.InternetDomainNames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSchoolDataType struct {
	XsdGoPkgHasElems_InternetDomainNamesequenceSchoolDataTypeschema_InternetDomainName_TInternetDomainNameType_

	//	Identifier of the School, College or institution attended.  Associated type attribute further qualifies the name as current, prior,  degree or joint.
	XsdGoPkgHasElems_SchoolIdsequenceSchoolDataTypeschema_SchoolId_TEntityIdType_

	//	School, College or institution attended.  Associated type attribute further qualifies the name as current, prior,  degree or joint.
	XsdGoPkgHasElem_SchoolNamesequenceSchoolDataTypeschema_SchoolName_XsdtString_

	XsdGoPkgHasAttr_Type_TSchoolTypeType_
}

//	If the WalkHandlers.TSchoolDataType function is not nil (ie. was set by outside code), calls it with this TSchoolDataType instance as the single argument. Then calls the Walk() method on 3/4 embed(s) and 0/0 field(s) belonging to this TSchoolDataType instance.
func (me *TSchoolDataType) Walk() (err error) {
	if fn := WalkHandlers.TSchoolDataType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_SchoolIdsequenceSchoolDataTypeschema_SchoolId_TEntityIdType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SchoolNamesequenceSchoolDataTypeschema_SchoolName_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_InternetDomainNamesequenceSchoolDataTypeschema_InternetDomainName_TInternetDomainNameType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SchoolsequenceSchoolOrInstitutionTypeschema_School_TSchoolDataType_ struct {
	//	School, College or institution attended.  Associated type attribute further qualifies the name as current, prior,  degree or joint.
	Schools []*TSchoolDataType `xml:"School"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SchoolsequenceSchoolOrInstitutionTypeschema_School_TSchoolDataType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SchoolsequenceSchoolOrInstitutionTypeschema_School_TSchoolDataType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SchoolsequenceSchoolOrInstitutionTypeschema_School_TSchoolDataType_ instance.
func (me *XsdGoPkgHasElems_SchoolsequenceSchoolOrInstitutionTypeschema_School_TSchoolDataType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SchoolsequenceSchoolOrInstitutionTypeschema_School_TSchoolDataType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Schools {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The campus, department or other organizational unit for the educational institution.
type TorgTypes xsdt.String

//	Returns true if the value of this enumerated TorgTypes is "department".
func (me TorgTypes) IsDepartment() bool { return me.String() == "department" }

//	Returns true if the value of this enumerated TorgTypes is "subSchool".
func (me TorgTypes) IsSubSchool() bool { return me.String() == "subSchool" }

//	Since TorgTypes is just a simple String type, this merely sets the current value from the specified string.
func (me *TorgTypes) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TorgTypes is just a simple String type, this merely returns the current string value.
func (me TorgTypes) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TorgTypes's alias type xsdt.String.
func (me TorgTypes) ToXsdtString() xsdt.String { return xsdt.String(me) }

type TOrgTypeStringExtensionType xsdt.String

//	Since TOrgTypeStringExtensionType is just a simple String type, this merely sets the current value from the specified string.
func (me *TOrgTypeStringExtensionType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TOrgTypeStringExtensionType is just a simple String type, this merely returns the current string value.
func (me TOrgTypeStringExtensionType) String() string { return xsdt.String(me).String() }

//	TOrgTypeStringExtensionType is an XSD union-type of several types. This is a simple type conversion to XsdtString, but keep in mind the actual value may or may not be a valid XsdtString value.
func (me TOrgTypeStringExtensionType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	TOrgTypeStringExtensionType is an XSD union-type of several types. This is a simple type conversion to TorgTypes, but keep in mind the actual value may or may not be a valid TorgTypes value.
func (me TOrgTypeStringExtensionType) ToTorgTypes() TorgTypes { return TorgTypes(me) }

type XsdGoPkgHasAttr_OrganizationType_TOrgTypeStringExtensionType_ struct {
	OrganizationType TOrgTypeStringExtensionType `xml:"organizationType,attr,omitempty"`
}

type TxsdSchoolOrInstitutionTypeSequenceOrganizationUnitSimpleContentExtensionAttendanceStatus xsdt.String

//	Since TxsdSchoolOrInstitutionTypeSequenceOrganizationUnitSimpleContentExtensionAttendanceStatus is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdSchoolOrInstitutionTypeSequenceOrganizationUnitSimpleContentExtensionAttendanceStatus) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

//	Since TxsdSchoolOrInstitutionTypeSequenceOrganizationUnitSimpleContentExtensionAttendanceStatus is just a simple String type, this merely returns the current string value.
func (me TxsdSchoolOrInstitutionTypeSequenceOrganizationUnitSimpleContentExtensionAttendanceStatus) String() string {
	return xsdt.String(me).String()
}

//	This convenience method just performs a simple type conversion to TxsdSchoolOrInstitutionTypeSequenceOrganizationUnitSimpleContentExtensionAttendanceStatus's alias type xsdt.String.
func (me TxsdSchoolOrInstitutionTypeSequenceOrganizationUnitSimpleContentExtensionAttendanceStatus) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

//	Returns true if the value of this enumerated TxsdSchoolOrInstitutionTypeSequenceOrganizationUnitSimpleContentExtensionAttendanceStatus is "current".
func (me TxsdSchoolOrInstitutionTypeSequenceOrganizationUnitSimpleContentExtensionAttendanceStatus) IsCurrent() bool {
	return me.String() == "current"
}

//	Returns true if the value of this enumerated TxsdSchoolOrInstitutionTypeSequenceOrganizationUnitSimpleContentExtensionAttendanceStatus is "prior".
func (me TxsdSchoolOrInstitutionTypeSequenceOrganizationUnitSimpleContentExtensionAttendanceStatus) IsPrior() bool {
	return me.String() == "prior"
}

//	Returns true if the value of this enumerated TxsdSchoolOrInstitutionTypeSequenceOrganizationUnitSimpleContentExtensionAttendanceStatus is "unknown".
func (me TxsdSchoolOrInstitutionTypeSequenceOrganizationUnitSimpleContentExtensionAttendanceStatus) IsUnknown() bool {
	return me.String() == "unknown"
}

type XsdGoPkgHasAttr_AttendanceStatus_TxsdSchoolOrInstitutionTypeSequenceOrganizationUnitSimpleContentExtensionAttendanceStatus_ struct {
	AttendanceStatus TxsdSchoolOrInstitutionTypeSequenceOrganizationUnitSimpleContentExtensionAttendanceStatus `xml:"attendanceStatus,attr,omitempty"`
}

type TxsdSchoolOrInstitutionTypeSequenceOrganizationUnit struct {
	XsdGoPkgHasAttr_OrganizationType_TOrgTypeStringExtensionType_

	XsdGoPkgHasAttr_AttendanceStatus_TxsdSchoolOrInstitutionTypeSequenceOrganizationUnitSimpleContentExtensionAttendanceStatus_

	XsdtString
}

//	If the WalkHandlers.TxsdSchoolOrInstitutionTypeSequenceOrganizationUnit function is not nil (ie. was set by outside code), calls it with this TxsdSchoolOrInstitutionTypeSequenceOrganizationUnit instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdSchoolOrInstitutionTypeSequenceOrganizationUnit instance.
func (me *TxsdSchoolOrInstitutionTypeSequenceOrganizationUnit) Walk() (err error) {
	if fn := WalkHandlers.TxsdSchoolOrInstitutionTypeSequenceOrganizationUnit; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_OrganizationUnitsequenceSchoolOrInstitutionTypeschema_OrganizationUnit_TxsdSchoolOrInstitutionTypeSequenceOrganizationUnit_ struct {
	//	The campus, department or other organizational unit for the educational institution.
	OrganizationUnits []*TxsdSchoolOrInstitutionTypeSequenceOrganizationUnit `xml:"OrganizationUnit"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OrganizationUnitsequenceSchoolOrInstitutionTypeschema_OrganizationUnit_TxsdSchoolOrInstitutionTypeSequenceOrganizationUnit_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OrganizationUnitsequenceSchoolOrInstitutionTypeschema_OrganizationUnit_TxsdSchoolOrInstitutionTypeSequenceOrganizationUnit_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OrganizationUnitsequenceSchoolOrInstitutionTypeschema_OrganizationUnit_TxsdSchoolOrInstitutionTypeSequenceOrganizationUnit_ instance.
func (me *XsdGoPkgHasElems_OrganizationUnitsequenceSchoolOrInstitutionTypeschema_OrganizationUnit_TxsdSchoolOrInstitutionTypeSequenceOrganizationUnit_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OrganizationUnitsequenceSchoolOrInstitutionTypeschema_OrganizationUnit_TxsdSchoolOrInstitutionTypeSequenceOrganizationUnit_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.OrganizationUnits {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_ExamPassed_XsdtBoolean_ struct {
	ExamPassed xsdt.Boolean `xml:"examPassed,attr,omitempty"`
}

//	The subject studied, as expressed on the diploma.
type XsdGoPkgHasAttr_AcademicHonors_XsdtString_ struct {
	AcademicHonors xsdt.String `xml:"academicHonors,attr,omitempty"`
}

type XsdGoPkgHasAttr_HonorsProgram_XsdtString_ struct {
	HonorsProgram xsdt.String `xml:"honorsProgram,attr,omitempty"`
}

type TxsdEduDegreeTypeSequenceDegreeName struct {
	XsdGoPkgHasAttr_AcademicHonors_XsdtString_

	XsdGoPkgHasAttr_HonorsProgram_XsdtString_

	XsdtString
}

//	If the WalkHandlers.TxsdEduDegreeTypeSequenceDegreeName function is not nil (ie. was set by outside code), calls it with this TxsdEduDegreeTypeSequenceDegreeName instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdEduDegreeTypeSequenceDegreeName instance.
func (me *TxsdEduDegreeTypeSequenceDegreeName) Walk() (err error) {
	if fn := WalkHandlers.TxsdEduDegreeTypeSequenceDegreeName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DegreeNamesequenceEduDegreeTypeschema_DegreeName_TxsdEduDegreeTypeSequenceDegreeName_ struct {
	//	The subject studied, as expressed on the diploma.
	DegreeName *TxsdEduDegreeTypeSequenceDegreeName `xml:"DegreeName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DegreeNamesequenceEduDegreeTypeschema_DegreeName_TxsdEduDegreeTypeSequenceDegreeName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DegreeNamesequenceEduDegreeTypeschema_DegreeName_TxsdEduDegreeTypeSequenceDegreeName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DegreeNamesequenceEduDegreeTypeschema_DegreeName_TxsdEduDegreeTypeSequenceDegreeName_ instance.
func (me *XsdGoPkgHasElem_DegreeNamesequenceEduDegreeTypeschema_DegreeName_TxsdEduDegreeTypeSequenceDegreeName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DegreeNamesequenceEduDegreeTypeschema_DegreeName_TxsdEduDegreeTypeSequenceDegreeName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DegreeName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The date the person received their degree.
type XsdGoPkgHasElem_DegreeDatesequenceEduDegreeTypeschema_DegreeDate_TFlexibleDatesType_ struct {
	//	The date the person received their degree.
	DegreeDate *TFlexibleDatesType `xml:"DegreeDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DegreeDatesequenceEduDegreeTypeschema_DegreeDate_TFlexibleDatesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DegreeDatesequenceEduDegreeTypeschema_DegreeDate_TFlexibleDatesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DegreeDatesequenceEduDegreeTypeschema_DegreeDate_TFlexibleDatesType_ instance.
func (me *XsdGoPkgHasElem_DegreeDatesequenceEduDegreeTypeschema_DegreeDate_TFlexibleDatesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DegreeDatesequenceEduDegreeTypeschema_DegreeDate_TFlexibleDatesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DegreeDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The name of any other honors, such as Phi Beta Kappa, etc. that the student may have received.
type XsdGoPkgHasAttr_Type_XsdtString_ struct {
	Type xsdt.String `xml:"type,attr,omitempty"`
}

type TxsdEduDegreeTypeSequenceOtherHonors struct {
	XsdtString

	XsdGoPkgHasAttr_Type_XsdtString_
}

//	If the WalkHandlers.TxsdEduDegreeTypeSequenceOtherHonors function is not nil (ie. was set by outside code), calls it with this TxsdEduDegreeTypeSequenceOtherHonors instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdEduDegreeTypeSequenceOtherHonors instance.
func (me *TxsdEduDegreeTypeSequenceOtherHonors) Walk() (err error) {
	if fn := WalkHandlers.TxsdEduDegreeTypeSequenceOtherHonors; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_OtherHonorssequenceEduDegreeTypeschema_OtherHonors_TxsdEduDegreeTypeSequenceOtherHonors_ struct {
	//	The name of any other honors, such as Phi Beta Kappa, etc. that the student may have received.
	OtherHonorses []*TxsdEduDegreeTypeSequenceOtherHonors `xml:"OtherHonors"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OtherHonorssequenceEduDegreeTypeschema_OtherHonors_TxsdEduDegreeTypeSequenceOtherHonors_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OtherHonorssequenceEduDegreeTypeschema_OtherHonors_TxsdEduDegreeTypeSequenceOtherHonors_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OtherHonorssequenceEduDegreeTypeschema_OtherHonors_TxsdEduDegreeTypeSequenceOtherHonors_ instance.
func (me *XsdGoPkgHasElems_OtherHonorssequenceEduDegreeTypeschema_OtherHonors_TxsdEduDegreeTypeSequenceOtherHonors_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OtherHonorssequenceEduDegreeTypeschema_OtherHonors_TxsdEduDegreeTypeSequenceOtherHonors_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.OtherHonorses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	If applicable, these fields should be used to reflect the official names of any and all minor courses of study associated with the student's degree title.
//	Identifier reflecting the program code(s) associated with any Minor course of Study.
type XsdGoPkgHasElems_ProgramIdsequenceMinorTypeschema_ProgramId_TEntityIdType_ struct {
	//	Identifier reflecting the program code(s) associated with any Minor course of Study.
	ProgramIds []*TEntityIdType `xml:"ProgramId"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ProgramIdsequenceMinorTypeschema_ProgramId_TEntityIdType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ProgramIdsequenceMinorTypeschema_ProgramId_TEntityIdType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ProgramIdsequenceMinorTypeschema_ProgramId_TEntityIdType_ instance.
func (me *XsdGoPkgHasElems_ProgramIdsequenceMinorTypeschema_ProgramId_TEntityIdType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ProgramIdsequenceMinorTypeschema_ProgramId_TEntityIdType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ProgramIds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Reflects the official names of any and all minor courses of study associated with the student's degree title.
type XsdGoPkgHasElems_NamesequenceMinorTypeschema_Name_XsdtString_ struct {
	//	Reflects the official names of any and all minor courses of study associated with the student's degree title.
	Names []xsdt.String `xml:"Name"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NamesequenceMinorTypeschema_Name_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NamesequenceMinorTypeschema_Name_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NamesequenceMinorTypeschema_Name_XsdtString_ instance.
func (me *XsdGoPkgHasElems_NamesequenceMinorTypeschema_Name_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NamesequenceMinorTypeschema_Name_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TMinorType struct {
	//	Identifier reflecting the program code(s) associated with any Minor course of Study.
	XsdGoPkgHasElems_ProgramIdsequenceMinorTypeschema_ProgramId_TEntityIdType_

	//	Reflects the official names of any and all minor courses of study associated with the student's degree title.
	XsdGoPkgHasElems_NamesequenceMinorTypeschema_Name_XsdtString_
}

//	If the WalkHandlers.TMinorType function is not nil (ie. was set by outside code), calls it with this TMinorType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TMinorType instance.
func (me *TMinorType) Walk() (err error) {
	if fn := WalkHandlers.TMinorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_ProgramIdsequenceMinorTypeschema_ProgramId_TEntityIdType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_NamesequenceMinorTypeschema_Name_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DegreeMinorsequenceEduDegreeTypeschema_DegreeMinor_TMinorType_ struct {
	//	If applicable, these fields should be used to reflect the official names of any and all minor courses of study associated with the student's degree title.
	DegreeMinors []*TMinorType `xml:"DegreeMinor"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DegreeMinorsequenceEduDegreeTypeschema_DegreeMinor_TMinorType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DegreeMinorsequenceEduDegreeTypeschema_DegreeMinor_TMinorType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DegreeMinorsequenceEduDegreeTypeschema_DegreeMinor_TMinorType_ instance.
func (me *XsdGoPkgHasElems_DegreeMinorsequenceEduDegreeTypeschema_DegreeMinor_TMinorType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DegreeMinorsequenceEduDegreeTypeschema_DegreeMinor_TMinorType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DegreeMinors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TdegreeTypes xsdt.String

//	Returns true if the value of this enumerated TdegreeTypes is "HND/HNC or equivalent".
func (me TdegreeTypes) IsHndHncOrEquivalent() bool { return me.String() == "HND/HNC or equivalent" }

//	Returns true if the value of this enumerated TdegreeTypes is "associates".
func (me TdegreeTypes) IsAssociates() bool { return me.String() == "associates" }

//	Returns true if the value of this enumerated TdegreeTypes is "specialeducation".
func (me TdegreeTypes) IsSpecialeducation() bool { return me.String() == "specialeducation" }

//	Returns true if the value of this enumerated TdegreeTypes is "international".
func (me TdegreeTypes) IsInternational() bool { return me.String() == "international" }

//	Returns true if the value of this enumerated TdegreeTypes is "ged".
func (me TdegreeTypes) IsGed() bool { return me.String() == "ged" }

//	Returns true if the value of this enumerated TdegreeTypes is "secondary".
func (me TdegreeTypes) IsSecondary() bool { return me.String() == "secondary" }

//	Returns true if the value of this enumerated TdegreeTypes is "some high school or equivalent".
func (me TdegreeTypes) IsSomeHighSchoolOrEquivalent() bool {
	return me.String() == "some high school or equivalent"
}

//	Returns true if the value of this enumerated TdegreeTypes is "certification".
func (me TdegreeTypes) IsCertification() bool { return me.String() == "certification" }

//	Returns true if the value of this enumerated TdegreeTypes is "some post-graduate".
func (me TdegreeTypes) IsSomePostGraduate() bool { return me.String() == "some post-graduate" }

//	Returns true if the value of this enumerated TdegreeTypes is "masters".
func (me TdegreeTypes) IsMasters() bool { return me.String() == "masters" }

//	Returns true if the value of this enumerated TdegreeTypes is "doctorate".
func (me TdegreeTypes) IsDoctorate() bool { return me.String() == "doctorate" }

//	Returns true if the value of this enumerated TdegreeTypes is "postdoctorate".
func (me TdegreeTypes) IsPostdoctorate() bool { return me.String() == "postdoctorate" }

//	Since TdegreeTypes is just a simple String type, this merely sets the current value from the specified string.
func (me *TdegreeTypes) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TdegreeTypes is just a simple String type, this merely returns the current string value.
func (me TdegreeTypes) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TdegreeTypes's alias type xsdt.String.
func (me TdegreeTypes) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TdegreeTypes is "high school or equivalent".
func (me TdegreeTypes) IsHighSchoolOrEquivalent() bool {
	return me.String() == "high school or equivalent"
}

//	Returns true if the value of this enumerated TdegreeTypes is "vocational".
func (me TdegreeTypes) IsVocational() bool { return me.String() == "vocational" }

//	Returns true if the value of this enumerated TdegreeTypes is "professional".
func (me TdegreeTypes) IsProfessional() bool { return me.String() == "professional" }

//	Returns true if the value of this enumerated TdegreeTypes is "postprofessional".
func (me TdegreeTypes) IsPostprofessional() bool { return me.String() == "postprofessional" }

//	Returns true if the value of this enumerated TdegreeTypes is "some college".
func (me TdegreeTypes) IsSomeCollege() bool { return me.String() == "some college" }

//	Returns true if the value of this enumerated TdegreeTypes is "bachelors".
func (me TdegreeTypes) IsBachelors() bool { return me.String() == "bachelors" }

//	Returns true if the value of this enumerated TdegreeTypes is "intermediategraduate".
func (me TdegreeTypes) IsIntermediategraduate() bool { return me.String() == "intermediategraduate" }

type TdegreeCodeTypes xsdt.String

//	Returns true if the value of this enumerated TdegreeCodeTypes is "B21".
func (me TdegreeCodeTypes) IsB21() bool { return me.String() == "B21" }

//	Returns true if the value of this enumerated TdegreeCodeTypes is "B22".
func (me TdegreeCodeTypes) IsB22() bool { return me.String() == "B22" }

//	Returns true if the value of this enumerated TdegreeCodeTypes is "B24".
func (me TdegreeCodeTypes) IsB24() bool { return me.String() == "B24" }

//	Since TdegreeCodeTypes is just a simple String type, this merely sets the current value from the specified string.
func (me *TdegreeCodeTypes) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TdegreeCodeTypes is "B18".
func (me TdegreeCodeTypes) IsB18() bool { return me.String() == "B18" }

//	Returns true if the value of this enumerated TdegreeCodeTypes is "B20".
func (me TdegreeCodeTypes) IsB20() bool { return me.String() == "B20" }

//	Returns true if the value of this enumerated TdegreeCodeTypes is "B19".
func (me TdegreeCodeTypes) IsB19() bool { return me.String() == "B19" }

//	Returns true if the value of this enumerated TdegreeCodeTypes is "B23".
func (me TdegreeCodeTypes) IsB23() bool { return me.String() == "B23" }

//	Returns true if the value of this enumerated TdegreeCodeTypes is "B25".
func (me TdegreeCodeTypes) IsB25() bool { return me.String() == "B25" }

//	Returns true if the value of this enumerated TdegreeCodeTypes is "B26".
func (me TdegreeCodeTypes) IsB26() bool { return me.String() == "B26" }

//	Since TdegreeCodeTypes is just a simple String type, this merely returns the current string value.
func (me TdegreeCodeTypes) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TdegreeCodeTypes's alias type xsdt.String.
func (me TdegreeCodeTypes) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TdegreeCodeTypes is "B17".
func (me TdegreeCodeTypes) IsB17() bool { return me.String() == "B17" }

type TgraduationCodeTypes xsdt.String

//	Since TgraduationCodeTypes is just a simple String type, this merely returns the current string value.
func (me TgraduationCodeTypes) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TgraduationCodeTypes is "3.1".
func (me TgraduationCodeTypes) Is31() bool { return me.String() == "3.1" }

//	Returns true if the value of this enumerated TgraduationCodeTypes is "4.3".
func (me TgraduationCodeTypes) Is43() bool { return me.String() == "4.3" }

//	Since TgraduationCodeTypes is just a simple String type, this merely sets the current value from the specified string.
func (me *TgraduationCodeTypes) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TgraduationCodeTypes is "2.1".
func (me TgraduationCodeTypes) Is21() bool { return me.String() == "2.1" }

//	Returns true if the value of this enumerated TgraduationCodeTypes is "2.6".
func (me TgraduationCodeTypes) Is26() bool { return me.String() == "2.6" }

//	Returns true if the value of this enumerated TgraduationCodeTypes is "2.7".
func (me TgraduationCodeTypes) Is27() bool { return me.String() == "2.7" }

//	Returns true if the value of this enumerated TgraduationCodeTypes is "3.2".
func (me TgraduationCodeTypes) Is32() bool { return me.String() == "3.2" }

//	Returns true if the value of this enumerated TgraduationCodeTypes is "4.4".
func (me TgraduationCodeTypes) Is44() bool { return me.String() == "4.4" }

//	Returns true if the value of this enumerated TgraduationCodeTypes is "2.2".
func (me TgraduationCodeTypes) Is22() bool { return me.String() == "2.2" }

//	Returns true if the value of this enumerated TgraduationCodeTypes is "4.1".
func (me TgraduationCodeTypes) Is41() bool { return me.String() == "4.1" }

//	This convenience method just performs a simple type conversion to TgraduationCodeTypes's alias type xsdt.String.
func (me TgraduationCodeTypes) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TgraduationCodeTypes is "2.3".
func (me TgraduationCodeTypes) Is23() bool { return me.String() == "2.3" }

//	Returns true if the value of this enumerated TgraduationCodeTypes is "2.4".
func (me TgraduationCodeTypes) Is24() bool { return me.String() == "2.4" }

//	Returns true if the value of this enumerated TgraduationCodeTypes is "2.5".
func (me TgraduationCodeTypes) Is25() bool { return me.String() == "2.5" }

//	Returns true if the value of this enumerated TgraduationCodeTypes is "4.2".
func (me TgraduationCodeTypes) Is42() bool { return me.String() == "4.2" }

//	Returns true if the value of this enumerated TgraduationCodeTypes is "4.5".
func (me TgraduationCodeTypes) Is45() bool { return me.String() == "4.5" }

type TDegreeTypeStringExtensionType xsdt.String

//	TDegreeTypeStringExtensionType is an XSD union-type of several types. This is a simple type conversion to TdegreeTypes, but keep in mind the actual value may or may not be a valid TdegreeTypes value.
func (me TDegreeTypeStringExtensionType) ToTdegreeTypes() TdegreeTypes { return TdegreeTypes(me) }

//	TDegreeTypeStringExtensionType is an XSD union-type of several types. This is a simple type conversion to TdegreeCodeTypes, but keep in mind the actual value may or may not be a valid TdegreeCodeTypes value.
func (me TDegreeTypeStringExtensionType) ToTdegreeCodeTypes() TdegreeCodeTypes {
	return TdegreeCodeTypes(me)
}

//	TDegreeTypeStringExtensionType is an XSD union-type of several types. This is a simple type conversion to TgraduationCodeTypes, but keep in mind the actual value may or may not be a valid TgraduationCodeTypes value.
func (me TDegreeTypeStringExtensionType) ToTgraduationCodeTypes() TgraduationCodeTypes {
	return TgraduationCodeTypes(me)
}

//	Since TDegreeTypeStringExtensionType is just a simple String type, this merely sets the current value from the specified string.
func (me *TDegreeTypeStringExtensionType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TDegreeTypeStringExtensionType is just a simple String type, this merely returns the current string value.
func (me TDegreeTypeStringExtensionType) String() string { return xsdt.String(me).String() }

//	TDegreeTypeStringExtensionType is an XSD union-type of several types. This is a simple type conversion to XsdtString, but keep in mind the actual value may or may not be a valid XsdtString value.
func (me TDegreeTypeStringExtensionType) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_DegreeType_TDegreeTypeStringExtensionType_ struct {
	DegreeType TDegreeTypeStringExtensionType `xml:"degreeType,attr,omitempty"`
}

//	The official names of any and all major courses of study associated with the student's degree title.
//	Reflects the official names of any and all major concentrations associated with the student's degree title. For example, a Math major may have an Applied Math concentration even though this area of concentration is not required to pursue a Math major.
type XsdGoPkgHasElems_DegreeConcentrationsequenceMajorTypeschema_DegreeConcentration_XsdtString_ struct {
	//	Reflects the official names of any and all major concentrations associated with the student's degree title. For example, a Math major may have an Applied Math concentration even though this area of concentration is not required to pursue a Math major.
	DegreeConcentrations []xsdt.String `xml:"DegreeConcentration"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DegreeConcentrationsequenceMajorTypeschema_DegreeConcentration_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DegreeConcentrationsequenceMajorTypeschema_DegreeConcentration_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DegreeConcentrationsequenceMajorTypeschema_DegreeConcentration_XsdtString_ instance.
func (me *XsdGoPkgHasElems_DegreeConcentrationsequenceMajorTypeschema_DegreeConcentration_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DegreeConcentrationsequenceMajorTypeschema_DegreeConcentration_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Reflects the official names of any and all major options associated with the student's degree title. For example, a particular institution may require their Engineering majors to select either a Mechanical Engineering option or a Structural Engineering option.
type XsdGoPkgHasElems_OptionsequenceMajorTypeschema_Option_XsdtString_ struct {
	//	Reflects the official names of any and all major options associated with the student's degree title. For example, a particular institution may require their Engineering majors to select either a Mechanical Engineering option or a Structural Engineering option.
	Options []xsdt.String `xml:"Option"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OptionsequenceMajorTypeschema_Option_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OptionsequenceMajorTypeschema_Option_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OptionsequenceMajorTypeschema_Option_XsdtString_ instance.
func (me *XsdGoPkgHasElems_OptionsequenceMajorTypeschema_Option_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OptionsequenceMajorTypeschema_Option_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TMajorType struct {
	//	Identifier reflecting the program code(s) associated with any Major course of Study.
	XsdGoPkgHasElems_ProgramIdsequenceMinorTypeschema_ProgramId_TEntityIdType_

	//	Reflects the official names of any and all major concentrations associated with the student's degree title. For example, a Math major may have an Applied Math concentration even though this area of concentration is not required to pursue a Math major.
	XsdGoPkgHasElems_DegreeConcentrationsequenceMajorTypeschema_DegreeConcentration_XsdtString_

	//	Reflects the official names of any and all major courses of study associated with the student's degree title.
	XsdGoPkgHasElems_NamesequenceMinorTypeschema_Name_XsdtString_

	//	Reflects the official names of any and all major options associated with the student's degree title. For example, a particular institution may require their Engineering majors to select either a Mechanical Engineering option or a Structural Engineering option.
	XsdGoPkgHasElems_OptionsequenceMajorTypeschema_Option_XsdtString_
}

//	If the WalkHandlers.TMajorType function is not nil (ie. was set by outside code), calls it with this TMajorType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TMajorType instance.
func (me *TMajorType) Walk() (err error) {
	if fn := WalkHandlers.TMajorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_NamesequenceMinorTypeschema_Name_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_OptionsequenceMajorTypeschema_Option_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ProgramIdsequenceMinorTypeschema_ProgramId_TEntityIdType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_DegreeConcentrationsequenceMajorTypeschema_DegreeConcentration_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DegreeMajorsequenceEduDegreeTypeschema_DegreeMajor_TMajorType_ struct {
	//	The official names of any and all major courses of study associated with the student's degree title.
	DegreeMajors []*TMajorType `xml:"DegreeMajor"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DegreeMajorsequenceEduDegreeTypeschema_DegreeMajor_TMajorType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DegreeMajorsequenceEduDegreeTypeschema_DegreeMajor_TMajorType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DegreeMajorsequenceEduDegreeTypeschema_DegreeMajor_TMajorType_ instance.
func (me *XsdGoPkgHasElems_DegreeMajorsequenceEduDegreeTypeschema_DegreeMajor_TMajorType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DegreeMajorsequenceEduDegreeTypeschema_DegreeMajor_TMajorType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DegreeMajors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	This is a student's numerical class rank with the highest student in the class having a rank or position of 1
type XsdGoPkgHasAttr_NumberOfStudents_XsdtInteger_ struct {
	NumberOfStudents xsdt.Integer `xml:"numberOfStudents,attr,omitempty"`
}

type TxsdEducationalMeasureTypeSequenceClassRank struct {
	XsdtInteger

	XsdGoPkgHasAttr_NumberOfStudents_XsdtInteger_
}

//	If the WalkHandlers.TxsdEducationalMeasureTypeSequenceClassRank function is not nil (ie. was set by outside code), calls it with this TxsdEducationalMeasureTypeSequenceClassRank instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdEducationalMeasureTypeSequenceClassRank instance.
func (me *TxsdEducationalMeasureTypeSequenceClassRank) Walk() (err error) {
	if fn := WalkHandlers.TxsdEducationalMeasureTypeSequenceClassRank; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ClassRanksequenceEducationalMeasureTypeschema_ClassRank_TxsdEducationalMeasureTypeSequenceClassRank_ struct {
	//	This is a student's numerical class rank with the highest student in the class having a rank or position of 1
	ClassRank *TxsdEducationalMeasureTypeSequenceClassRank `xml:"ClassRank"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ClassRanksequenceEducationalMeasureTypeschema_ClassRank_TxsdEducationalMeasureTypeSequenceClassRank_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ClassRanksequenceEducationalMeasureTypeschema_ClassRank_TxsdEducationalMeasureTypeSequenceClassRank_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ClassRanksequenceEducationalMeasureTypeschema_ClassRank_TxsdEducationalMeasureTypeSequenceClassRank_ instance.
func (me *XsdGoPkgHasElem_ClassRanksequenceEducationalMeasureTypeschema_ClassRank_TxsdEducationalMeasureTypeSequenceClassRank_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ClassRanksequenceEducationalMeasureTypeschema_ClassRank_TxsdEducationalMeasureTypeSequenceClassRank_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ClassRank.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_MeasureType_XsdtString_ struct {
	MeasureType xsdt.String `xml:"measureType,attr,omitempty"`
}

//	Identifies the measurement system.  i.e. GPA
//	The value specifying the minimum of the measurement range
type TMeasureValueType struct {
	XsdGoPkgHasElem_NumericValue

	XsdGoPkgHasElem_StringValue
}

//	If the WalkHandlers.TMeasureValueType function is not nil (ie. was set by outside code), calls it with this TMeasureValueType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TMeasureValueType instance.
func (me *TMeasureValueType) Walk() (err error) {
	if fn := WalkHandlers.TMeasureValueType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_NumericValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_StringValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_LowestPossibleValuesequenceEducationMeasureTypeschema_LowestPossibleValue_TMeasureValueType_ struct {
	//	The value specifying the minimum of the measurement range
	LowestPossibleValue *TMeasureValueType `xml:"LowestPossibleValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LowestPossibleValuesequenceEducationMeasureTypeschema_LowestPossibleValue_TMeasureValueType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LowestPossibleValuesequenceEducationMeasureTypeschema_LowestPossibleValue_TMeasureValueType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LowestPossibleValuesequenceEducationMeasureTypeschema_LowestPossibleValue_TMeasureValueType_ instance.
func (me *XsdGoPkgHasElem_LowestPossibleValuesequenceEducationMeasureTypeschema_LowestPossibleValue_TMeasureValueType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LowestPossibleValuesequenceEducationMeasureTypeschema_LowestPossibleValue_TMeasureValueType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LowestPossibleValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The value specifying the maximum of the measurement range
type XsdGoPkgHasElem_HighestPossibleValuesequenceEducationMeasureTypeschema_HighestPossibleValue_TMeasureValueType_ struct {
	//	The value specifying the maximum of the measurement range
	HighestPossibleValue *TMeasureValueType `xml:"HighestPossibleValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_HighestPossibleValuesequenceEducationMeasureTypeschema_HighestPossibleValue_TMeasureValueType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_HighestPossibleValuesequenceEducationMeasureTypeschema_HighestPossibleValue_TMeasureValueType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_HighestPossibleValuesequenceEducationMeasureTypeschema_HighestPossibleValue_TMeasureValueType_ instance.
func (me *XsdGoPkgHasElem_HighestPossibleValuesequenceEducationMeasureTypeschema_HighestPossibleValue_TMeasureValueType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_HighestPossibleValuesequenceEducationMeasureTypeschema_HighestPossibleValue_TMeasureValueType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.HighestPossibleValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	This is a code indicating that an A+ grade has a value higher than the highest possible GPA.  False - It is not possible to have a higher GPA than indicated in Range Maximum.  True - It is possible to have a higher GPA than indicated in Range Maximum.
type XsdGoPkgHasElem_ExcessiveValueIndicatorsequenceEducationMeasureTypeschema_ExcessiveValueIndicator_XsdtBoolean_ struct {
	//	This is a code indicating that an A+ grade has a value higher than the highest possible GPA.  False - It is not possible to have a higher GPA than indicated in Range Maximum.  True - It is possible to have a higher GPA than indicated in Range Maximum.
	ExcessiveValueIndicator xsdt.Boolean `xml:"ExcessiveValueIndicator"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ExcessiveValueIndicatorsequenceEducationMeasureTypeschema_ExcessiveValueIndicator_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ExcessiveValueIndicatorsequenceEducationMeasureTypeschema_ExcessiveValueIndicator_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ExcessiveValueIndicatorsequenceEducationMeasureTypeschema_ExcessiveValueIndicator_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElem_ExcessiveValueIndicatorsequenceEducationMeasureTypeschema_ExcessiveValueIndicator_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ExcessiveValueIndicatorsequenceEducationMeasureTypeschema_ExcessiveValueIndicator_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GoodStudentIndicatorsequenceEducationMeasureTypeschema_GoodStudentIndicator_XsdtBoolean_ struct {
	GoodStudentIndicator xsdt.Boolean `xml:"GoodStudentIndicator"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GoodStudentIndicatorsequenceEducationMeasureTypeschema_GoodStudentIndicator_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GoodStudentIndicatorsequenceEducationMeasureTypeschema_GoodStudentIndicator_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_GoodStudentIndicatorsequenceEducationMeasureTypeschema_GoodStudentIndicator_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElem_GoodStudentIndicatorsequenceEducationMeasureTypeschema_GoodStudentIndicator_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GoodStudentIndicatorsequenceEducationMeasureTypeschema_GoodStudentIndicator_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Identifies the measurement system.  i.e. GPA
type XsdGoPkgHasElem_MeasureSystemsequenceEducationMeasureTypeschema_MeasureSystem_XsdtString_ struct {
	//	Identifies the measurement system.  i.e. GPA
	MeasureSystem xsdt.String `xml:"MeasureSystem"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MeasureSystemsequenceEducationMeasureTypeschema_MeasureSystem_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MeasureSystemsequenceEducationMeasureTypeschema_MeasureSystem_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_MeasureSystemsequenceEducationMeasureTypeschema_MeasureSystem_XsdtString_ instance.
func (me *XsdGoPkgHasElem_MeasureSystemsequenceEducationMeasureTypeschema_MeasureSystem_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MeasureSystemsequenceEducationMeasureTypeschema_MeasureSystem_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The grade point average of a student.
type XsdGoPkgHasElem_MeasureValuesequenceEducationMeasureTypeschema_MeasureValue_TMeasureValueType_ struct {
	//	The grade point average of a student.
	MeasureValue *TMeasureValueType `xml:"MeasureValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MeasureValuesequenceEducationMeasureTypeschema_MeasureValue_TMeasureValueType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MeasureValuesequenceEducationMeasureTypeschema_MeasureValue_TMeasureValueType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MeasureValuesequenceEducationMeasureTypeschema_MeasureValue_TMeasureValueType_ instance.
func (me *XsdGoPkgHasElem_MeasureValuesequenceEducationMeasureTypeschema_MeasureValue_TMeasureValueType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MeasureValuesequenceEducationMeasureTypeschema_MeasureValue_TMeasureValueType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MeasureValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TEducationMeasureType struct {
	//	The value specifying the minimum of the measurement range
	XsdGoPkgHasElem_LowestPossibleValuesequenceEducationMeasureTypeschema_LowestPossibleValue_TMeasureValueType_

	//	The value specifying the maximum of the measurement range
	XsdGoPkgHasElem_HighestPossibleValuesequenceEducationMeasureTypeschema_HighestPossibleValue_TMeasureValueType_

	//	This is a code indicating that an A+ grade has a value higher than the highest possible GPA.  False - It is not possible to have a higher GPA than indicated in Range Maximum.  True - It is possible to have a higher GPA than indicated in Range Maximum.
	XsdGoPkgHasElem_ExcessiveValueIndicatorsequenceEducationMeasureTypeschema_ExcessiveValueIndicator_XsdtBoolean_

	XsdGoPkgHasElem_GoodStudentIndicatorsequenceEducationMeasureTypeschema_GoodStudentIndicator_XsdtBoolean_

	//	Identifies the measurement system.  i.e. GPA
	XsdGoPkgHasElem_MeasureSystemsequenceEducationMeasureTypeschema_MeasureSystem_XsdtString_

	//	The grade point average of a student.
	XsdGoPkgHasElem_MeasureValuesequenceEducationMeasureTypeschema_MeasureValue_TMeasureValueType_
}

//	If the WalkHandlers.TEducationMeasureType function is not nil (ie. was set by outside code), calls it with this TEducationMeasureType instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TEducationMeasureType instance.
func (me *TEducationMeasureType) Walk() (err error) {
	if fn := WalkHandlers.TEducationMeasureType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_MeasureSystemsequenceEducationMeasureTypeschema_MeasureSystem_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MeasureValuesequenceEducationMeasureTypeschema_MeasureValue_TMeasureValueType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LowestPossibleValuesequenceEducationMeasureTypeschema_LowestPossibleValue_TMeasureValueType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_HighestPossibleValuesequenceEducationMeasureTypeschema_HighestPossibleValue_TMeasureValueType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ExcessiveValueIndicatorsequenceEducationMeasureTypeschema_ExcessiveValueIndicator_XsdtBoolean_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GoodStudentIndicatorsequenceEducationMeasureTypeschema_GoodStudentIndicator_XsdtBoolean_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EducationalMeasuresequenceEducationalMeasureTypeschema_EducationalMeasure_TEducationMeasureType_ struct {
	//	Identifies the measurement system.  i.e. GPA
	EducationalMeasure *TEducationMeasureType `xml:"EducationalMeasure"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EducationalMeasuresequenceEducationalMeasureTypeschema_EducationalMeasure_TEducationMeasureType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EducationalMeasuresequenceEducationalMeasureTypeschema_EducationalMeasure_TEducationMeasureType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_EducationalMeasuresequenceEducationalMeasureTypeschema_EducationalMeasure_TEducationMeasureType_ instance.
func (me *XsdGoPkgHasElem_EducationalMeasuresequenceEducationalMeasureTypeschema_EducationalMeasure_TEducationMeasureType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EducationalMeasuresequenceEducationalMeasureTypeschema_EducationalMeasure_TEducationMeasureType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EducationalMeasure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Code indicating the level or type or both, of work which is reflected in the grade average and the credit hours
type TCourseLevelCodeType xsdt.String

//	Returns true if the value of this enumerated TCourseLevelCodeType is "6".
func (me TCourseLevelCodeType) Is6() bool { return me.String() == "6" }

//	Returns true if the value of this enumerated TCourseLevelCodeType is "9".
func (me TCourseLevelCodeType) Is9() bool { return me.String() == "9" }

//	Returns true if the value of this enumerated TCourseLevelCodeType is "DL".
func (me TCourseLevelCodeType) IsDl() bool { return me.String() == "DL" }

//	Returns true if the value of this enumerated TCourseLevelCodeType is "G".
func (me TCourseLevelCodeType) IsG() bool { return me.String() == "G" }

//	This convenience method just performs a simple type conversion to TCourseLevelCodeType's alias type xsdt.String.
func (me TCourseLevelCodeType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TCourseLevelCodeType is "4".
func (me TCourseLevelCodeType) Is4() bool { return me.String() == "4" }

//	Returns true if the value of this enumerated TCourseLevelCodeType is "16".
func (me TCourseLevelCodeType) Is16() bool { return me.String() == "16" }

//	Returns true if the value of this enumerated TCourseLevelCodeType is "A".
func (me TCourseLevelCodeType) IsA() bool { return me.String() == "A" }

//	Returns true if the value of this enumerated TCourseLevelCodeType is "2".
func (me TCourseLevelCodeType) Is2() bool { return me.String() == "2" }

//	Returns true if the value of this enumerated TCourseLevelCodeType is "5".
func (me TCourseLevelCodeType) Is5() bool { return me.String() == "5" }

//	Returns true if the value of this enumerated TCourseLevelCodeType is "7".
func (me TCourseLevelCodeType) Is7() bool { return me.String() == "7" }

//	Returns true if the value of this enumerated TCourseLevelCodeType is "13".
func (me TCourseLevelCodeType) Is13() bool { return me.String() == "13" }

//	Returns true if the value of this enumerated TCourseLevelCodeType is "F".
func (me TCourseLevelCodeType) IsF() bool { return me.String() == "F" }

//	Returns true if the value of this enumerated TCourseLevelCodeType is "P".
func (me TCourseLevelCodeType) IsP() bool { return me.String() == "P" }

//	Since TCourseLevelCodeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TCourseLevelCodeType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TCourseLevelCodeType is "12".
func (me TCourseLevelCodeType) Is12() bool { return me.String() == "12" }

//	Returns true if the value of this enumerated TCourseLevelCodeType is "15".
func (me TCourseLevelCodeType) Is15() bool { return me.String() == "15" }

//	Returns true if the value of this enumerated TCourseLevelCodeType is "AR".
func (me TCourseLevelCodeType) IsAr() bool { return me.String() == "AR" }

//	Returns true if the value of this enumerated TCourseLevelCodeType is "E".
func (me TCourseLevelCodeType) IsE() bool { return me.String() == "E" }

//	Returns true if the value of this enumerated TCourseLevelCodeType is "I".
func (me TCourseLevelCodeType) IsI() bool { return me.String() == "I" }

//	Returns true if the value of this enumerated TCourseLevelCodeType is "M".
func (me TCourseLevelCodeType) IsM() bool { return me.String() == "M" }

//	Returns true if the value of this enumerated TCourseLevelCodeType is "U".
func (me TCourseLevelCodeType) IsU() bool { return me.String() == "U" }

//	Returns true if the value of this enumerated TCourseLevelCodeType is "11".
func (me TCourseLevelCodeType) Is11() bool { return me.String() == "11" }

//	Returns true if the value of this enumerated TCourseLevelCodeType is "14".
func (me TCourseLevelCodeType) Is14() bool { return me.String() == "14" }

//	Returns true if the value of this enumerated TCourseLevelCodeType is "B".
func (me TCourseLevelCodeType) IsB() bool { return me.String() == "B" }

//	Returns true if the value of this enumerated TCourseLevelCodeType is "H".
func (me TCourseLevelCodeType) IsH() bool { return me.String() == "H" }

//	Returns true if the value of this enumerated TCourseLevelCodeType is "T".
func (me TCourseLevelCodeType) IsT() bool { return me.String() == "T" }

//	Returns true if the value of this enumerated TCourseLevelCodeType is "V".
func (me TCourseLevelCodeType) IsV() bool { return me.String() == "V" }

//	Since TCourseLevelCodeType is just a simple String type, this merely returns the current string value.
func (me TCourseLevelCodeType) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TCourseLevelCodeType is "18".
func (me TCourseLevelCodeType) Is18() bool { return me.String() == "18" }

//	Returns true if the value of this enumerated TCourseLevelCodeType is "10".
func (me TCourseLevelCodeType) Is10() bool { return me.String() == "10" }

//	Returns true if the value of this enumerated TCourseLevelCodeType is "17".
func (me TCourseLevelCodeType) Is17() bool { return me.String() == "17" }

//	Returns true if the value of this enumerated TCourseLevelCodeType is "19".
func (me TCourseLevelCodeType) Is19() bool { return me.String() == "19" }

//	Returns true if the value of this enumerated TCourseLevelCodeType is "L".
func (me TCourseLevelCodeType) IsL() bool { return me.String() == "L" }

//	Returns true if the value of this enumerated TCourseLevelCodeType is "R".
func (me TCourseLevelCodeType) IsR() bool { return me.String() == "R" }

//	Returns true if the value of this enumerated TCourseLevelCodeType is "8".
func (me TCourseLevelCodeType) Is8() bool { return me.String() == "8" }

//	Returns true if the value of this enumerated TCourseLevelCodeType is "3".
func (me TCourseLevelCodeType) Is3() bool { return me.String() == "3" }

//	Returns true if the value of this enumerated TCourseLevelCodeType is "D".
func (me TCourseLevelCodeType) IsD() bool { return me.String() == "D" }

//	Returns true if the value of this enumerated TCourseLevelCodeType is "1".
func (me TCourseLevelCodeType) Is1() bool { return me.String() == "1" }

type XsdGoPkgHasElem_CourseLevelCodesequenceEducationalMeasureTypeschema_CourseLevelCode_TCourseLevelCodeType_ struct {
	//	Code indicating the level or type or both, of work which is reflected in the grade average and the credit hours
	CourseLevelCode TCourseLevelCodeType `xml:"CourseLevelCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CourseLevelCodesequenceEducationalMeasureTypeschema_CourseLevelCode_TCourseLevelCodeType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CourseLevelCodesequenceEducationalMeasureTypeschema_CourseLevelCode_TCourseLevelCodeType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CourseLevelCodesequenceEducationalMeasureTypeschema_CourseLevelCode_TCourseLevelCodeType_ instance.
func (me *XsdGoPkgHasElem_CourseLevelCodesequenceEducationalMeasureTypeschema_CourseLevelCode_TCourseLevelCodeType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CourseLevelCodesequenceEducationalMeasureTypeschema_CourseLevelCode_TCourseLevelCodeType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	This is the total number of credits (credit hours) attemptedand earned and included in this summary.
type XsdGoPkgHasElem_AcademicCreditHoursEarnedsequenceEducationalMeasureTypeschema_AcademicCreditHoursEarned_XsdtDecimal_ struct {
	//	This is the total number of credits (credit hours) attemptedand earned and included in this summary.
	AcademicCreditHoursEarned xsdt.Decimal `xml:"AcademicCreditHoursEarned"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AcademicCreditHoursEarnedsequenceEducationalMeasureTypeschema_AcademicCreditHoursEarned_XsdtDecimal_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AcademicCreditHoursEarnedsequenceEducationalMeasureTypeschema_AcademicCreditHoursEarned_XsdtDecimal_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AcademicCreditHoursEarnedsequenceEducationalMeasureTypeschema_AcademicCreditHoursEarned_XsdtDecimal_ instance.
func (me *XsdGoPkgHasElem_AcademicCreditHoursEarnedsequenceEducationalMeasureTypeschema_AcademicCreditHoursEarned_XsdtDecimal_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AcademicCreditHoursEarnedsequenceEducationalMeasureTypeschema_AcademicCreditHoursEarned_XsdtDecimal_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	This is the total number of credits (credit hours) included on the record for this particular summary. This would normally be all credits for which the student paid, whether or not the credits were used to calculate the grade point average. Examples of credit hours to be included, if available, are credits for which non-punitive grades such as "I" or "W" or "Audit" were awarded.
type XsdGoPkgHasElem_AcademicCreditHoursAttemptedsequenceEducationalMeasureTypeschema_AcademicCreditHoursAttempted_XsdtDecimal_ struct {
	//	This is the total number of credits (credit hours) included on the record for this particular summary. This would normally be all credits for which the student paid, whether or not the credits were used to calculate the grade point average. Examples of credit hours to be included, if available, are credits for which non-punitive grades such as "I" or "W" or "Audit" were awarded.
	AcademicCreditHoursAttempted xsdt.Decimal `xml:"AcademicCreditHoursAttempted"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AcademicCreditHoursAttemptedsequenceEducationalMeasureTypeschema_AcademicCreditHoursAttempted_XsdtDecimal_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AcademicCreditHoursAttemptedsequenceEducationalMeasureTypeschema_AcademicCreditHoursAttempted_XsdtDecimal_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AcademicCreditHoursAttemptedsequenceEducationalMeasureTypeschema_AcademicCreditHoursAttempted_XsdtDecimal_ instance.
func (me *XsdGoPkgHasElem_AcademicCreditHoursAttemptedsequenceEducationalMeasureTypeschema_AcademicCreditHoursAttempted_XsdtDecimal_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AcademicCreditHoursAttemptedsequenceEducationalMeasureTypeschema_AcademicCreditHoursAttempted_XsdtDecimal_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Code indicating the type of credit used (awarded) by the institution.
type TAcademicCreditCodeType xsdt.String

//	Since TAcademicCreditCodeType is just a simple String type, this merely returns the current string value.
func (me TAcademicCreditCodeType) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TAcademicCreditCodeType is "A".
func (me TAcademicCreditCodeType) IsA() bool { return me.String() == "A" }

//	Returns true if the value of this enumerated TAcademicCreditCodeType is "N".
func (me TAcademicCreditCodeType) IsN() bool { return me.String() == "N" }

//	Returns true if the value of this enumerated TAcademicCreditCodeType is "Q".
func (me TAcademicCreditCodeType) IsQ() bool { return me.String() == "Q" }

//	Returns true if the value of this enumerated TAcademicCreditCodeType is "V".
func (me TAcademicCreditCodeType) IsV() bool { return me.String() == "V" }

//	Since TAcademicCreditCodeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TAcademicCreditCodeType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TAcademicCreditCodeType's alias type xsdt.String.
func (me TAcademicCreditCodeType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TAcademicCreditCodeType is "C".
func (me TAcademicCreditCodeType) IsC() bool { return me.String() == "C" }

//	Returns true if the value of this enumerated TAcademicCreditCodeType is "G".
func (me TAcademicCreditCodeType) IsG() bool { return me.String() == "G" }

//	Returns true if the value of this enumerated TAcademicCreditCodeType is "S".
func (me TAcademicCreditCodeType) IsS() bool { return me.String() == "S" }

//	Returns true if the value of this enumerated TAcademicCreditCodeType is "U".
func (me TAcademicCreditCodeType) IsU() bool { return me.String() == "U" }

//	Returns true if the value of this enumerated TAcademicCreditCodeType is "X".
func (me TAcademicCreditCodeType) IsX() bool { return me.String() == "X" }

type XsdGoPkgHasElem_AcademicCreditCodesequenceEducationalMeasureTypeschema_AcademicCreditCode_TAcademicCreditCodeType_ struct {
	//	Code indicating the type of credit used (awarded) by the institution.
	AcademicCreditCode TAcademicCreditCodeType `xml:"AcademicCreditCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AcademicCreditCodesequenceEducationalMeasureTypeschema_AcademicCreditCode_TAcademicCreditCodeType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AcademicCreditCodesequenceEducationalMeasureTypeschema_AcademicCreditCode_TAcademicCreditCodeType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AcademicCreditCodesequenceEducationalMeasureTypeschema_AcademicCreditCode_TAcademicCreditCodeType_ instance.
func (me *XsdGoPkgHasElem_AcademicCreditCodesequenceEducationalMeasureTypeschema_AcademicCreditCode_TAcademicCreditCodeType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AcademicCreditCodesequenceEducationalMeasureTypeschema_AcademicCreditCode_TAcademicCreditCodeType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	If True, this is a summary of all work included in the record.
type XsdGoPkgHasElem_CumulativeSummaryIndicatorsequenceEducationalMeasureTypeschema_CumulativeSummaryIndicator_XsdtBoolean_ struct {
	//	If True, this is a summary of all work included in the record.
	CumulativeSummaryIndicator xsdt.Boolean `xml:"CumulativeSummaryIndicator"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CumulativeSummaryIndicatorsequenceEducationalMeasureTypeschema_CumulativeSummaryIndicator_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CumulativeSummaryIndicatorsequenceEducationalMeasureTypeschema_CumulativeSummaryIndicator_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CumulativeSummaryIndicatorsequenceEducationalMeasureTypeschema_CumulativeSummaryIndicator_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElem_CumulativeSummaryIndicatorsequenceEducationalMeasureTypeschema_CumulativeSummaryIndicator_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CumulativeSummaryIndicatorsequenceEducationalMeasureTypeschema_CumulativeSummaryIndicator_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	This is the total number of credits (or credit hours) included in the grade point average for this particular summary. Inclusion or exclusion of certain credits depends on the policy of the sending institution.
type XsdGoPkgHasElem_AcademicCreditHoursIncludedsequenceEducationalMeasureTypeschema_AcademicCreditHoursIncluded_XsdtDecimal_ struct {
	//	This is the total number of credits (or credit hours) included in the grade point average for this particular summary. Inclusion or exclusion of certain credits depends on the policy of the sending institution.
	AcademicCreditHoursIncluded xsdt.Decimal `xml:"AcademicCreditHoursIncluded"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AcademicCreditHoursIncludedsequenceEducationalMeasureTypeschema_AcademicCreditHoursIncluded_XsdtDecimal_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AcademicCreditHoursIncludedsequenceEducationalMeasureTypeschema_AcademicCreditHoursIncluded_XsdtDecimal_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AcademicCreditHoursIncludedsequenceEducationalMeasureTypeschema_AcademicCreditHoursIncluded_XsdtDecimal_ instance.
func (me *XsdGoPkgHasElem_AcademicCreditHoursIncludedsequenceEducationalMeasureTypeschema_AcademicCreditHoursIncluded_XsdtDecimal_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AcademicCreditHoursIncludedsequenceEducationalMeasureTypeschema_AcademicCreditHoursIncluded_XsdtDecimal_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TEducationalMeasureType struct {
	//	Code indicating the type of credit used (awarded) by the institution.
	XsdGoPkgHasElem_AcademicCreditCodesequenceEducationalMeasureTypeschema_AcademicCreditCode_TAcademicCreditCodeType_

	//	If True, this is a summary of all work included in the record.
	XsdGoPkgHasElem_CumulativeSummaryIndicatorsequenceEducationalMeasureTypeschema_CumulativeSummaryIndicator_XsdtBoolean_

	//	This is the total number of credits (or credit hours) included in the grade point average for this particular summary. Inclusion or exclusion of certain credits depends on the policy of the sending institution.
	XsdGoPkgHasElem_AcademicCreditHoursIncludedsequenceEducationalMeasureTypeschema_AcademicCreditHoursIncluded_XsdtDecimal_

	//	This is the total number of credits (credit hours) included on the record for this particular summary. This would normally be all credits for which the student paid, whether or not the credits were used to calculate the grade point average. Examples of credit hours to be included, if available, are credits for which non-punitive grades such as "I" or "W" or "Audit" were awarded.
	XsdGoPkgHasElem_AcademicCreditHoursAttemptedsequenceEducationalMeasureTypeschema_AcademicCreditHoursAttempted_XsdtDecimal_

	//	Identifies the measurement system.  i.e. GPA
	XsdGoPkgHasElem_EducationalMeasuresequenceEducationalMeasureTypeschema_EducationalMeasure_TEducationMeasureType_

	//	Code indicating the level or type or both, of work which is reflected in the grade average and the credit hours
	XsdGoPkgHasElem_CourseLevelCodesequenceEducationalMeasureTypeschema_CourseLevelCode_TCourseLevelCodeType_

	//	This is the total number of credits (credit hours) attemptedand earned and included in this summary.
	XsdGoPkgHasElem_AcademicCreditHoursEarnedsequenceEducationalMeasureTypeschema_AcademicCreditHoursEarned_XsdtDecimal_

	//	This is a student's numerical class rank with the highest student in the class having a rank or position of 1
	XsdGoPkgHasElem_ClassRanksequenceEducationalMeasureTypeschema_ClassRank_TxsdEducationalMeasureTypeSequenceClassRank_

	XsdGoPkgHasAttr_MeasureType_XsdtString_
}

//	If the WalkHandlers.TEducationalMeasureType function is not nil (ie. was set by outside code), calls it with this TEducationalMeasureType instance as the single argument. Then calls the Walk() method on 8/9 embed(s) and 0/0 field(s) belonging to this TEducationalMeasureType instance.
func (me *TEducationalMeasureType) Walk() (err error) {
	if fn := WalkHandlers.TEducationalMeasureType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_EducationalMeasuresequenceEducationalMeasureTypeschema_EducationalMeasure_TEducationMeasureType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CourseLevelCodesequenceEducationalMeasureTypeschema_CourseLevelCode_TCourseLevelCodeType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AcademicCreditHoursEarnedsequenceEducationalMeasureTypeschema_AcademicCreditHoursEarned_XsdtDecimal_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ClassRanksequenceEducationalMeasureTypeschema_ClassRank_TxsdEducationalMeasureTypeSequenceClassRank_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AcademicCreditCodesequenceEducationalMeasureTypeschema_AcademicCreditCode_TAcademicCreditCodeType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CumulativeSummaryIndicatorsequenceEducationalMeasureTypeschema_CumulativeSummaryIndicator_XsdtBoolean_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AcademicCreditHoursIncludedsequenceEducationalMeasureTypeschema_AcademicCreditHoursIncluded_XsdtDecimal_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AcademicCreditHoursAttemptedsequenceEducationalMeasureTypeschema_AcademicCreditHoursAttempted_XsdtDecimal_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DegreeMeasuresequenceEduDegreeTypeschema_DegreeMeasure_TEducationalMeasureType_ struct {
	DegreeMeasure *TEducationalMeasureType `xml:"DegreeMeasure"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DegreeMeasuresequenceEduDegreeTypeschema_DegreeMeasure_TEducationalMeasureType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DegreeMeasuresequenceEduDegreeTypeschema_DegreeMeasure_TEducationalMeasureType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DegreeMeasuresequenceEduDegreeTypeschema_DegreeMeasure_TEducationalMeasureType_ instance.
func (me *XsdGoPkgHasElem_DegreeMeasuresequenceEduDegreeTypeschema_DegreeMeasure_TEducationalMeasureType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DegreeMeasuresequenceEduDegreeTypeschema_DegreeMeasure_TEducationalMeasureType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DegreeMeasure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_CurrentlyEnrolled_XsdtBoolean_ struct {
	CurrentlyEnrolled xsdt.Boolean `xml:"currentlyEnrolled,attr,omitempty"`
}

type XsdGoPkgHasAttr_StudentInGoodStanding_XsdtBoolean_ struct {
	StudentInGoodStanding xsdt.Boolean `xml:"studentInGoodStanding,attr,omitempty"`
}

type XsdGoPkgHasAttr_EnrollmentStatus_XsdtString_ struct {
	EnrollmentStatus xsdt.String `xml:"enrollmentStatus,attr,omitempty"`
}

type TDatesOfAttendanceType struct {
	XsdGoPkgHasElem_StartDatesequenceAssociationTypeschema_StartDate_TFlexibleDatesType_

	XsdGoPkgHasElem_EndDatesequenceAssociationTypeschema_EndDate_TFlexibleDatesType_

	XsdGoPkgHasAttr_CurrentlyEnrolled_XsdtBoolean_

	XsdGoPkgHasAttr_StudentInGoodStanding_XsdtBoolean_

	XsdGoPkgHasAttr_EnrollmentStatus_XsdtString_
}

//	If the WalkHandlers.TDatesOfAttendanceType function is not nil (ie. was set by outside code), calls it with this TDatesOfAttendanceType instance as the single argument. Then calls the Walk() method on 2/5 embed(s) and 0/0 field(s) belonging to this TDatesOfAttendanceType instance.
func (me *TDatesOfAttendanceType) Walk() (err error) {
	if fn := WalkHandlers.TDatesOfAttendanceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_StartDatesequenceAssociationTypeschema_StartDate_TFlexibleDatesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EndDatesequenceAssociationTypeschema_EndDate_TFlexibleDatesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DatesOfAttendancesequenceEduDegreeTypeschema_DatesOfAttendance_TDatesOfAttendanceType_ struct {
	DatesOfAttendances []*TDatesOfAttendanceType `xml:"DatesOfAttendance"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DatesOfAttendancesequenceEduDegreeTypeschema_DatesOfAttendance_TDatesOfAttendanceType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DatesOfAttendancesequenceEduDegreeTypeschema_DatesOfAttendance_TDatesOfAttendanceType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DatesOfAttendancesequenceEduDegreeTypeschema_DatesOfAttendance_TDatesOfAttendanceType_ instance.
func (me *XsdGoPkgHasElems_DatesOfAttendancesequenceEduDegreeTypeschema_DatesOfAttendance_TDatesOfAttendanceType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DatesOfAttendancesequenceEduDegreeTypeschema_DatesOfAttendance_TDatesOfAttendanceType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DatesOfAttendances {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGraduatingDegreeType xsdt.String

//	This convenience method just performs a simple type conversion to TGraduatingDegreeType's alias type xsdt.String.
func (me TGraduatingDegreeType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TGraduatingDegreeType is "graduating".
func (me TGraduatingDegreeType) IsGraduating() bool { return me.String() == "graduating" }

//	Returns true if the value of this enumerated TGraduatingDegreeType is "qualifying".
func (me TGraduatingDegreeType) IsQualifying() bool { return me.String() == "qualifying" }

//	Since TGraduatingDegreeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TGraduatingDegreeType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TGraduatingDegreeType is just a simple String type, this merely returns the current string value.
func (me TGraduatingDegreeType) String() string { return xsdt.String(me).String() }

type XsdGoPkgHasAttr_GraduatingDegree_TGraduatingDegreeType_ struct {
	GraduatingDegree TGraduatingDegreeType `xml:"graduatingDegree,attr,omitempty"`
}

type TEduDegreeType struct {
	//	The official names of any and all major courses of study associated with the student's degree title.
	XsdGoPkgHasElems_DegreeMajorsequenceEduDegreeTypeschema_DegreeMajor_TMajorType_

	XsdGoPkgHasElem_DegreeMeasuresequenceEduDegreeTypeschema_DegreeMeasure_TEducationalMeasureType_

	XsdGoPkgHasElems_DatesOfAttendancesequenceEduDegreeTypeschema_DatesOfAttendance_TDatesOfAttendanceType_

	XsdGoPkgHasElem_UserArea

	XsdGoPkgHasAttr_GraduatingDegree_TGraduatingDegreeType_

	//	The subject studied, as expressed on the diploma.
	XsdGoPkgHasElem_DegreeNamesequenceEduDegreeTypeschema_DegreeName_TxsdEduDegreeTypeSequenceDegreeName_

	//	The date the person received their degree.
	XsdGoPkgHasElem_DegreeDatesequenceEduDegreeTypeschema_DegreeDate_TFlexibleDatesType_

	//	The name of any other honors, such as Phi Beta Kappa, etc. that the student may have received.
	XsdGoPkgHasElems_OtherHonorssequenceEduDegreeTypeschema_OtherHonors_TxsdEduDegreeTypeSequenceOtherHonors_

	//	If applicable, these fields should be used to reflect the official names of any and all minor courses of study associated with the student's degree title.
	XsdGoPkgHasElems_DegreeMinorsequenceEduDegreeTypeschema_DegreeMinor_TMinorType_

	XsdGoPkgHasElem_CommentssequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Comments_XsdtString_

	XsdGoPkgHasAttr_DegreeType_TDegreeTypeStringExtensionType_

	XsdGoPkgHasAttr_ExamPassed_XsdtBoolean_
}

//	If the WalkHandlers.TEduDegreeType function is not nil (ie. was set by outside code), calls it with this TEduDegreeType instance as the single argument. Then calls the Walk() method on 9/12 embed(s) and 0/0 field(s) belonging to this TEduDegreeType instance.
func (me *TEduDegreeType) Walk() (err error) {
	if fn := WalkHandlers.TEduDegreeType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_DegreeMajorsequenceEduDegreeTypeschema_DegreeMajor_TMajorType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DegreeMeasuresequenceEduDegreeTypeschema_DegreeMeasure_TEducationalMeasureType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_DatesOfAttendancesequenceEduDegreeTypeschema_DatesOfAttendance_TDatesOfAttendanceType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_UserArea.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DegreeNamesequenceEduDegreeTypeschema_DegreeName_TxsdEduDegreeTypeSequenceDegreeName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DegreeDatesequenceEduDegreeTypeschema_DegreeDate_TFlexibleDatesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_OtherHonorssequenceEduDegreeTypeschema_OtherHonors_TxsdEduDegreeTypeSequenceOtherHonors_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_DegreeMinorsequenceEduDegreeTypeschema_DegreeMinor_TMinorType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CommentssequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Comments_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DegreesequenceSchoolOrInstitutionTypeschema_Degree_TEduDegreeType_ struct {
	Degrees []*TEduDegreeType `xml:"Degree"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DegreesequenceSchoolOrInstitutionTypeschema_Degree_TEduDegreeType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DegreesequenceSchoolOrInstitutionTypeschema_Degree_TEduDegreeType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DegreesequenceSchoolOrInstitutionTypeschema_Degree_TEduDegreeType_ instance.
func (me *XsdGoPkgHasElems_DegreesequenceSchoolOrInstitutionTypeschema_Degree_TEduDegreeType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DegreesequenceSchoolOrInstitutionTypeschema_Degree_TEduDegreeType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Degrees {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Deprecated in favor of Degree construct.
type XsdGoPkgHasElems_MajorsequenceSchoolOrInstitutionTypeschema_Major_XsdtString_ struct {
	//	Deprecated in favor of Degree construct.
	Majors []xsdt.String `xml:"Major"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MajorsequenceSchoolOrInstitutionTypeschema_Major_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MajorsequenceSchoolOrInstitutionTypeschema_Major_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MajorsequenceSchoolOrInstitutionTypeschema_Major_XsdtString_ instance.
func (me *XsdGoPkgHasElems_MajorsequenceSchoolOrInstitutionTypeschema_Major_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MajorsequenceSchoolOrInstitutionTypeschema_Major_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Deprecated in favor of Degree construct.
//	This type is the same as the DatesOfAttendanceType, except it is an unbounded sequence.  This remains for backward compatibility only.
type XsdGoPkgHasElems_EndDatesequenceDeprecatedDatesOfAttendanceTypeschema_EndDate_TFlexibleDatesType_ struct {
	EndDates []*TFlexibleDatesType `xml:"EndDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EndDatesequenceDeprecatedDatesOfAttendanceTypeschema_EndDate_TFlexibleDatesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EndDatesequenceDeprecatedDatesOfAttendanceTypeschema_EndDate_TFlexibleDatesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EndDatesequenceDeprecatedDatesOfAttendanceTypeschema_EndDate_TFlexibleDatesType_ instance.
func (me *XsdGoPkgHasElems_EndDatesequenceDeprecatedDatesOfAttendanceTypeschema_EndDate_TFlexibleDatesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EndDatesequenceDeprecatedDatesOfAttendanceTypeschema_EndDate_TFlexibleDatesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EndDates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_StartDatesequenceDeprecatedDatesOfAttendanceTypeschema_StartDate_TFlexibleDatesType_ struct {
	StartDates []*TFlexibleDatesType `xml:"StartDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_StartDatesequenceDeprecatedDatesOfAttendanceTypeschema_StartDate_TFlexibleDatesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_StartDatesequenceDeprecatedDatesOfAttendanceTypeschema_StartDate_TFlexibleDatesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_StartDatesequenceDeprecatedDatesOfAttendanceTypeschema_StartDate_TFlexibleDatesType_ instance.
func (me *XsdGoPkgHasElems_StartDatesequenceDeprecatedDatesOfAttendanceTypeschema_StartDate_TFlexibleDatesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_StartDatesequenceDeprecatedDatesOfAttendanceTypeschema_StartDate_TFlexibleDatesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.StartDates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TDeprecatedDatesOfAttendanceType struct {
	XsdGoPkgHasAttr_EnrollmentStatus_XsdtString_

	XsdGoPkgHasAttr_CurrentlyEnrolled_XsdtBoolean_

	XsdGoPkgHasAttr_StudentInGoodStanding_XsdtBoolean_

	XsdGoPkgHasElems_StartDatesequenceDeprecatedDatesOfAttendanceTypeschema_StartDate_TFlexibleDatesType_

	XsdGoPkgHasElems_EndDatesequenceDeprecatedDatesOfAttendanceTypeschema_EndDate_TFlexibleDatesType_
}

//	If the WalkHandlers.TDeprecatedDatesOfAttendanceType function is not nil (ie. was set by outside code), calls it with this TDeprecatedDatesOfAttendanceType instance as the single argument. Then calls the Walk() method on 2/5 embed(s) and 0/0 field(s) belonging to this TDeprecatedDatesOfAttendanceType instance.
func (me *TDeprecatedDatesOfAttendanceType) Walk() (err error) {
	if fn := WalkHandlers.TDeprecatedDatesOfAttendanceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_StartDatesequenceDeprecatedDatesOfAttendanceTypeschema_StartDate_TFlexibleDatesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_EndDatesequenceDeprecatedDatesOfAttendanceTypeschema_EndDate_TFlexibleDatesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DatesOfAttendancesequenceSchoolOrInstitutionTypeschema_DatesOfAttendance_TDeprecatedDatesOfAttendanceType_ struct {
	//	Deprecated in favor of Degree construct.
	DatesOfAttendance *TDeprecatedDatesOfAttendanceType `xml:"DatesOfAttendance"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DatesOfAttendancesequenceSchoolOrInstitutionTypeschema_DatesOfAttendance_TDeprecatedDatesOfAttendanceType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DatesOfAttendancesequenceSchoolOrInstitutionTypeschema_DatesOfAttendance_TDeprecatedDatesOfAttendanceType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DatesOfAttendancesequenceSchoolOrInstitutionTypeschema_DatesOfAttendance_TDeprecatedDatesOfAttendanceType_ instance.
func (me *XsdGoPkgHasElem_DatesOfAttendancesequenceSchoolOrInstitutionTypeschema_DatesOfAttendance_TDeprecatedDatesOfAttendanceType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DatesOfAttendancesequenceSchoolOrInstitutionTypeschema_DatesOfAttendance_TDeprecatedDatesOfAttendanceType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DatesOfAttendance.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CountryCodesequencePostalAddressTypeschema_CountryCode_TxsdPostalAddressTypeSequenceCountryCode_ struct {
	CountryCode TCurrencyCodeType `xml:"CountryCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CountryCodesequencePostalAddressTypeschema_CountryCode_TxsdPostalAddressTypeSequenceCountryCode_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CountryCodesequencePostalAddressTypeschema_CountryCode_TxsdPostalAddressTypeSequenceCountryCode_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CountryCodesequencePostalAddressTypeschema_CountryCode_TxsdPostalAddressTypeSequenceCountryCode_ instance.
func (me *XsdGoPkgHasElem_CountryCodesequencePostalAddressTypeschema_CountryCode_TxsdPostalAddressTypeSequenceCountryCode_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CountryCodesequencePostalAddressTypeschema_CountryCode_TxsdPostalAddressTypeSequenceCountryCode_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PostalCodesequencePostalAddressTypeschema_PostalCode_XsdtString_ struct {
	PostalCode xsdt.String `xml:"PostalCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PostalCodesequencePostalAddressTypeschema_PostalCode_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PostalCodesequencePostalAddressTypeschema_PostalCode_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PostalCodesequencePostalAddressTypeschema_PostalCode_XsdtString_ instance.
func (me *XsdGoPkgHasElem_PostalCodesequencePostalAddressTypeschema_PostalCode_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PostalCodesequencePostalAddressTypeschema_PostalCode_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RegionsequencePostalAddressTypeschema_Region_XsdtString_ struct {
	Regions []xsdt.String `xml:"Region"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RegionsequencePostalAddressTypeschema_Region_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RegionsequencePostalAddressTypeschema_Region_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RegionsequencePostalAddressTypeschema_Region_XsdtString_ instance.
func (me *XsdGoPkgHasElems_RegionsequencePostalAddressTypeschema_Region_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RegionsequencePostalAddressTypeschema_Region_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MunicipalitysequencePostalAddressTypeschema_Municipality_XsdtString_ struct {
	Municipality xsdt.String `xml:"Municipality"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MunicipalitysequencePostalAddressTypeschema_Municipality_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MunicipalitysequencePostalAddressTypeschema_Municipality_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_MunicipalitysequencePostalAddressTypeschema_Municipality_XsdtString_ instance.
func (me *XsdGoPkgHasElem_MunicipalitysequencePostalAddressTypeschema_Municipality_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MunicipalitysequencePostalAddressTypeschema_Municipality_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_UnitsequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_Unit_XsdtString_ struct {
	Unit xsdt.String `xml:"Unit"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_UnitsequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_Unit_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_UnitsequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_Unit_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_UnitsequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_Unit_XsdtString_ instance.
func (me *XsdGoPkgHasElem_UnitsequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_Unit_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_UnitsequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_Unit_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PostOfficeBoxsequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_PostOfficeBox_XsdtString_ struct {
	PostOfficeBox xsdt.String `xml:"PostOfficeBox"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PostOfficeBoxsequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_PostOfficeBox_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PostOfficeBoxsequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_PostOfficeBox_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PostOfficeBoxsequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_PostOfficeBox_XsdtString_ instance.
func (me *XsdGoPkgHasElem_PostOfficeBoxsequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_PostOfficeBox_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PostOfficeBoxsequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_PostOfficeBox_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AddressLinesequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_AddressLine_XsdtString_ struct {
	AddressLines []xsdt.String `xml:"AddressLine"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AddressLinesequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_AddressLine_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AddressLinesequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_AddressLine_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AddressLinesequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_AddressLine_XsdtString_ instance.
func (me *XsdGoPkgHasElems_AddressLinesequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_AddressLine_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AddressLinesequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_AddressLine_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_StreetNamesequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_StreetName_XsdtString_ struct {
	StreetName xsdt.String `xml:"StreetName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_StreetNamesequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_StreetName_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_StreetNamesequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_StreetName_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_StreetNamesequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_StreetName_XsdtString_ instance.
func (me *XsdGoPkgHasElem_StreetNamesequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_StreetName_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_StreetNamesequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_StreetName_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_BuildingNumbersequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_BuildingNumber_XsdtString_ struct {
	BuildingNumber xsdt.String `xml:"BuildingNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_BuildingNumbersequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_BuildingNumber_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BuildingNumbersequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_BuildingNumber_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_BuildingNumbersequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_BuildingNumber_XsdtString_ instance.
func (me *XsdGoPkgHasElem_BuildingNumbersequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_BuildingNumber_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_BuildingNumbersequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_BuildingNumber_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPostalAddressTypeSequenceDeliveryAddress struct {
	XsdGoPkgHasElem_UnitsequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_Unit_XsdtString_

	XsdGoPkgHasElem_PostOfficeBoxsequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_PostOfficeBox_XsdtString_

	XsdGoPkgHasElems_AddressLinesequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_AddressLine_XsdtString_

	XsdGoPkgHasElem_StreetNamesequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_StreetName_XsdtString_

	XsdGoPkgHasElem_BuildingNumbersequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_BuildingNumber_XsdtString_
}

//	If the WalkHandlers.TxsdPostalAddressTypeSequenceDeliveryAddress function is not nil (ie. was set by outside code), calls it with this TxsdPostalAddressTypeSequenceDeliveryAddress instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TxsdPostalAddressTypeSequenceDeliveryAddress instance.
func (me *TxsdPostalAddressTypeSequenceDeliveryAddress) Walk() (err error) {
	if fn := WalkHandlers.TxsdPostalAddressTypeSequenceDeliveryAddress; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_AddressLinesequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_AddressLine_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_StreetNamesequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_StreetName_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_BuildingNumbersequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_BuildingNumber_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_UnitsequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_Unit_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PostOfficeBoxsequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_PostOfficeBox_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DeliveryAddresssequencePostalAddressTypeschema_DeliveryAddress_TxsdPostalAddressTypeSequenceDeliveryAddress_ struct {
	DeliveryAddress *TxsdPostalAddressTypeSequenceDeliveryAddress `xml:"DeliveryAddress"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DeliveryAddresssequencePostalAddressTypeschema_DeliveryAddress_TxsdPostalAddressTypeSequenceDeliveryAddress_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DeliveryAddresssequencePostalAddressTypeschema_DeliveryAddress_TxsdPostalAddressTypeSequenceDeliveryAddress_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DeliveryAddresssequencePostalAddressTypeschema_DeliveryAddress_TxsdPostalAddressTypeSequenceDeliveryAddress_ instance.
func (me *XsdGoPkgHasElem_DeliveryAddresssequencePostalAddressTypeschema_DeliveryAddress_TxsdPostalAddressTypeSequenceDeliveryAddress_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DeliveryAddresssequencePostalAddressTypeschema_DeliveryAddress_TxsdPostalAddressTypeSequenceDeliveryAddress_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DeliveryAddress.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_LegalNamesequencePersonNameTypeschema_LegalName_XsdtString_ struct {
	LegalName xsdt.String `xml:"LegalName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LegalNamesequencePersonNameTypeschema_LegalName_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LegalNamesequencePersonNameTypeschema_LegalName_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_LegalNamesequencePersonNameTypeschema_LegalName_XsdtString_ instance.
func (me *XsdGoPkgHasElem_LegalNamesequencePersonNameTypeschema_LegalName_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LegalNamesequencePersonNameTypeschema_LegalName_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MiddleNamesequencePersonNameTypeschema_MiddleName_XsdtString_ struct {
	MiddleName xsdt.String `xml:"MiddleName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MiddleNamesequencePersonNameTypeschema_MiddleName_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MiddleNamesequencePersonNameTypeschema_MiddleName_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_MiddleNamesequencePersonNameTypeschema_MiddleName_XsdtString_ instance.
func (me *XsdGoPkgHasElem_MiddleNamesequencePersonNameTypeschema_MiddleName_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MiddleNamesequencePersonNameTypeschema_MiddleName_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Script_XsdtString_ struct {
	Script xsdt.String `xml:"script,attr,omitempty"`
}

type XsdGoPkgHasElem_FormattedNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_FormattedName_XsdtString_ struct {
	FormattedName xsdt.String `xml:"FormattedName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FormattedNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_FormattedName_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FormattedNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_FormattedName_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_FormattedNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_FormattedName_XsdtString_ instance.
func (me *XsdGoPkgHasElem_FormattedNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_FormattedName_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FormattedNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_FormattedName_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GivenNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_GivenName_XsdtString_ struct {
	GivenNames []xsdt.String `xml:"GivenName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GivenNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_GivenName_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GivenNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_GivenName_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GivenNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_GivenName_XsdtString_ instance.
func (me *XsdGoPkgHasElems_GivenNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_GivenName_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GivenNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_GivenName_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PreferredGivenNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_PreferredGivenName_XsdtString_ struct {
	PreferredGivenName xsdt.String `xml:"PreferredGivenName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PreferredGivenNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_PreferredGivenName_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PreferredGivenNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_PreferredGivenName_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PreferredGivenNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_PreferredGivenName_XsdtString_ instance.
func (me *XsdGoPkgHasElem_PreferredGivenNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_PreferredGivenName_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PreferredGivenNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_PreferredGivenName_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyNameSimpleContentExtensionPrimary xsdt.String

//	Returns true if the value of this enumerated TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyNameSimpleContentExtensionPrimary is "true".
func (me TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyNameSimpleContentExtensionPrimary) IsTrue() bool {
	return me.String() == "true"
}

//	Returns true if the value of this enumerated TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyNameSimpleContentExtensionPrimary is "false".
func (me TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyNameSimpleContentExtensionPrimary) IsFalse() bool {
	return me.String() == "false"
}

//	Returns true if the value of this enumerated TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyNameSimpleContentExtensionPrimary is "undefined".
func (me TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyNameSimpleContentExtensionPrimary) IsUndefined() bool {
	return me.String() == "undefined"
}

//	Since TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyNameSimpleContentExtensionPrimary is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyNameSimpleContentExtensionPrimary) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

//	Since TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyNameSimpleContentExtensionPrimary is just a simple String type, this merely returns the current string value.
func (me TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyNameSimpleContentExtensionPrimary) String() string {
	return xsdt.String(me).String()
}

//	This convenience method just performs a simple type conversion to TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyNameSimpleContentExtensionPrimary's alias type xsdt.String.
func (me TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyNameSimpleContentExtensionPrimary) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

type XsdGoPkgHasAttr_Primary_TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyNameSimpleContentExtensionPrimary_ struct {
	Primary TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyNameSimpleContentExtensionPrimary `xml:"primary,attr,omitempty"`
}

type XsdGoPkgHasAttr_Prefix_XsdtString_ struct {
	Prefix xsdt.String `xml:"prefix,attr,omitempty"`
}

type TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyName struct {
	XsdtString

	XsdGoPkgHasAttr_Primary_TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyNameSimpleContentExtensionPrimary_

	XsdGoPkgHasAttr_Prefix_XsdtString_
}

//	If the WalkHandlers.TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyName function is not nil (ie. was set by outside code), calls it with this TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyName instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyName instance.
func (me *TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyName) Walk() (err error) {
	if fn := WalkHandlers.TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FamilyNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_FamilyName_TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyName_ struct {
	FamilyNames []*TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyName `xml:"FamilyName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FamilyNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_FamilyName_TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FamilyNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_FamilyName_TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FamilyNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_FamilyName_TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyName_ instance.
func (me *XsdGoPkgHasElems_FamilyNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_FamilyName_TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FamilyNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_FamilyName_TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FamilyNames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPersonNameTypeSequenceAlternateScriptSequenceAffixSimpleContentExtensionType xsdt.String

//	Returns true if the value of this enumerated TxsdPersonNameTypeSequenceAlternateScriptSequenceAffixSimpleContentExtensionType is "aristocraticTitle".
func (me TxsdPersonNameTypeSequenceAlternateScriptSequenceAffixSimpleContentExtensionType) IsAristocraticTitle() bool {
	return me.String() == "aristocraticTitle"
}

//	Returns true if the value of this enumerated TxsdPersonNameTypeSequenceAlternateScriptSequenceAffixSimpleContentExtensionType is "formOfAddress".
func (me TxsdPersonNameTypeSequenceAlternateScriptSequenceAffixSimpleContentExtensionType) IsFormOfAddress() bool {
	return me.String() == "formOfAddress"
}

//	Returns true if the value of this enumerated TxsdPersonNameTypeSequenceAlternateScriptSequenceAffixSimpleContentExtensionType is "generation".
func (me TxsdPersonNameTypeSequenceAlternateScriptSequenceAffixSimpleContentExtensionType) IsGeneration() bool {
	return me.String() == "generation"
}

//	Returns true if the value of this enumerated TxsdPersonNameTypeSequenceAlternateScriptSequenceAffixSimpleContentExtensionType is "qualification".
func (me TxsdPersonNameTypeSequenceAlternateScriptSequenceAffixSimpleContentExtensionType) IsQualification() bool {
	return me.String() == "qualification"
}

//	Since TxsdPersonNameTypeSequenceAlternateScriptSequenceAffixSimpleContentExtensionType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPersonNameTypeSequenceAlternateScriptSequenceAffixSimpleContentExtensionType) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

//	Since TxsdPersonNameTypeSequenceAlternateScriptSequenceAffixSimpleContentExtensionType is just a simple String type, this merely returns the current string value.
func (me TxsdPersonNameTypeSequenceAlternateScriptSequenceAffixSimpleContentExtensionType) String() string {
	return xsdt.String(me).String()
}

//	This convenience method just performs a simple type conversion to TxsdPersonNameTypeSequenceAlternateScriptSequenceAffixSimpleContentExtensionType's alias type xsdt.String.
func (me TxsdPersonNameTypeSequenceAlternateScriptSequenceAffixSimpleContentExtensionType) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

type XsdGoPkgHasAttr_Type_TxsdPersonNameTypeSequenceAlternateScriptSequenceAffixSimpleContentExtensionType_ struct {
	Type TxsdPersonNameTypeSequenceAlternateScriptSequenceAffixSimpleContentExtensionType `xml:"type,attr,omitempty"`
}

type TxsdPersonNameTypeSequenceAlternateScriptSequenceAffix struct {
	XsdtString

	XsdGoPkgHasAttr_Type_TxsdPersonNameTypeSequenceAlternateScriptSequenceAffixSimpleContentExtensionType_
}

//	If the WalkHandlers.TxsdPersonNameTypeSequenceAlternateScriptSequenceAffix function is not nil (ie. was set by outside code), calls it with this TxsdPersonNameTypeSequenceAlternateScriptSequenceAffix instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdPersonNameTypeSequenceAlternateScriptSequenceAffix instance.
func (me *TxsdPersonNameTypeSequenceAlternateScriptSequenceAffix) Walk() (err error) {
	if fn := WalkHandlers.TxsdPersonNameTypeSequenceAlternateScriptSequenceAffix; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AffixsequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_Affix_TxsdPersonNameTypeSequenceAlternateScriptSequenceAffix_ struct {
	Affixs []*TxsdPersonNameTypeSequenceAlternateScriptSequenceAffix `xml:"Affix"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AffixsequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_Affix_TxsdPersonNameTypeSequenceAlternateScriptSequenceAffix_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AffixsequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_Affix_TxsdPersonNameTypeSequenceAlternateScriptSequenceAffix_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AffixsequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_Affix_TxsdPersonNameTypeSequenceAlternateScriptSequenceAffix_ instance.
func (me *XsdGoPkgHasElems_AffixsequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_Affix_TxsdPersonNameTypeSequenceAlternateScriptSequenceAffix_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AffixsequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_Affix_TxsdPersonNameTypeSequenceAlternateScriptSequenceAffix_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Affixs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPersonNameTypeSequenceAlternateScript struct {
	XsdGoPkgHasElems_GivenNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_GivenName_XsdtString_

	XsdGoPkgHasElem_PreferredGivenNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_PreferredGivenName_XsdtString_

	XsdGoPkgHasElem_MiddleNamesequencePersonNameTypeschema_MiddleName_XsdtString_

	XsdGoPkgHasElems_FamilyNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_FamilyName_TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyName_

	XsdGoPkgHasElems_AffixsequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_Affix_TxsdPersonNameTypeSequenceAlternateScriptSequenceAffix_

	XsdGoPkgHasAttr_Script_XsdtString_

	XsdGoPkgHasElem_FormattedNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_FormattedName_XsdtString_

	XsdGoPkgHasElem_LegalNamesequencePersonNameTypeschema_LegalName_XsdtString_
}

//	If the WalkHandlers.TxsdPersonNameTypeSequenceAlternateScript function is not nil (ie. was set by outside code), calls it with this TxsdPersonNameTypeSequenceAlternateScript instance as the single argument. Then calls the Walk() method on 7/8 embed(s) and 0/0 field(s) belonging to this TxsdPersonNameTypeSequenceAlternateScript instance.
func (me *TxsdPersonNameTypeSequenceAlternateScript) Walk() (err error) {
	if fn := WalkHandlers.TxsdPersonNameTypeSequenceAlternateScript; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_GivenNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_GivenName_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PreferredGivenNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_PreferredGivenName_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MiddleNamesequencePersonNameTypeschema_MiddleName_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_FamilyNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_FamilyName_TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AffixsequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_Affix_TxsdPersonNameTypeSequenceAlternateScriptSequenceAffix_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FormattedNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_FormattedName_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LegalNamesequencePersonNameTypeschema_LegalName_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AlternateScriptsequencePersonNameTypeschema_AlternateScript_TxsdPersonNameTypeSequenceAlternateScript_ struct {
	AlternateScripts []*TxsdPersonNameTypeSequenceAlternateScript `xml:"AlternateScript"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AlternateScriptsequencePersonNameTypeschema_AlternateScript_TxsdPersonNameTypeSequenceAlternateScript_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AlternateScriptsequencePersonNameTypeschema_AlternateScript_TxsdPersonNameTypeSequenceAlternateScript_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AlternateScriptsequencePersonNameTypeschema_AlternateScript_TxsdPersonNameTypeSequenceAlternateScript_ instance.
func (me *XsdGoPkgHasElems_AlternateScriptsequencePersonNameTypeschema_AlternateScript_TxsdPersonNameTypeSequenceAlternateScript_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AlternateScriptsequencePersonNameTypeschema_AlternateScript_TxsdPersonNameTypeSequenceAlternateScript_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AlternateScripts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Primary_TxsdPersonNameTypeSequenceFamilyNameSimpleContentExtensionPrimary_ struct {
	Primary TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyNameSimpleContentExtensionPrimary `xml:"primary,attr,omitempty"`
}

type TxsdPersonNameTypeSequenceFamilyName struct {
	XsdGoPkgHasAttr_Prefix_XsdtString_

	XsdtString

	XsdGoPkgHasAttr_Primary_TxsdPersonNameTypeSequenceFamilyNameSimpleContentExtensionPrimary_
}

//	If the WalkHandlers.TxsdPersonNameTypeSequenceFamilyName function is not nil (ie. was set by outside code), calls it with this TxsdPersonNameTypeSequenceFamilyName instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdPersonNameTypeSequenceFamilyName instance.
func (me *TxsdPersonNameTypeSequenceFamilyName) Walk() (err error) {
	if fn := WalkHandlers.TxsdPersonNameTypeSequenceFamilyName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FamilyNamesequencePersonNameTypeschema_FamilyName_TxsdPersonNameTypeSequenceFamilyName_ struct {
	FamilyNames []*TxsdPersonNameTypeSequenceFamilyName `xml:"FamilyName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FamilyNamesequencePersonNameTypeschema_FamilyName_TxsdPersonNameTypeSequenceFamilyName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FamilyNamesequencePersonNameTypeschema_FamilyName_TxsdPersonNameTypeSequenceFamilyName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FamilyNamesequencePersonNameTypeschema_FamilyName_TxsdPersonNameTypeSequenceFamilyName_ instance.
func (me *XsdGoPkgHasElems_FamilyNamesequencePersonNameTypeschema_FamilyName_TxsdPersonNameTypeSequenceFamilyName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FamilyNamesequencePersonNameTypeschema_FamilyName_TxsdPersonNameTypeSequenceFamilyName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FamilyNames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Type_TxsdPersonNameTypeSequenceAffixSimpleContentExtensionType_ struct {
	Type TxsdPersonNameTypeSequenceAlternateScriptSequenceAffixSimpleContentExtensionType `xml:"type,attr,omitempty"`
}

type TxsdPersonNameTypeSequenceAffix struct {
	XsdtString

	XsdGoPkgHasAttr_Type_TxsdPersonNameTypeSequenceAffixSimpleContentExtensionType_
}

//	If the WalkHandlers.TxsdPersonNameTypeSequenceAffix function is not nil (ie. was set by outside code), calls it with this TxsdPersonNameTypeSequenceAffix instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdPersonNameTypeSequenceAffix instance.
func (me *TxsdPersonNameTypeSequenceAffix) Walk() (err error) {
	if fn := WalkHandlers.TxsdPersonNameTypeSequenceAffix; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AffixsequencePersonNameTypeschema_Affix_TxsdPersonNameTypeSequenceAffix_ struct {
	Affixs []*TxsdPersonNameTypeSequenceAffix `xml:"Affix"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AffixsequencePersonNameTypeschema_Affix_TxsdPersonNameTypeSequenceAffix_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AffixsequencePersonNameTypeschema_Affix_TxsdPersonNameTypeSequenceAffix_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AffixsequencePersonNameTypeschema_Affix_TxsdPersonNameTypeSequenceAffix_ instance.
func (me *XsdGoPkgHasElems_AffixsequencePersonNameTypeschema_Affix_TxsdPersonNameTypeSequenceAffix_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AffixsequencePersonNameTypeschema_Affix_TxsdPersonNameTypeSequenceAffix_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Affixs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPersonNameType struct {
	XsdGoPkgHasElem_LegalNamesequencePersonNameTypeschema_LegalName_XsdtString_

	XsdGoPkgHasElem_MiddleNamesequencePersonNameTypeschema_MiddleName_XsdtString_

	XsdGoPkgHasElems_AlternateScriptsequencePersonNameTypeschema_AlternateScript_TxsdPersonNameTypeSequenceAlternateScript_

	XsdGoPkgHasAttr_Script_XsdtString_

	XsdGoPkgHasElems_AffixsequencePersonNameTypeschema_Affix_TxsdPersonNameTypeSequenceAffix_

	XsdGoPkgHasElem_FormattedNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_FormattedName_XsdtString_

	XsdGoPkgHasElems_GivenNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_GivenName_XsdtString_

	XsdGoPkgHasElem_PreferredGivenNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_PreferredGivenName_XsdtString_

	XsdGoPkgHasElems_FamilyNamesequencePersonNameTypeschema_FamilyName_TxsdPersonNameTypeSequenceFamilyName_
}

//	If the WalkHandlers.TPersonNameType function is not nil (ie. was set by outside code), calls it with this TPersonNameType instance as the single argument. Then calls the Walk() method on 8/9 embed(s) and 0/0 field(s) belonging to this TPersonNameType instance.
func (me *TPersonNameType) Walk() (err error) {
	if fn := WalkHandlers.TPersonNameType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_LegalNamesequencePersonNameTypeschema_LegalName_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MiddleNamesequencePersonNameTypeschema_MiddleName_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AlternateScriptsequencePersonNameTypeschema_AlternateScript_TxsdPersonNameTypeSequenceAlternateScript_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FormattedNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_FormattedName_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_GivenNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_GivenName_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PreferredGivenNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_PreferredGivenName_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_FamilyNamesequencePersonNameTypeschema_FamilyName_TxsdPersonNameTypeSequenceFamilyName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AffixsequencePersonNameTypeschema_Affix_TxsdPersonNameTypeSequenceAffix_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PersonNamesequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_PersonName_TPersonNameType_ struct {
	PersonName *TPersonNameType `xml:"PersonName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PersonNamesequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_PersonName_TPersonNameType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PersonNamesequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_PersonName_TPersonNameType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PersonNamesequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_PersonName_TPersonNameType_ instance.
func (me *XsdGoPkgHasElem_PersonNamesequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_PersonName_TPersonNameType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PersonNamesequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_PersonName_TPersonNameType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PersonName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AdditionalTextsequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_AdditionalText_XsdtString_ struct {
	AdditionalTexts []xsdt.String `xml:"AdditionalText"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AdditionalTextsequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_AdditionalText_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AdditionalTextsequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_AdditionalText_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AdditionalTextsequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_AdditionalText_XsdtString_ instance.
func (me *XsdGoPkgHasElems_AdditionalTextsequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_AdditionalText_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AdditionalTextsequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_AdditionalText_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Deprecated in favor of OrganizationName element.
type XsdGoPkgHasElem_OrganizationsequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_Organization_XsdtString_ struct {
	//	Deprecated in favor of OrganizationName element.
	Organization xsdt.String `xml:"Organization"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OrganizationsequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_Organization_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OrganizationsequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_Organization_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_OrganizationsequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_Organization_XsdtString_ instance.
func (me *XsdGoPkgHasElem_OrganizationsequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_Organization_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OrganizationsequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_Organization_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_OrganizationNamesequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_OrganizationName_XsdtString_ struct {
	OrganizationName xsdt.String `xml:"OrganizationName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OrganizationNamesequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_OrganizationName_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OrganizationNamesequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_OrganizationName_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_OrganizationNamesequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_OrganizationName_XsdtString_ instance.
func (me *XsdGoPkgHasElem_OrganizationNamesequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_OrganizationName_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OrganizationNamesequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_OrganizationName_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPostalAddressTypeSequenceRecipient struct {
	XsdGoPkgHasElem_PersonNamesequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_PersonName_TPersonNameType_

	XsdGoPkgHasElems_AdditionalTextsequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_AdditionalText_XsdtString_

	//	Deprecated in favor of OrganizationName element.
	XsdGoPkgHasElem_OrganizationsequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_Organization_XsdtString_

	XsdGoPkgHasElem_OrganizationNamesequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_OrganizationName_XsdtString_
}

//	If the WalkHandlers.TxsdPostalAddressTypeSequenceRecipient function is not nil (ie. was set by outside code), calls it with this TxsdPostalAddressTypeSequenceRecipient instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdPostalAddressTypeSequenceRecipient instance.
func (me *TxsdPostalAddressTypeSequenceRecipient) Walk() (err error) {
	if fn := WalkHandlers.TxsdPostalAddressTypeSequenceRecipient; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_PersonNamesequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_PersonName_TPersonNameType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AdditionalTextsequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_AdditionalText_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_OrganizationsequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_Organization_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_OrganizationNamesequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_OrganizationName_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RecipientsequencePostalAddressTypeschema_Recipient_TxsdPostalAddressTypeSequenceRecipient_ struct {
	Recipients []*TxsdPostalAddressTypeSequenceRecipient `xml:"Recipient"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RecipientsequencePostalAddressTypeschema_Recipient_TxsdPostalAddressTypeSequenceRecipient_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RecipientsequencePostalAddressTypeschema_Recipient_TxsdPostalAddressTypeSequenceRecipient_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RecipientsequencePostalAddressTypeschema_Recipient_TxsdPostalAddressTypeSequenceRecipient_ instance.
func (me *XsdGoPkgHasElems_RecipientsequencePostalAddressTypeschema_Recipient_TxsdPostalAddressTypeSequenceRecipient_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RecipientsequencePostalAddressTypeschema_Recipient_TxsdPostalAddressTypeSequenceRecipient_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Recipients {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPostalAddressTypeType xsdt.String

//	Since TxsdPostalAddressTypeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPostalAddressTypeType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TxsdPostalAddressTypeType is just a simple String type, this merely returns the current string value.
func (me TxsdPostalAddressTypeType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TxsdPostalAddressTypeType's alias type xsdt.String.
func (me TxsdPostalAddressTypeType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdPostalAddressTypeType is "postOfficeBoxAddress".
func (me TxsdPostalAddressTypeType) IsPostOfficeBoxAddress() bool {
	return me.String() == "postOfficeBoxAddress"
}

//	Returns true if the value of this enumerated TxsdPostalAddressTypeType is "streetAddress".
func (me TxsdPostalAddressTypeType) IsStreetAddress() bool { return me.String() == "streetAddress" }

//	Returns true if the value of this enumerated TxsdPostalAddressTypeType is "militaryAddress".
func (me TxsdPostalAddressTypeType) IsMilitaryAddress() bool { return me.String() == "militaryAddress" }

//	Returns true if the value of this enumerated TxsdPostalAddressTypeType is "undefined".
func (me TxsdPostalAddressTypeType) IsUndefined() bool { return me.String() == "undefined" }

type XsdGoPkgHasAttr_Type_TxsdPostalAddressTypeType_ struct {
	Type TxsdPostalAddressTypeType `xml:"type,attr,omitempty"`
}

type TPostalAddressType struct {
	XsdGoPkgHasElem_PostalCodesequencePostalAddressTypeschema_PostalCode_XsdtString_

	XsdGoPkgHasElems_RegionsequencePostalAddressTypeschema_Region_XsdtString_

	XsdGoPkgHasElem_MunicipalitysequencePostalAddressTypeschema_Municipality_XsdtString_

	XsdGoPkgHasElem_DeliveryAddresssequencePostalAddressTypeschema_DeliveryAddress_TxsdPostalAddressTypeSequenceDeliveryAddress_

	XsdGoPkgHasElems_RecipientsequencePostalAddressTypeschema_Recipient_TxsdPostalAddressTypeSequenceRecipient_

	XsdGoPkgHasAttr_Type_TxsdPostalAddressTypeType_

	XsdGoPkgHasElem_CountryCodesequencePostalAddressTypeschema_CountryCode_TxsdPostalAddressTypeSequenceCountryCode_
}

//	If the WalkHandlers.TPostalAddressType function is not nil (ie. was set by outside code), calls it with this TPostalAddressType instance as the single argument. Then calls the Walk() method on 6/7 embed(s) and 0/0 field(s) belonging to this TPostalAddressType instance.
func (me *TPostalAddressType) Walk() (err error) {
	if fn := WalkHandlers.TPostalAddressType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_RecipientsequencePostalAddressTypeschema_Recipient_TxsdPostalAddressTypeSequenceRecipient_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CountryCodesequencePostalAddressTypeschema_CountryCode_TxsdPostalAddressTypeSequenceCountryCode_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PostalCodesequencePostalAddressTypeschema_PostalCode_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RegionsequencePostalAddressTypeschema_Region_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MunicipalitysequencePostalAddressTypeschema_Municipality_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DeliveryAddresssequencePostalAddressTypeschema_DeliveryAddress_TxsdPostalAddressTypeSequenceDeliveryAddress_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PostalAddress struct {
	PostalAddress *TPostalAddressType `xml:"PostalAddress"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PostalAddress function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PostalAddress instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PostalAddress instance.
func (me *XsdGoPkgHasElem_PostalAddress) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PostalAddress; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PostalAddress.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Deprecated in favor of Degree construct.
type XsdGoPkgHasElems_MinorsequenceSchoolOrInstitutionTypeschema_Minor_XsdtString_ struct {
	//	Deprecated in favor of Degree construct.
	Minors []xsdt.String `xml:"Minor"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MinorsequenceSchoolOrInstitutionTypeschema_Minor_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MinorsequenceSchoolOrInstitutionTypeschema_Minor_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MinorsequenceSchoolOrInstitutionTypeschema_Minor_XsdtString_ instance.
func (me *XsdGoPkgHasElems_MinorsequenceSchoolOrInstitutionTypeschema_Minor_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MinorsequenceSchoolOrInstitutionTypeschema_Minor_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Deprecated in favor of Degree construct.
type XsdGoPkgHasElem_MeasureValuesequenceEduMeasureTypeschema_MeasureValue_XsdtString_ struct {
	MeasureValue xsdt.String `xml:"MeasureValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MeasureValuesequenceEduMeasureTypeschema_MeasureValue_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MeasureValuesequenceEduMeasureTypeschema_MeasureValue_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_MeasureValuesequenceEduMeasureTypeschema_MeasureValue_XsdtString_ instance.
func (me *XsdGoPkgHasElem_MeasureValuesequenceEduMeasureTypeschema_MeasureValue_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MeasureValuesequenceEduMeasureTypeschema_MeasureValue_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TEduMeasureType struct {
	XsdGoPkgHasElem_MeasureSystemsequenceEducationMeasureTypeschema_MeasureSystem_XsdtString_

	XsdGoPkgHasElem_MeasureValuesequenceEduMeasureTypeschema_MeasureValue_XsdtString_

	XsdGoPkgHasAttr_MeasureType_XsdtString_
}

//	If the WalkHandlers.TEduMeasureType function is not nil (ie. was set by outside code), calls it with this TEduMeasureType instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TEduMeasureType instance.
func (me *TEduMeasureType) Walk() (err error) {
	if fn := WalkHandlers.TEduMeasureType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_MeasureValuesequenceEduMeasureTypeschema_MeasureValue_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MeasureSystemsequenceEducationMeasureTypeschema_MeasureSystem_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MeasuresequenceSchoolOrInstitutionTypeschema_Measure_TEduMeasureType_ struct {
	//	Deprecated in favor of Degree construct.
	Measure *TEduMeasureType `xml:"Measure"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MeasuresequenceSchoolOrInstitutionTypeschema_Measure_TEduMeasureType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MeasuresequenceSchoolOrInstitutionTypeschema_Measure_TEduMeasureType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MeasuresequenceSchoolOrInstitutionTypeschema_Measure_TEduMeasureType_ instance.
func (me *XsdGoPkgHasElem_MeasuresequenceSchoolOrInstitutionTypeschema_Measure_TEduMeasureType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MeasuresequenceSchoolOrInstitutionTypeschema_Measure_TEduMeasureType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Measure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TschoolTypes xsdt.String

//	Returns true if the value of this enumerated TschoolTypes is "secondary".
func (me TschoolTypes) IsSecondary() bool { return me.String() == "secondary" }

//	Returns true if the value of this enumerated TschoolTypes is "community".
func (me TschoolTypes) IsCommunity() bool { return me.String() == "community" }

//	Returns true if the value of this enumerated TschoolTypes is "college".
func (me TschoolTypes) IsCollege() bool { return me.String() == "college" }

//	Returns true if the value of this enumerated TschoolTypes is "university".
func (me TschoolTypes) IsUniversity() bool { return me.String() == "university" }

//	Since TschoolTypes is just a simple String type, this merely returns the current string value.
func (me TschoolTypes) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TschoolTypes's alias type xsdt.String.
func (me TschoolTypes) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TschoolTypes is "highschool".
func (me TschoolTypes) IsHighschool() bool { return me.String() == "highschool" }

//	Since TschoolTypes is just a simple String type, this merely sets the current value from the specified string.
func (me *TschoolTypes) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TschoolTypes is "trade".
func (me TschoolTypes) IsTrade() bool { return me.String() == "trade" }

type TSchoolTypeStringExtensionType xsdt.String

//	Since TSchoolTypeStringExtensionType is just a simple String type, this merely sets the current value from the specified string.
func (me *TSchoolTypeStringExtensionType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TSchoolTypeStringExtensionType is just a simple String type, this merely returns the current string value.
func (me TSchoolTypeStringExtensionType) String() string { return xsdt.String(me).String() }

//	TSchoolTypeStringExtensionType is an XSD union-type of several types. This is a simple type conversion to XsdtString, but keep in mind the actual value may or may not be a valid XsdtString value.
func (me TSchoolTypeStringExtensionType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	TSchoolTypeStringExtensionType is an XSD union-type of several types. This is a simple type conversion to TschoolTypes, but keep in mind the actual value may or may not be a valid TschoolTypes value.
func (me TSchoolTypeStringExtensionType) ToTschoolTypes() TschoolTypes { return TschoolTypes(me) }

type XsdGoPkgHasAttr_SchoolType_TSchoolTypeStringExtensionType_ struct {
	SchoolType TSchoolTypeStringExtensionType `xml:"schoolType,attr,omitempty"`
}

//	Summarized location of the entity.
type TxsdSchoolOrInstitutionTypeSequenceLocationSummary struct {
	XsdGoPkgHasElem_PostalCodesequencePostalAddressTypeschema_PostalCode_XsdtString_

	XsdGoPkgHasElem_MunicipalitysequencePostalAddressTypeschema_Municipality_XsdtString_

	XsdGoPkgHasElems_RegionsequencePostalAddressTypeschema_Region_XsdtString_

	XsdGoPkgHasElem_CountryCode
}

//	If the WalkHandlers.TxsdSchoolOrInstitutionTypeSequenceLocationSummary function is not nil (ie. was set by outside code), calls it with this TxsdSchoolOrInstitutionTypeSequenceLocationSummary instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdSchoolOrInstitutionTypeSequenceLocationSummary instance.
func (me *TxsdSchoolOrInstitutionTypeSequenceLocationSummary) Walk() (err error) {
	if fn := WalkHandlers.TxsdSchoolOrInstitutionTypeSequenceLocationSummary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_MunicipalitysequencePostalAddressTypeschema_Municipality_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RegionsequencePostalAddressTypeschema_Region_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CountryCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PostalCodesequencePostalAddressTypeschema_PostalCode_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_LocationSummarysequenceSchoolOrInstitutionTypeschema_LocationSummary_TxsdSchoolOrInstitutionTypeSequenceLocationSummary_ struct {
	//	Summarized location of the entity.
	LocationSummary *TxsdSchoolOrInstitutionTypeSequenceLocationSummary `xml:"LocationSummary"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LocationSummarysequenceSchoolOrInstitutionTypeschema_LocationSummary_TxsdSchoolOrInstitutionTypeSequenceLocationSummary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LocationSummarysequenceSchoolOrInstitutionTypeschema_LocationSummary_TxsdSchoolOrInstitutionTypeSequenceLocationSummary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LocationSummarysequenceSchoolOrInstitutionTypeschema_LocationSummary_TxsdSchoolOrInstitutionTypeSequenceLocationSummary_ instance.
func (me *XsdGoPkgHasElem_LocationSummarysequenceSchoolOrInstitutionTypeschema_LocationSummary_TxsdSchoolOrInstitutionTypeSequenceLocationSummary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LocationSummarysequenceSchoolOrInstitutionTypeschema_LocationSummary_TxsdSchoolOrInstitutionTypeSequenceLocationSummary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LocationSummary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSchoolOrInstitutionType struct {
	//	Deprecated in favor of the School / SchoolName path.
	XsdGoPkgHasElem_SchoolNamesequenceSchoolDataTypeschema_SchoolName_XsdtString_

	//	School, College or institution attended.  Associated type attribute further qualifies the name as current, prior,  degree or joint.
	XsdGoPkgHasElems_SchoolsequenceSchoolOrInstitutionTypeschema_School_TSchoolDataType_

	//	The campus, department or other organizational unit for the educational institution.
	XsdGoPkgHasElems_OrganizationUnitsequenceSchoolOrInstitutionTypeschema_OrganizationUnit_TxsdSchoolOrInstitutionTypeSequenceOrganizationUnit_

	XsdGoPkgHasElems_DegreesequenceSchoolOrInstitutionTypeschema_Degree_TEduDegreeType_

	//	Deprecated in favor of Degree construct.
	XsdGoPkgHasElems_MajorsequenceSchoolOrInstitutionTypeschema_Major_XsdtString_

	//	Deprecated in favor of Degree construct.
	XsdGoPkgHasElem_DatesOfAttendancesequenceSchoolOrInstitutionTypeschema_DatesOfAttendance_TDeprecatedDatesOfAttendanceType_

	XsdGoPkgHasElem_UserArea

	//	Summarized location of the entity.
	XsdGoPkgHasElem_LocationSummarysequenceSchoolOrInstitutionTypeschema_LocationSummary_TxsdSchoolOrInstitutionTypeSequenceLocationSummary_

	XsdGoPkgHasElem_PostalAddress

	//	Deprecated in favor of Degree construct.
	XsdGoPkgHasElems_MinorsequenceSchoolOrInstitutionTypeschema_Minor_XsdtString_

	//	Deprecated in favor of Degree construct.
	XsdGoPkgHasElem_MeasuresequenceSchoolOrInstitutionTypeschema_Measure_TEduMeasureType_

	//	Deprecated in favor of Degree construct.
	XsdGoPkgHasElem_CommentssequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Comments_XsdtString_

	XsdGoPkgHasAttr_SchoolType_TSchoolTypeStringExtensionType_
}

//	If the WalkHandlers.TSchoolOrInstitutionType function is not nil (ie. was set by outside code), calls it with this TSchoolOrInstitutionType instance as the single argument. Then calls the Walk() method on 12/13 embed(s) and 0/0 field(s) belonging to this TSchoolOrInstitutionType instance.
func (me *TSchoolOrInstitutionType) Walk() (err error) {
	if fn := WalkHandlers.TSchoolOrInstitutionType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_UserArea.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SchoolNamesequenceSchoolDataTypeschema_SchoolName_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_SchoolsequenceSchoolOrInstitutionTypeschema_School_TSchoolDataType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_OrganizationUnitsequenceSchoolOrInstitutionTypeschema_OrganizationUnit_TxsdSchoolOrInstitutionTypeSequenceOrganizationUnit_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_DegreesequenceSchoolOrInstitutionTypeschema_Degree_TEduDegreeType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_MajorsequenceSchoolOrInstitutionTypeschema_Major_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DatesOfAttendancesequenceSchoolOrInstitutionTypeschema_DatesOfAttendance_TDeprecatedDatesOfAttendanceType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LocationSummarysequenceSchoolOrInstitutionTypeschema_LocationSummary_TxsdSchoolOrInstitutionTypeSequenceLocationSummary_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PostalAddress.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_MinorsequenceSchoolOrInstitutionTypeschema_Minor_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MeasuresequenceSchoolOrInstitutionTypeschema_Measure_TEduMeasureType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CommentssequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Comments_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SchoolOrInstitutionsequenceEducationHistoryTypeschema_SchoolOrInstitution_TSchoolOrInstitutionType_ struct {
	SchoolOrInstitutions []*TSchoolOrInstitutionType `xml:"SchoolOrInstitution"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SchoolOrInstitutionsequenceEducationHistoryTypeschema_SchoolOrInstitution_TSchoolOrInstitutionType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SchoolOrInstitutionsequenceEducationHistoryTypeschema_SchoolOrInstitution_TSchoolOrInstitutionType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SchoolOrInstitutionsequenceEducationHistoryTypeschema_SchoolOrInstitution_TSchoolOrInstitutionType_ instance.
func (me *XsdGoPkgHasElems_SchoolOrInstitutionsequenceEducationHistoryTypeschema_SchoolOrInstitution_TSchoolOrInstitutionType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SchoolOrInstitutionsequenceEducationHistoryTypeschema_SchoolOrInstitution_TSchoolOrInstitutionType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SchoolOrInstitutions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TEducationHistoryType struct {
	XsdGoPkgHasElems_SchoolOrInstitutionsequenceEducationHistoryTypeschema_SchoolOrInstitution_TSchoolOrInstitutionType_
}

//	If the WalkHandlers.TEducationHistoryType function is not nil (ie. was set by outside code), calls it with this TEducationHistoryType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TEducationHistoryType instance.
func (me *TEducationHistoryType) Walk() (err error) {
	if fn := WalkHandlers.TEducationHistoryType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_SchoolOrInstitutionsequenceEducationHistoryTypeschema_SchoolOrInstitution_TSchoolOrInstitutionType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EducationHistory struct {
	EducationHistory *TEducationHistoryType `xml:"EducationHistory"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EducationHistory function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EducationHistory instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_EducationHistory instance.
func (me *XsdGoPkgHasElem_EducationHistory) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EducationHistory; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EducationHistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EducationHistory struct {
	EducationHistories []*TEducationHistoryType `xml:"EducationHistory"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EducationHistory function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EducationHistory instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EducationHistory instance.
func (me *XsdGoPkgHasElems_EducationHistory) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EducationHistory; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EducationHistories {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EmployerOrgNamesequenceEmployerOrgDataTypeschema_EmployerOrgName_XsdtString_ struct {
	EmployerOrgName xsdt.String `xml:"EmployerOrgName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EmployerOrgNamesequenceEmployerOrgDataTypeschema_EmployerOrgName_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EmployerOrgNamesequenceEmployerOrgDataTypeschema_EmployerOrgName_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_EmployerOrgNamesequenceEmployerOrgDataTypeschema_EmployerOrgName_XsdtString_ instance.
func (me *XsdGoPkgHasElem_EmployerOrgNamesequenceEmployerOrgDataTypeschema_EmployerOrgName_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EmployerOrgNamesequenceEmployerOrgDataTypeschema_EmployerOrgName_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcontactMethodLocationType xsdt.String

//	Since TcontactMethodLocationType is just a simple String type, this merely returns the current string value.
func (me TcontactMethodLocationType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TcontactMethodLocationType's alias type xsdt.String.
func (me TcontactMethodLocationType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TcontactMethodLocationType is "office".
func (me TcontactMethodLocationType) IsOffice() bool { return me.String() == "office" }

//	Returns true if the value of this enumerated TcontactMethodLocationType is "vehicle".
func (me TcontactMethodLocationType) IsVehicle() bool { return me.String() == "vehicle" }

//	Returns true if the value of this enumerated TcontactMethodLocationType is "onPerson".
func (me TcontactMethodLocationType) IsOnPerson() bool { return me.String() == "onPerson" }

//	Returns true if the value of this enumerated TcontactMethodLocationType is "home".
func (me TcontactMethodLocationType) IsHome() bool { return me.String() == "home" }

//	Since TcontactMethodLocationType is just a simple String type, this merely sets the current value from the specified string.
func (me *TcontactMethodLocationType) Set(s string) { (*xsdt.String)(me).Set(s) }

type TcontactMethodLocationPatternExtensionType xsdt.String

//	Since TcontactMethodLocationPatternExtensionType is just a simple String type, this merely sets the current value from the specified string.
func (me *TcontactMethodLocationPatternExtensionType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TcontactMethodLocationPatternExtensionType is just a simple String type, this merely returns the current string value.
func (me TcontactMethodLocationPatternExtensionType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TcontactMethodLocationPatternExtensionType's alias type xsdt.String.
func (me TcontactMethodLocationPatternExtensionType) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

//	TcontactMethodLocationPatternExtensionType is an XSD union-type of several types. This is a simple type conversion to TcontactMethodLocationType, but keep in mind the actual value may or may not be a valid TcontactMethodLocationType value.
func (me TcontactMethodLocationPatternExtensionType) ToTcontactMethodLocationType() TcontactMethodLocationType {
	return TcontactMethodLocationType(me)
}

//	TcontactMethodLocationPatternExtensionType is an XSD union-type of several types. This is a simple type conversion to TxStringPatternExtensionType, but keep in mind the actual value may or may not be a valid TxStringPatternExtensionType value.
func (me TcontactMethodLocationPatternExtensionType) ToTxStringPatternExtensionType() TxStringPatternExtensionType {
	return TxStringPatternExtensionType(me)
}

type XsdGoPkgHasElem_Location struct {
	Location TcontactMethodLocationPatternExtensionType `xml:"Location"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Location function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Location instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Location instance.
func (me *XsdGoPkgHasElem_Location) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Location; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TInternetEmailAddressType xsdt.String

//	Since TInternetEmailAddressType is just a simple String type, this merely sets the current value from the specified string.
func (me *TInternetEmailAddressType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TInternetEmailAddressType is just a simple String type, this merely returns the current string value.
func (me TInternetEmailAddressType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TInternetEmailAddressType's alias type xsdt.String.
func (me TInternetEmailAddressType) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElem_InternetEmailAddress struct {
	InternetEmailAddress TInternetEmailAddressType `xml:"InternetEmailAddress"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InternetEmailAddress function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InternetEmailAddress instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_InternetEmailAddress instance.
func (me *XsdGoPkgHasElem_InternetEmailAddress) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InternetEmailAddress; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcontactMethodUseType xsdt.String

//	Since TcontactMethodUseType is just a simple String type, this merely sets the current value from the specified string.
func (me *TcontactMethodUseType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TcontactMethodUseType is just a simple String type, this merely returns the current string value.
func (me TcontactMethodUseType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TcontactMethodUseType's alias type xsdt.String.
func (me TcontactMethodUseType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TcontactMethodUseType is "business".
func (me TcontactMethodUseType) IsBusiness() bool { return me.String() == "business" }

//	Returns true if the value of this enumerated TcontactMethodUseType is "businessDirect".
func (me TcontactMethodUseType) IsBusinessDirect() bool { return me.String() == "businessDirect" }

//	Returns true if the value of this enumerated TcontactMethodUseType is "personal".
func (me TcontactMethodUseType) IsPersonal() bool { return me.String() == "personal" }

type TcontactMethodUsePatternExtensionType xsdt.String

//	TcontactMethodUsePatternExtensionType is an XSD union-type of several types. This is a simple type conversion to TxStringPatternExtensionType, but keep in mind the actual value may or may not be a valid TxStringPatternExtensionType value.
func (me TcontactMethodUsePatternExtensionType) ToTxStringPatternExtensionType() TxStringPatternExtensionType {
	return TxStringPatternExtensionType(me)
}

//	Since TcontactMethodUsePatternExtensionType is just a simple String type, this merely sets the current value from the specified string.
func (me *TcontactMethodUsePatternExtensionType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TcontactMethodUsePatternExtensionType is just a simple String type, this merely returns the current string value.
func (me TcontactMethodUsePatternExtensionType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TcontactMethodUsePatternExtensionType's alias type xsdt.String.
func (me TcontactMethodUsePatternExtensionType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	TcontactMethodUsePatternExtensionType is an XSD union-type of several types. This is a simple type conversion to TcontactMethodUseType, but keep in mind the actual value may or may not be a valid TcontactMethodUseType value.
func (me TcontactMethodUsePatternExtensionType) ToTcontactMethodUseType() TcontactMethodUseType {
	return TcontactMethodUseType(me)
}

type XsdGoPkgHasElem_Use struct {
	Use TcontactMethodUsePatternExtensionType `xml:"Use"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Use function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Use instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Use instance.
func (me *XsdGoPkgHasElem_Use) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Use; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FormattedNumber struct {
	FormattedNumber xsdt.String `xml:"FormattedNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FormattedNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FormattedNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_FormattedNumber instance.
func (me *XsdGoPkgHasElem_FormattedNumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FormattedNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_InternationalCountryCode struct {
	InternationalCountryCode xsdt.String `xml:"InternationalCountryCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InternationalCountryCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InternationalCountryCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_InternationalCountryCode instance.
func (me *XsdGoPkgHasElem_InternationalCountryCode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InternationalCountryCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_NationalNumber struct {
	NationalNumber xsdt.String `xml:"NationalNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NationalNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NationalNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_NationalNumber instance.
func (me *XsdGoPkgHasElem_NationalNumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NationalNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SubscriberNumber struct {
	SubscriberNumber xsdt.String `xml:"SubscriberNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SubscriberNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SubscriberNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SubscriberNumber instance.
func (me *XsdGoPkgHasElem_SubscriberNumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SubscriberNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Extension struct {
	Extension xsdt.String `xml:"Extension"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Extension function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Extension instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Extension instance.
func (me *XsdGoPkgHasElem_Extension) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Extension; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasGroup_TelcomNumberGroup struct {
	XsdGoPkgHasElem_InternationalCountryCode

	XsdGoPkgHasElem_NationalNumber

	XsdGoPkgHasElem_AreaCityCode

	XsdGoPkgHasElem_SubscriberNumber

	XsdGoPkgHasElem_Extension
}

//	If the WalkHandlers.XsdGoPkgHasGroup_TelcomNumberGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_TelcomNumberGroup instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_TelcomNumberGroup instance.
func (me *XsdGoPkgHasGroup_TelcomNumberGroup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasGroup_TelcomNumberGroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Extension.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_InternationalCountryCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_NationalNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AreaCityCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SubscriberNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TelcomNumberType struct {
	XsdGoPkgHasGroup_TelcomNumberGroup

	XsdGoPkgHasElem_FormattedNumber
}

//	If the WalkHandlers.TelcomNumberType function is not nil (ie. was set by outside code), calls it with this TelcomNumberType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TelcomNumberType instance.
func (me *TelcomNumberType) Walk() (err error) {
	if fn := WalkHandlers.TelcomNumberType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_FormattedNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasGroup_TelcomNumberGroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Telephone struct {
	Telephone *TelcomNumberType `xml:"Telephone"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Telephone function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Telephone instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Telephone instance.
func (me *XsdGoPkgHasElem_Telephone) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Telephone; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Telephone.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_SmsEnabled_XsdtBoolean_ struct {
	SmsEnabled xsdt.Boolean `xml:"smsEnabled,attr,omitempty"`
}

type TMobileTelcomNumberType struct {
	TelcomNumberType

	XsdGoPkgHasAttr_SmsEnabled_XsdtBoolean_
}

//	If the WalkHandlers.TMobileTelcomNumberType function is not nil (ie. was set by outside code), calls it with this TMobileTelcomNumberType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TMobileTelcomNumberType instance.
func (me *TMobileTelcomNumberType) Walk() (err error) {
	if fn := WalkHandlers.TMobileTelcomNumberType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TelcomNumberType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Mobile struct {
	Mobile *TMobileTelcomNumberType `xml:"Mobile"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Mobile function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Mobile instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Mobile instance.
func (me *XsdGoPkgHasElem_Mobile) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Mobile; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Mobile.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Fax struct {
	Fax *TelcomNumberType `xml:"Fax"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Fax function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Fax instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Fax instance.
func (me *XsdGoPkgHasElem_Fax) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Fax; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Fax.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Pager struct {
	Pager *TelcomNumberType `xml:"Pager"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Pager function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Pager instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Pager instance.
func (me *XsdGoPkgHasElem_Pager) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Pager; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Pager.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Ttytdd struct {
	Ttytdd *TelcomNumberType `xml:"TTYTDD"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Ttytdd function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Ttytdd instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Ttytdd instance.
func (me *XsdGoPkgHasElem_Ttytdd) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Ttytdd; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Ttytdd.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_InternetWebAddress struct {
	InternetWebAddress TInternetWebAddressType `xml:"InternetWebAddress"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InternetWebAddress function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InternetWebAddress instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_InternetWebAddress instance.
func (me *XsdGoPkgHasElem_InternetWebAddress) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InternetWebAddress; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcontactMethodWhenAvailableType xsdt.String

//	Since TcontactMethodWhenAvailableType is just a simple String type, this merely sets the current value from the specified string.
func (me *TcontactMethodWhenAvailableType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TcontactMethodWhenAvailableType is just a simple String type, this merely returns the current string value.
func (me TcontactMethodWhenAvailableType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TcontactMethodWhenAvailableType's alias type xsdt.String.
func (me TcontactMethodWhenAvailableType) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElem_WhenAvailable struct {
	WhenAvailable TcontactMethodWhenAvailableType `xml:"WhenAvailable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_WhenAvailable function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_WhenAvailable instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_WhenAvailable instance.
func (me *XsdGoPkgHasElem_WhenAvailable) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_WhenAvailable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TContactMethodType struct {
	XsdGoPkgHasElem_Use

	XsdGoPkgHasElem_Location

	XsdGoPkgHasElem_InternetEmailAddress

	XsdGoPkgHasElem_PostalAddress

	XsdGoPkgHasElem_WhenAvailable

	XsdGoPkgHasElem_Telephone

	XsdGoPkgHasElem_Mobile

	XsdGoPkgHasElem_Fax

	XsdGoPkgHasElem_Pager

	XsdGoPkgHasElem_Ttytdd

	XsdGoPkgHasElem_InternetWebAddress
}

//	If the WalkHandlers.TContactMethodType function is not nil (ie. was set by outside code), calls it with this TContactMethodType instance as the single argument. Then calls the Walk() method on 11/11 embed(s) and 0/0 field(s) belonging to this TContactMethodType instance.
func (me *TContactMethodType) Walk() (err error) {
	if fn := WalkHandlers.TContactMethodType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Use.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Location.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_InternetEmailAddress.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Pager.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Ttytdd.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_InternetWebAddress.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PostalAddress.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_WhenAvailable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Telephone.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Mobile.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Fax.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ContactMethodsequenceEmpContactInfoTypeschema_ContactMethod_TContactMethodType_ struct {
	ContactMethods []*TContactMethodType `xml:"ContactMethod"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ContactMethodsequenceEmpContactInfoTypeschema_ContactMethod_TContactMethodType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ContactMethodsequenceEmpContactInfoTypeschema_ContactMethod_TContactMethodType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ContactMethodsequenceEmpContactInfoTypeschema_ContactMethod_TContactMethodType_ instance.
func (me *XsdGoPkgHasElems_ContactMethodsequenceEmpContactInfoTypeschema_ContactMethod_TContactMethodType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ContactMethodsequenceEmpContactInfoTypeschema_ContactMethod_TContactMethodType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ContactMethods {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TEmploymentLocationSummaryType struct {
	XsdGoPkgHasElem_MunicipalitysequencePostalAddressTypeschema_Municipality_XsdtString_

	XsdGoPkgHasElems_RegionsequencePostalAddressTypeschema_Region_XsdtString_

	XsdGoPkgHasElem_CountryCode

	XsdGoPkgHasElem_PostalCodesequencePostalAddressTypeschema_PostalCode_XsdtString_
}

//	If the WalkHandlers.TEmploymentLocationSummaryType function is not nil (ie. was set by outside code), calls it with this TEmploymentLocationSummaryType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TEmploymentLocationSummaryType instance.
func (me *TEmploymentLocationSummaryType) Walk() (err error) {
	if fn := WalkHandlers.TEmploymentLocationSummaryType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_RegionsequencePostalAddressTypeschema_Region_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CountryCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PostalCodesequencePostalAddressTypeschema_PostalCode_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MunicipalitysequencePostalAddressTypeschema_Municipality_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_LocationSummarysequenceEmpContactInfoTypeschema_LocationSummary_TEmploymentLocationSummaryType_ struct {
	LocationSummary *TEmploymentLocationSummaryType `xml:"LocationSummary"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LocationSummarysequenceEmpContactInfoTypeschema_LocationSummary_TEmploymentLocationSummaryType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LocationSummarysequenceEmpContactInfoTypeschema_LocationSummary_TEmploymentLocationSummaryType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LocationSummarysequenceEmpContactInfoTypeschema_LocationSummary_TEmploymentLocationSummaryType_ instance.
func (me *XsdGoPkgHasElem_LocationSummarysequenceEmpContactInfoTypeschema_LocationSummary_TEmploymentLocationSummaryType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LocationSummarysequenceEmpContactInfoTypeschema_LocationSummary_TEmploymentLocationSummaryType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LocationSummary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcontactTypes xsdt.String

//	Since TcontactTypes is just a simple String type, this merely sets the current value from the specified string.
func (me *TcontactTypes) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TcontactTypes is just a simple String type, this merely returns the current string value.
func (me TcontactTypes) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TcontactTypes's alias type xsdt.String.
func (me TcontactTypes) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TcontactTypes is "recruiter".
func (me TcontactTypes) IsRecruiter() bool { return me.String() == "recruiter" }

//	Returns true if the value of this enumerated TcontactTypes is "HRRep".
func (me TcontactTypes) IsHRRep() bool { return me.String() == "HRRep" }

//	Returns true if the value of this enumerated TcontactTypes is "directSupervisor".
func (me TcontactTypes) IsDirectSupervisor() bool { return me.String() == "directSupervisor" }

type TContactTypeStringExtensionType xsdt.String

//	TContactTypeStringExtensionType is an XSD union-type of several types. This is a simple type conversion to XsdtString, but keep in mind the actual value may or may not be a valid XsdtString value.
func (me TContactTypeStringExtensionType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	TContactTypeStringExtensionType is an XSD union-type of several types. This is a simple type conversion to TcontactTypes, but keep in mind the actual value may or may not be a valid TcontactTypes value.
func (me TContactTypeStringExtensionType) ToTcontactTypes() TcontactTypes { return TcontactTypes(me) }

//	Since TContactTypeStringExtensionType is just a simple String type, this merely sets the current value from the specified string.
func (me *TContactTypeStringExtensionType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TContactTypeStringExtensionType is just a simple String type, this merely returns the current string value.
func (me TContactTypeStringExtensionType) String() string { return xsdt.String(me).String() }

type XsdGoPkgHasAttr_ContactType_TContactTypeStringExtensionType_ struct {
	ContactType TContactTypeStringExtensionType `xml:"contactType,attr,omitempty"`
}

type TEmpContactInfoType struct {
	XsdGoPkgHasElem_PersonNamesequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_PersonName_TPersonNameType_

	XsdGoPkgHasElems_ContactMethodsequenceEmpContactInfoTypeschema_ContactMethod_TContactMethodType_

	XsdGoPkgHasElem_LocationSummarysequenceEmpContactInfoTypeschema_LocationSummary_TEmploymentLocationSummaryType_

	XsdGoPkgHasElems_InternetDomainNamesequenceSchoolDataTypeschema_InternetDomainName_TInternetDomainNameType_

	XsdGoPkgHasAttr_ContactType_TContactTypeStringExtensionType_
}

//	If the WalkHandlers.TEmpContactInfoType function is not nil (ie. was set by outside code), calls it with this TEmpContactInfoType instance as the single argument. Then calls the Walk() method on 4/5 embed(s) and 0/0 field(s) belonging to this TEmpContactInfoType instance.
func (me *TEmpContactInfoType) Walk() (err error) {
	if fn := WalkHandlers.TEmpContactInfoType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_PersonNamesequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_PersonName_TPersonNameType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ContactMethodsequenceEmpContactInfoTypeschema_ContactMethod_TContactMethodType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LocationSummarysequenceEmpContactInfoTypeschema_LocationSummary_TEmploymentLocationSummaryType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_InternetDomainNamesequenceSchoolDataTypeschema_InternetDomainName_TInternetDomainNameType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EmployerContactInfosequenceEmployerOrgDataTypeschema_EmployerContactInfo_TEmpContactInfoType_ struct {
	EmployerContactInfo *TEmpContactInfoType `xml:"EmployerContactInfo"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EmployerContactInfosequenceEmployerOrgDataTypeschema_EmployerContactInfo_TEmpContactInfoType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EmployerContactInfosequenceEmployerOrgDataTypeschema_EmployerContactInfo_TEmpContactInfoType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_EmployerContactInfosequenceEmployerOrgDataTypeschema_EmployerContactInfo_TEmpContactInfoType_ instance.
func (me *XsdGoPkgHasElem_EmployerContactInfosequenceEmployerOrgDataTypeschema_EmployerContactInfo_TEmpContactInfoType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EmployerContactInfosequenceEmployerOrgDataTypeschema_EmployerContactInfo_TEmpContactInfoType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EmployerContactInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_OrgSizesequencePositionHistoryTypeschema_OrgSize_XsdtString_ struct {
	OrgSize xsdt.String `xml:"OrgSize"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OrgSizesequencePositionHistoryTypeschema_OrgSize_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OrgSizesequencePositionHistoryTypeschema_OrgSize_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_OrgSizesequencePositionHistoryTypeschema_OrgSize_XsdtString_ instance.
func (me *XsdGoPkgHasElem_OrgSizesequencePositionHistoryTypeschema_OrgSize_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OrgSizesequencePositionHistoryTypeschema_OrgSize_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ReasonForLeavingsequenceVerificationTypeschema_ReasonForLeaving_XsdtString_ struct {
	ReasonForLeaving xsdt.String `xml:"ReasonForLeaving"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ReasonForLeavingsequenceVerificationTypeschema_ReasonForLeaving_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ReasonForLeavingsequenceVerificationTypeschema_ReasonForLeaving_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ReasonForLeavingsequenceVerificationTypeschema_ReasonForLeaving_XsdtString_ instance.
func (me *XsdGoPkgHasElem_ReasonForLeavingsequenceVerificationTypeschema_ReasonForLeaving_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ReasonForLeavingsequenceVerificationTypeschema_ReasonForLeaving_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PermissionToContactsequenceVerificationTypeschema_PermissionToContact_XsdtBoolean_ struct {
	PermissionToContact xsdt.Boolean `xml:"PermissionToContact"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PermissionToContactsequenceVerificationTypeschema_PermissionToContact_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PermissionToContactsequenceVerificationTypeschema_PermissionToContact_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PermissionToContactsequenceVerificationTypeschema_PermissionToContact_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElem_PermissionToContactsequenceVerificationTypeschema_PermissionToContact_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PermissionToContactsequenceVerificationTypeschema_PermissionToContact_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_VerifyEmploymentsequenceVerificationTypeschema_VerifyEmployment_XsdtBoolean_ struct {
	VerifyEmployment xsdt.Boolean `xml:"VerifyEmployment"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_VerifyEmploymentsequenceVerificationTypeschema_VerifyEmployment_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_VerifyEmploymentsequenceVerificationTypeschema_VerifyEmployment_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_VerifyEmploymentsequenceVerificationTypeschema_VerifyEmployment_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElem_VerifyEmploymentsequenceVerificationTypeschema_VerifyEmployment_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_VerifyEmploymentsequenceVerificationTypeschema_VerifyEmployment_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EligibleForRehiresequenceVerificationTypeschema_EligibleForRehire_XsdtBoolean_ struct {
	EligibleForRehire xsdt.Boolean `xml:"EligibleForRehire"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EligibleForRehiresequenceVerificationTypeschema_EligibleForRehire_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EligibleForRehiresequenceVerificationTypeschema_EligibleForRehire_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_EligibleForRehiresequenceVerificationTypeschema_EligibleForRehire_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElem_EligibleForRehiresequenceVerificationTypeschema_EligibleForRehire_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EligibleForRehiresequenceVerificationTypeschema_EligibleForRehire_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRatingTypeChoiceNumericValue struct {
	XsdtDouble

	XsdGoPkgHasAttr_MaxValue_XsdtDouble_

	XsdGoPkgHasAttr_Description_XsdtString_

	XsdGoPkgHasAttr_MinValue_XsdtDouble_
}

//	If the WalkHandlers.TxsdRatingTypeChoiceNumericValue function is not nil (ie. was set by outside code), calls it with this TxsdRatingTypeChoiceNumericValue instance as the single argument. Then calls the Walk() method on 0/4 embed(s) and 0/0 field(s) belonging to this TxsdRatingTypeChoiceNumericValue instance.
func (me *TxsdRatingTypeChoiceNumericValue) Walk() (err error) {
	if fn := WalkHandlers.TxsdRatingTypeChoiceNumericValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_NumericValuechoiceRatingTypeschema_NumericValue_TxsdRatingTypeChoiceNumericValue_ struct {
	NumericValue *TxsdRatingTypeChoiceNumericValue `xml:"NumericValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NumericValuechoiceRatingTypeschema_NumericValue_TxsdRatingTypeChoiceNumericValue_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NumericValuechoiceRatingTypeschema_NumericValue_TxsdRatingTypeChoiceNumericValue_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_NumericValuechoiceRatingTypeschema_NumericValue_TxsdRatingTypeChoiceNumericValue_ instance.
func (me *XsdGoPkgHasElem_NumericValuechoiceRatingTypeschema_NumericValue_TxsdRatingTypeChoiceNumericValue_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NumericValuechoiceRatingTypeschema_NumericValue_TxsdRatingTypeChoiceNumericValue_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.NumericValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_StringValuechoiceRatingTypeschema_StringValue_TxsdRatingTypeChoiceStringValue_ struct {
	StringValue *TxsdStringValue `xml:"StringValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_StringValuechoiceRatingTypeschema_StringValue_TxsdRatingTypeChoiceStringValue_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_StringValuechoiceRatingTypeschema_StringValue_TxsdRatingTypeChoiceStringValue_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_StringValuechoiceRatingTypeschema_StringValue_TxsdRatingTypeChoiceStringValue_ instance.
func (me *XsdGoPkgHasElem_StringValuechoiceRatingTypeschema_StringValue_TxsdRatingTypeChoiceStringValue_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_StringValuechoiceRatingTypeschema_StringValue_TxsdRatingTypeChoiceStringValue_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StringValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TRatingType struct {
	XsdGoPkgHasElem_NumericValuechoiceRatingTypeschema_NumericValue_TxsdRatingTypeChoiceNumericValue_

	XsdGoPkgHasElem_StringValuechoiceRatingTypeschema_StringValue_TxsdRatingTypeChoiceStringValue_
}

//	If the WalkHandlers.TRatingType function is not nil (ie. was set by outside code), calls it with this TRatingType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TRatingType instance.
func (me *TRatingType) Walk() (err error) {
	if fn := WalkHandlers.TRatingType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_StringValuechoiceRatingTypeschema_StringValue_TxsdRatingTypeChoiceStringValue_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_NumericValuechoiceRatingTypeschema_NumericValue_TxsdRatingTypeChoiceNumericValue_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AttendanceRatingsequenceVerificationTypeschema_AttendanceRating_TRatingType_ struct {
	AttendanceRating *TRatingType `xml:"AttendanceRating"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AttendanceRatingsequenceVerificationTypeschema_AttendanceRating_TRatingType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AttendanceRatingsequenceVerificationTypeschema_AttendanceRating_TRatingType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AttendanceRatingsequenceVerificationTypeschema_AttendanceRating_TRatingType_ instance.
func (me *XsdGoPkgHasElem_AttendanceRatingsequenceVerificationTypeschema_AttendanceRating_TRatingType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AttendanceRatingsequenceVerificationTypeschema_AttendanceRating_TRatingType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AttendanceRating.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_OverallPerformanceRatingsequenceVerificationTypeschema_OverallPerformanceRating_TRatingType_ struct {
	OverallPerformanceRating *TRatingType `xml:"OverallPerformanceRating"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OverallPerformanceRatingsequenceVerificationTypeschema_OverallPerformanceRating_TRatingType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OverallPerformanceRatingsequenceVerificationTypeschema_OverallPerformanceRating_TRatingType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_OverallPerformanceRatingsequenceVerificationTypeschema_OverallPerformanceRating_TRatingType_ instance.
func (me *XsdGoPkgHasElem_OverallPerformanceRatingsequenceVerificationTypeschema_OverallPerformanceRating_TRatingType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OverallPerformanceRatingsequenceVerificationTypeschema_OverallPerformanceRating_TRatingType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.OverallPerformanceRating.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Usage is primarily for the results of a screening, but is not limited to that purpose.
type XsdGoPkgHasElem_QuestionsequenceEmploymentQuestionAnswerPairTypeschema_Question_XsdtString_ struct {
	Question xsdt.String `xml:"Question"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_QuestionsequenceEmploymentQuestionAnswerPairTypeschema_Question_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_QuestionsequenceEmploymentQuestionAnswerPairTypeschema_Question_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_QuestionsequenceEmploymentQuestionAnswerPairTypeschema_Question_XsdtString_ instance.
func (me *XsdGoPkgHasElem_QuestionsequenceEmploymentQuestionAnswerPairTypeschema_Question_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_QuestionsequenceEmploymentQuestionAnswerPairTypeschema_Question_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AnswersequenceEmploymentQuestionAnswerPairTypeschema_Answer_XsdtString_ struct {
	Answer xsdt.String `xml:"Answer"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AnswersequenceEmploymentQuestionAnswerPairTypeschema_Answer_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AnswersequenceEmploymentQuestionAnswerPairTypeschema_Answer_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AnswersequenceEmploymentQuestionAnswerPairTypeschema_Answer_XsdtString_ instance.
func (me *XsdGoPkgHasElem_AnswersequenceEmploymentQuestionAnswerPairTypeschema_Answer_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AnswersequenceEmploymentQuestionAnswerPairTypeschema_Answer_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TEmploymentQuestionAnswerPairType struct {
	XsdGoPkgHasElem_QuestionsequenceEmploymentQuestionAnswerPairTypeschema_Question_XsdtString_

	XsdGoPkgHasElem_AnswersequenceEmploymentQuestionAnswerPairTypeschema_Answer_XsdtString_
}

//	If the WalkHandlers.TEmploymentQuestionAnswerPairType function is not nil (ie. was set by outside code), calls it with this TEmploymentQuestionAnswerPairType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TEmploymentQuestionAnswerPairType instance.
func (me *TEmploymentQuestionAnswerPairType) Walk() (err error) {
	if fn := WalkHandlers.TEmploymentQuestionAnswerPairType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_QuestionsequenceEmploymentQuestionAnswerPairTypeschema_Question_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AnswersequenceEmploymentQuestionAnswerPairTypeschema_Answer_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_QuestionAnswerPairsequenceVerificationTypeschema_QuestionAnswerPair_TEmploymentQuestionAnswerPairType_ struct {
	//	Usage is primarily for the results of a screening, but is not limited to that purpose.
	QuestionAnswerPairs []*TEmploymentQuestionAnswerPairType `xml:"QuestionAnswerPair"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_QuestionAnswerPairsequenceVerificationTypeschema_QuestionAnswerPair_TEmploymentQuestionAnswerPairType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_QuestionAnswerPairsequenceVerificationTypeschema_QuestionAnswerPair_TEmploymentQuestionAnswerPairType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_QuestionAnswerPairsequenceVerificationTypeschema_QuestionAnswerPair_TEmploymentQuestionAnswerPairType_ instance.
func (me *XsdGoPkgHasElems_QuestionAnswerPairsequenceVerificationTypeschema_QuestionAnswerPair_TEmploymentQuestionAnswerPairType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_QuestionAnswerPairsequenceVerificationTypeschema_QuestionAnswerPair_TEmploymentQuestionAnswerPairType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.QuestionAnswerPairs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdVerificationTypeSequenceContactInfo struct {
	XsdGoPkgHasElem_PersonNamesequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_PersonName_TPersonNameType_

	XsdGoPkgHasElems_ContactMethodsequenceEmpContactInfoTypeschema_ContactMethod_TContactMethodType_
}

//	If the WalkHandlers.TxsdVerificationTypeSequenceContactInfo function is not nil (ie. was set by outside code), calls it with this TxsdVerificationTypeSequenceContactInfo instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdVerificationTypeSequenceContactInfo instance.
func (me *TxsdVerificationTypeSequenceContactInfo) Walk() (err error) {
	if fn := WalkHandlers.TxsdVerificationTypeSequenceContactInfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_PersonNamesequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_PersonName_TPersonNameType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ContactMethodsequenceEmpContactInfoTypeschema_ContactMethod_TContactMethodType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ContactInfosequenceVerificationTypeschema_ContactInfo_TxsdVerificationTypeSequenceContactInfo_ struct {
	ContactInfo *TxsdVerificationTypeSequenceContactInfo `xml:"ContactInfo"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ContactInfosequenceVerificationTypeschema_ContactInfo_TxsdVerificationTypeSequenceContactInfo_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ContactInfosequenceVerificationTypeschema_ContactInfo_TxsdVerificationTypeSequenceContactInfo_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ContactInfosequenceVerificationTypeschema_ContactInfo_TxsdVerificationTypeSequenceContactInfo_ instance.
func (me *XsdGoPkgHasElem_ContactInfosequenceVerificationTypeschema_ContactInfo_TxsdVerificationTypeSequenceContactInfo_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ContactInfosequenceVerificationTypeschema_ContactInfo_TxsdVerificationTypeSequenceContactInfo_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ContactInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TVerificationType struct {
	XsdGoPkgHasElem_AttendanceRatingsequenceVerificationTypeschema_AttendanceRating_TRatingType_

	XsdGoPkgHasElem_OverallPerformanceRatingsequenceVerificationTypeschema_OverallPerformanceRating_TRatingType_

	//	Usage is primarily for the results of a screening, but is not limited to that purpose.
	XsdGoPkgHasElems_QuestionAnswerPairsequenceVerificationTypeschema_QuestionAnswerPair_TEmploymentQuestionAnswerPairType_

	XsdGoPkgHasElem_ContactInfosequenceVerificationTypeschema_ContactInfo_TxsdVerificationTypeSequenceContactInfo_

	XsdGoPkgHasElem_ReasonForLeavingsequenceVerificationTypeschema_ReasonForLeaving_XsdtString_

	XsdGoPkgHasElem_PermissionToContactsequenceVerificationTypeschema_PermissionToContact_XsdtBoolean_

	XsdGoPkgHasElem_VerifyEmploymentsequenceVerificationTypeschema_VerifyEmployment_XsdtBoolean_

	XsdGoPkgHasElem_EligibleForRehiresequenceVerificationTypeschema_EligibleForRehire_XsdtBoolean_
}

//	If the WalkHandlers.TVerificationType function is not nil (ie. was set by outside code), calls it with this TVerificationType instance as the single argument. Then calls the Walk() method on 8/8 embed(s) and 0/0 field(s) belonging to this TVerificationType instance.
func (me *TVerificationType) Walk() (err error) {
	if fn := WalkHandlers.TVerificationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ReasonForLeavingsequenceVerificationTypeschema_ReasonForLeaving_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PermissionToContactsequenceVerificationTypeschema_PermissionToContact_XsdtBoolean_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_VerifyEmploymentsequenceVerificationTypeschema_VerifyEmployment_XsdtBoolean_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EligibleForRehiresequenceVerificationTypeschema_EligibleForRehire_XsdtBoolean_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AttendanceRatingsequenceVerificationTypeschema_AttendanceRating_TRatingType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_OverallPerformanceRatingsequenceVerificationTypeschema_OverallPerformanceRating_TRatingType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_QuestionAnswerPairsequenceVerificationTypeschema_QuestionAnswerPair_TEmploymentQuestionAnswerPairType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ContactInfosequenceVerificationTypeschema_ContactInfo_TxsdVerificationTypeSequenceContactInfo_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_VerificationsequencePositionHistoryTypeschema_Verification_TVerificationType_ struct {
	Verification *TVerificationType `xml:"Verification"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_VerificationsequencePositionHistoryTypeschema_Verification_TVerificationType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_VerificationsequencePositionHistoryTypeschema_Verification_TVerificationType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_VerificationsequencePositionHistoryTypeschema_Verification_TVerificationType_ instance.
func (me *XsdGoPkgHasElem_VerificationsequencePositionHistoryTypeschema_Verification_TVerificationType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_VerificationsequencePositionHistoryTypeschema_Verification_TVerificationType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Verification.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_CurrentEmployer_XsdtBoolean_ struct {
	CurrentEmployer xsdt.Boolean `xml:"currentEmployer,attr,omitempty"`
}

type XsdGoPkgHasElem_IndustryDescriptionsequencePositionOrgIndustryTypeschema_IndustryDescription_XsdtString_ struct {
	IndustryDescription xsdt.String `xml:"IndustryDescription"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IndustryDescriptionsequencePositionOrgIndustryTypeschema_IndustryDescription_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IndustryDescriptionsequencePositionOrgIndustryTypeschema_IndustryDescription_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_IndustryDescriptionsequencePositionOrgIndustryTypeschema_IndustryDescription_XsdtString_ instance.
func (me *XsdGoPkgHasElem_IndustryDescriptionsequencePositionOrgIndustryTypeschema_IndustryDescription_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IndustryDescriptionsequencePositionOrgIndustryTypeschema_IndustryDescription_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_ClassificationName_XsdtString_ struct {
	ClassificationName xsdt.String `xml:"classificationName,attr,omitempty"`
}

type TxsdPositionOrgIndustryTypeSequenceIndustryCode struct {
	XsdtString

	XsdGoPkgHasAttr_ClassificationName_XsdtString_
}

//	If the WalkHandlers.TxsdPositionOrgIndustryTypeSequenceIndustryCode function is not nil (ie. was set by outside code), calls it with this TxsdPositionOrgIndustryTypeSequenceIndustryCode instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdPositionOrgIndustryTypeSequenceIndustryCode instance.
func (me *TxsdPositionOrgIndustryTypeSequenceIndustryCode) Walk() (err error) {
	if fn := WalkHandlers.TxsdPositionOrgIndustryTypeSequenceIndustryCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_IndustryCodesequencePositionOrgIndustryTypeschema_IndustryCode_TxsdPositionOrgIndustryTypeSequenceIndustryCode_ struct {
	IndustryCode *TxsdPositionOrgIndustryTypeSequenceIndustryCode `xml:"IndustryCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IndustryCodesequencePositionOrgIndustryTypeschema_IndustryCode_TxsdPositionOrgIndustryTypeSequenceIndustryCode_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IndustryCodesequencePositionOrgIndustryTypeschema_IndustryCode_TxsdPositionOrgIndustryTypeSequenceIndustryCode_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_IndustryCodesequencePositionOrgIndustryTypeschema_IndustryCode_TxsdPositionOrgIndustryTypeSequenceIndustryCode_ instance.
func (me *XsdGoPkgHasElem_IndustryCodesequencePositionOrgIndustryTypeschema_IndustryCode_TxsdPositionOrgIndustryTypeSequenceIndustryCode_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IndustryCodesequencePositionOrgIndustryTypeschema_IndustryCode_TxsdPositionOrgIndustryTypeSequenceIndustryCode_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.IndustryCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPositionOrgIndustryType struct {
	XsdGoPkgHasElem_IndustryDescriptionsequencePositionOrgIndustryTypeschema_IndustryDescription_XsdtString_

	XsdGoPkgHasElem_IndustryCodesequencePositionOrgIndustryTypeschema_IndustryCode_TxsdPositionOrgIndustryTypeSequenceIndustryCode_

	XsdGoPkgHasAttr_PrimaryIndicator_XsdtBoolean_
}

//	If the WalkHandlers.TPositionOrgIndustryType function is not nil (ie. was set by outside code), calls it with this TPositionOrgIndustryType instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TPositionOrgIndustryType instance.
func (me *TPositionOrgIndustryType) Walk() (err error) {
	if fn := WalkHandlers.TPositionOrgIndustryType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_IndustryDescriptionsequencePositionOrgIndustryTypeschema_IndustryDescription_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_IndustryCodesequencePositionOrgIndustryTypeschema_IndustryCode_TxsdPositionOrgIndustryTypeSequenceIndustryCode_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_OrgIndustrysequencePositionHistoryTypeschema_OrgIndustry_TPositionOrgIndustryType_ struct {
	OrgIndustries []*TPositionOrgIndustryType `xml:"OrgIndustry"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OrgIndustrysequencePositionHistoryTypeschema_OrgIndustry_TPositionOrgIndustryType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OrgIndustrysequencePositionHistoryTypeschema_OrgIndustry_TPositionOrgIndustryType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OrgIndustrysequencePositionHistoryTypeschema_OrgIndustry_TPositionOrgIndustryType_ instance.
func (me *XsdGoPkgHasElems_OrgIndustrysequencePositionHistoryTypeschema_OrgIndustry_TPositionOrgIndustryType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OrgIndustrysequencePositionHistoryTypeschema_OrgIndustry_TPositionOrgIndustryType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.OrgIndustries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAnyDateTimeNaType xsdt.String

//	TAnyDateTimeNaType is an XSD union-type of several types. This is a simple type conversion to TDateTimeType, but keep in mind the actual value may or may not be a valid TDateTimeType value.
func (me TAnyDateTimeNaType) ToTDateTimeType() TDateTimeType { return TDateTimeType(me) }

//	TAnyDateTimeNaType is an XSD union-type of several types. This is a simple type conversion to TNotApplicableLiteral, but keep in mind the actual value may or may not be a valid TNotApplicableLiteral value.
func (me TAnyDateTimeNaType) ToTNotApplicableLiteral() TNotApplicableLiteral {
	return TNotApplicableLiteral(me)
}

//	Since TAnyDateTimeNaType is just a simple String type, this merely sets the current value from the specified string.
func (me *TAnyDateTimeNaType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TAnyDateTimeNaType is just a simple String type, this merely returns the current string value.
func (me TAnyDateTimeNaType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TAnyDateTimeNaType's alias type xsdt.String.
func (me TAnyDateTimeNaType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	TAnyDateTimeNaType is an XSD union-type of several types. This is a simple type conversion to TLocalDateType, but keep in mind the actual value may or may not be a valid TLocalDateType value.
func (me TAnyDateTimeNaType) ToTLocalDateType() TLocalDateType { return TLocalDateType(me) }

//	TAnyDateTimeNaType is an XSD union-type of several types. This is a simple type conversion to TDateType, but keep in mind the actual value may or may not be a valid TDateType value.
func (me TAnyDateTimeNaType) ToTDateType() TDateType { return TDateType(me) }

//	TAnyDateTimeNaType is an XSD union-type of several types. This is a simple type conversion to TLocalDateTimeType, but keep in mind the actual value may or may not be a valid TLocalDateTimeType value.
func (me TAnyDateTimeNaType) ToTLocalDateTimeType() TLocalDateTimeType { return TLocalDateTimeType(me) }

type XsdGoPkgHasAttr_ValidFrom_TAnyDateTimeNaType_ struct {
	ValidFrom TAnyDateTimeNaType `xml:"validFrom,attr,omitempty"`
}

type XsdGoPkgHasAttr_ValidTo_TAnyDateTimeNaType_ struct {
	ValidTo TAnyDateTimeNaType `xml:"validTo,attr,omitempty"`
}

type XsdGoPkgHasAttr_Currency_TCurrencyCodeType_ struct {
	Currency TCurrencyCodeType `xml:"currency,attr,omitempty"`
}

type TintervalTypes xsdt.String

//	Since TintervalTypes is just a simple String type, this merely sets the current value from the specified string.
func (me *TintervalTypes) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TintervalTypes is "hourly".
func (me TintervalTypes) IsHourly() bool { return me.String() == "hourly" }

//	Returns true if the value of this enumerated TintervalTypes is "daily".
func (me TintervalTypes) IsDaily() bool { return me.String() == "daily" }

//	Returns true if the value of this enumerated TintervalTypes is "weekly".
func (me TintervalTypes) IsWeekly() bool { return me.String() == "weekly" }

//	Returns true if the value of this enumerated TintervalTypes is "yearly".
func (me TintervalTypes) IsYearly() bool { return me.String() == "yearly" }

//	Returns true if the value of this enumerated TintervalTypes is "semi-monthly".
func (me TintervalTypes) IsSemiMonthly() bool { return me.String() == "semi-monthly" }

//	Returns true if the value of this enumerated TintervalTypes is "biweekly".
func (me TintervalTypes) IsBiweekly() bool { return me.String() == "biweekly" }

//	Since TintervalTypes is just a simple String type, this merely returns the current string value.
func (me TintervalTypes) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TintervalTypes's alias type xsdt.String.
func (me TintervalTypes) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TintervalTypes is "monthly".
func (me TintervalTypes) IsMonthly() bool { return me.String() == "monthly" }

//	Returns true if the value of this enumerated TintervalTypes is "quarterly".
func (me TintervalTypes) IsQuarterly() bool { return me.String() == "quarterly" }

//	Returns true if the value of this enumerated TintervalTypes is "fortnightly".
func (me TintervalTypes) IsFortnightly() bool { return me.String() == "fortnightly" }

type TIntervalTypeStringExtensionType xsdt.String

//	TIntervalTypeStringExtensionType is an XSD union-type of several types. This is a simple type conversion to TintervalTypes, but keep in mind the actual value may or may not be a valid TintervalTypes value.
func (me TIntervalTypeStringExtensionType) ToTintervalTypes() TintervalTypes {
	return TintervalTypes(me)
}

//	Since TIntervalTypeStringExtensionType is just a simple String type, this merely sets the current value from the specified string.
func (me *TIntervalTypeStringExtensionType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TIntervalTypeStringExtensionType is just a simple String type, this merely returns the current string value.
func (me TIntervalTypeStringExtensionType) String() string { return xsdt.String(me).String() }

//	TIntervalTypeStringExtensionType is an XSD union-type of several types. This is a simple type conversion to XsdtString, but keep in mind the actual value may or may not be a valid XsdtString value.
func (me TIntervalTypeStringExtensionType) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_IntervalType_TIntervalTypeStringExtensionType_ struct {
	IntervalType TIntervalTypeStringExtensionType `xml:"intervalType,attr,omitempty"`
}

type TxsdPositionCompensationTypeSequenceStartingCompensation struct {
	XsdtString

	XsdGoPkgHasAttr_Currency_TCurrencyCodeType_

	XsdGoPkgHasAttr_IntervalType_TIntervalTypeStringExtensionType_

	XsdGoPkgHasAttr_ValidFrom_TAnyDateTimeNaType_

	XsdGoPkgHasAttr_ValidTo_TAnyDateTimeNaType_
}

//	If the WalkHandlers.TxsdPositionCompensationTypeSequenceStartingCompensation function is not nil (ie. was set by outside code), calls it with this TxsdPositionCompensationTypeSequenceStartingCompensation instance as the single argument. Then calls the Walk() method on 0/5 embed(s) and 0/0 field(s) belonging to this TxsdPositionCompensationTypeSequenceStartingCompensation instance.
func (me *TxsdPositionCompensationTypeSequenceStartingCompensation) Walk() (err error) {
	if fn := WalkHandlers.TxsdPositionCompensationTypeSequenceStartingCompensation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_StartingCompensationsequencePositionCompensationTypeschema_StartingCompensation_TxsdPositionCompensationTypeSequenceStartingCompensation_ struct {
	StartingCompensation *TxsdPositionCompensationTypeSequenceStartingCompensation `xml:"StartingCompensation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_StartingCompensationsequencePositionCompensationTypeschema_StartingCompensation_TxsdPositionCompensationTypeSequenceStartingCompensation_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_StartingCompensationsequencePositionCompensationTypeschema_StartingCompensation_TxsdPositionCompensationTypeSequenceStartingCompensation_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_StartingCompensationsequencePositionCompensationTypeschema_StartingCompensation_TxsdPositionCompensationTypeSequenceStartingCompensation_ instance.
func (me *XsdGoPkgHasElem_StartingCompensationsequencePositionCompensationTypeschema_StartingCompensation_TxsdPositionCompensationTypeSequenceStartingCompensation_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_StartingCompensationsequencePositionCompensationTypeschema_StartingCompensation_TxsdPositionCompensationTypeSequenceStartingCompensation_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StartingCompensation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EndingCompensationsequencePositionCompensationTypeschema_EndingCompensation_TxsdPositionCompensationTypeSequenceEndingCompensation_ struct {
	EndingCompensation *TxsdPositionCompensationTypeSequenceStartingCompensation `xml:"EndingCompensation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EndingCompensationsequencePositionCompensationTypeschema_EndingCompensation_TxsdPositionCompensationTypeSequenceEndingCompensation_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EndingCompensationsequencePositionCompensationTypeschema_EndingCompensation_TxsdPositionCompensationTypeSequenceEndingCompensation_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_EndingCompensationsequencePositionCompensationTypeschema_EndingCompensation_TxsdPositionCompensationTypeSequenceEndingCompensation_ instance.
func (me *XsdGoPkgHasElem_EndingCompensationsequencePositionCompensationTypeschema_EndingCompensation_TxsdPositionCompensationTypeSequenceEndingCompensation_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EndingCompensationsequencePositionCompensationTypeschema_EndingCompensation_TxsdPositionCompensationTypeSequenceEndingCompensation_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EndingCompensation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPositionCompensationTypeSequenceOtherCompensation struct {
	XsdtString

	XsdGoPkgHasAttr_Type_XsdtString_

	XsdGoPkgHasAttr_ValidFrom_TAnyDateTimeNaType_

	XsdGoPkgHasAttr_ValidTo_TAnyDateTimeNaType_
}

//	If the WalkHandlers.TxsdPositionCompensationTypeSequenceOtherCompensation function is not nil (ie. was set by outside code), calls it with this TxsdPositionCompensationTypeSequenceOtherCompensation instance as the single argument. Then calls the Walk() method on 0/4 embed(s) and 0/0 field(s) belonging to this TxsdPositionCompensationTypeSequenceOtherCompensation instance.
func (me *TxsdPositionCompensationTypeSequenceOtherCompensation) Walk() (err error) {
	if fn := WalkHandlers.TxsdPositionCompensationTypeSequenceOtherCompensation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_OtherCompensationsequencePositionCompensationTypeschema_OtherCompensation_TxsdPositionCompensationTypeSequenceOtherCompensation_ struct {
	OtherCompensations []*TxsdPositionCompensationTypeSequenceOtherCompensation `xml:"OtherCompensation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OtherCompensationsequencePositionCompensationTypeschema_OtherCompensation_TxsdPositionCompensationTypeSequenceOtherCompensation_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OtherCompensationsequencePositionCompensationTypeschema_OtherCompensation_TxsdPositionCompensationTypeSequenceOtherCompensation_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OtherCompensationsequencePositionCompensationTypeschema_OtherCompensation_TxsdPositionCompensationTypeSequenceOtherCompensation_ instance.
func (me *XsdGoPkgHasElems_OtherCompensationsequencePositionCompensationTypeschema_OtherCompensation_TxsdPositionCompensationTypeSequenceOtherCompensation_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OtherCompensationsequencePositionCompensationTypeschema_OtherCompensation_TxsdPositionCompensationTypeSequenceOtherCompensation_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.OtherCompensations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPositionCompensationType struct {
	XsdGoPkgHasElem_EndingCompensationsequencePositionCompensationTypeschema_EndingCompensation_TxsdPositionCompensationTypeSequenceEndingCompensation_

	XsdGoPkgHasElem_CommentssequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Comments_XsdtString_

	XsdGoPkgHasElems_OtherCompensationsequencePositionCompensationTypeschema_OtherCompensation_TxsdPositionCompensationTypeSequenceOtherCompensation_

	XsdGoPkgHasElem_StartingCompensationsequencePositionCompensationTypeschema_StartingCompensation_TxsdPositionCompensationTypeSequenceStartingCompensation_
}

//	If the WalkHandlers.TPositionCompensationType function is not nil (ie. was set by outside code), calls it with this TPositionCompensationType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TPositionCompensationType instance.
func (me *TPositionCompensationType) Walk() (err error) {
	if fn := WalkHandlers.TPositionCompensationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_StartingCompensationsequencePositionCompensationTypeschema_StartingCompensation_TxsdPositionCompensationTypeSequenceStartingCompensation_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EndingCompensationsequencePositionCompensationTypeschema_EndingCompensation_TxsdPositionCompensationTypeSequenceEndingCompensation_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CommentssequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Comments_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_OtherCompensationsequencePositionCompensationTypeschema_OtherCompensation_TxsdPositionCompensationTypeSequenceOtherCompensation_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CompensationsequencePositionHistoryTypeschema_Compensation_TPositionCompensationType_ struct {
	Compensation *TPositionCompensationType `xml:"Compensation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CompensationsequencePositionHistoryTypeschema_Compensation_TPositionCompensationType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CompensationsequencePositionHistoryTypeschema_Compensation_TPositionCompensationType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CompensationsequencePositionHistoryTypeschema_Compensation_TPositionCompensationType_ instance.
func (me *XsdGoPkgHasElem_CompensationsequencePositionHistoryTypeschema_Compensation_TPositionCompensationType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CompensationsequencePositionHistoryTypeschema_Compensation_TPositionCompensationType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Compensation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TpositionTypes xsdt.String

//	Returns true if the value of this enumerated TpositionTypes is "internship".
func (me TpositionTypes) IsInternship() bool { return me.String() == "internship" }

//	Since TpositionTypes is just a simple String type, this merely returns the current string value.
func (me TpositionTypes) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TpositionTypes's alias type xsdt.String.
func (me TpositionTypes) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TpositionTypes is "temp".
func (me TpositionTypes) IsTemp() bool { return me.String() == "temp" }

//	Returns true if the value of this enumerated TpositionTypes is "tempToHire".
func (me TpositionTypes) IsTempToHire() bool { return me.String() == "tempToHire" }

//	Returns true if the value of this enumerated TpositionTypes is "volunteer".
func (me TpositionTypes) IsVolunteer() bool { return me.String() == "volunteer" }

//	Since TpositionTypes is just a simple String type, this merely sets the current value from the specified string.
func (me *TpositionTypes) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TpositionTypes is "directHire".
func (me TpositionTypes) IsDirectHire() bool { return me.String() == "directHire" }

//	Returns true if the value of this enumerated TpositionTypes is "contract".
func (me TpositionTypes) IsContract() bool { return me.String() == "contract" }

//	Returns true if the value of this enumerated TpositionTypes is "contractToHire".
func (me TpositionTypes) IsContractToHire() bool { return me.String() == "contractToHire" }

type TPositionTypexStringPatternExtensionType xsdt.String

//	Since TPositionTypexStringPatternExtensionType is just a simple String type, this merely sets the current value from the specified string.
func (me *TPositionTypexStringPatternExtensionType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TPositionTypexStringPatternExtensionType is just a simple String type, this merely returns the current string value.
func (me TPositionTypexStringPatternExtensionType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TPositionTypexStringPatternExtensionType's alias type xsdt.String.
func (me TPositionTypexStringPatternExtensionType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	TPositionTypexStringPatternExtensionType is an XSD union-type of several types. This is a simple type conversion to TpositionTypes, but keep in mind the actual value may or may not be a valid TpositionTypes value.
func (me TPositionTypexStringPatternExtensionType) ToTpositionTypes() TpositionTypes {
	return TpositionTypes(me)
}

//	TPositionTypexStringPatternExtensionType is an XSD union-type of several types. This is a simple type conversion to TxStringPatternExtensionType, but keep in mind the actual value may or may not be a valid TxStringPatternExtensionType value.
func (me TPositionTypexStringPatternExtensionType) ToTxStringPatternExtensionType() TxStringPatternExtensionType {
	return TxStringPatternExtensionType(me)
}

type XsdGoPkgHasAttr_PositionType_TPositionTypexStringPatternExtensionType_ struct {
	PositionType TPositionTypexStringPatternExtensionType `xml:"positionType,attr,omitempty"`
}

type XsdGoPkgHasElem_JobPlansequenceJobLevelInfoTypeschema_JobPlan_XsdtString_ struct {
	JobPlan xsdt.String `xml:"JobPlan"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_JobPlansequenceJobLevelInfoTypeschema_JobPlan_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_JobPlansequenceJobLevelInfoTypeschema_JobPlan_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_JobPlansequenceJobLevelInfoTypeschema_JobPlan_XsdtString_ instance.
func (me *XsdGoPkgHasElem_JobPlansequenceJobLevelInfoTypeschema_JobPlan_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_JobPlansequenceJobLevelInfoTypeschema_JobPlan_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_JobGradesequenceJobLevelInfoTypeschema_JobGrade_XsdtString_ struct {
	JobGrade xsdt.String `xml:"JobGrade"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_JobGradesequenceJobLevelInfoTypeschema_JobGrade_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_JobGradesequenceJobLevelInfoTypeschema_JobGrade_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_JobGradesequenceJobLevelInfoTypeschema_JobGrade_XsdtString_ instance.
func (me *XsdGoPkgHasElem_JobGradesequenceJobLevelInfoTypeschema_JobGrade_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_JobGradesequenceJobLevelInfoTypeschema_JobGrade_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_JobStepsequenceJobLevelInfoTypeschema_JobStep_XsdtString_ struct {
	JobStep xsdt.String `xml:"JobStep"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_JobStepsequenceJobLevelInfoTypeschema_JobStep_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_JobStepsequenceJobLevelInfoTypeschema_JobStep_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_JobStepsequenceJobLevelInfoTypeschema_JobStep_XsdtString_ instance.
func (me *XsdGoPkgHasElem_JobStepsequenceJobLevelInfoTypeschema_JobStep_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_JobStepsequenceJobLevelInfoTypeschema_JobStep_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TJobLevelInfoType struct {
	XsdGoPkgHasElem_JobPlansequenceJobLevelInfoTypeschema_JobPlan_XsdtString_

	XsdGoPkgHasElem_JobGradesequenceJobLevelInfoTypeschema_JobGrade_XsdtString_

	XsdGoPkgHasElem_JobStepsequenceJobLevelInfoTypeschema_JobStep_XsdtString_

	XsdGoPkgHasElem_CommentssequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Comments_XsdtString_
}

//	If the WalkHandlers.TJobLevelInfoType function is not nil (ie. was set by outside code), calls it with this TJobLevelInfoType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TJobLevelInfoType instance.
func (me *TJobLevelInfoType) Walk() (err error) {
	if fn := WalkHandlers.TJobLevelInfoType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_JobPlansequenceJobLevelInfoTypeschema_JobPlan_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_JobGradesequenceJobLevelInfoTypeschema_JobGrade_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_JobStepsequenceJobLevelInfoTypeschema_JobStep_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CommentssequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Comments_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_JobLevelInfosequencePositionHistoryTypeschema_JobLevelInfo_TJobLevelInfoType_ struct {
	JobLevelInfos []*TJobLevelInfoType `xml:"JobLevelInfo"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_JobLevelInfosequencePositionHistoryTypeschema_JobLevelInfo_TJobLevelInfoType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_JobLevelInfosequencePositionHistoryTypeschema_JobLevelInfo_TJobLevelInfoType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_JobLevelInfosequencePositionHistoryTypeschema_JobLevelInfo_TJobLevelInfoType_ instance.
func (me *XsdGoPkgHasElems_JobLevelInfosequencePositionHistoryTypeschema_JobLevelInfo_TJobLevelInfoType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_JobLevelInfosequencePositionHistoryTypeschema_JobLevelInfo_TJobLevelInfoType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.JobLevelInfos {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_OrgNamesequencePositionOrgNameTypeschema_OrgName_TPositionOrgNameType_ struct {
	OrgName *TPositionOrgNameType `xml:"OrgName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OrgNamesequencePositionOrgNameTypeschema_OrgName_TPositionOrgNameType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OrgNamesequencePositionOrgNameTypeschema_OrgName_TPositionOrgNameType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_OrgNamesequencePositionOrgNameTypeschema_OrgName_TPositionOrgNameType_ instance.
func (me *XsdGoPkgHasElem_OrgNamesequencePositionOrgNameTypeschema_OrgName_TPositionOrgNameType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OrgNamesequencePositionOrgNameTypeschema_OrgName_TPositionOrgNameType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TorganizationTypes xsdt.String

//	Returns true if the value of this enumerated TorganizationTypes is "headquarters".
func (me TorganizationTypes) IsHeadquarters() bool { return me.String() == "headquarters" }

//	Since TorganizationTypes is just a simple String type, this merely returns the current string value.
func (me TorganizationTypes) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TorganizationTypes's alias type xsdt.String.
func (me TorganizationTypes) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TorganizationTypes is "department".
func (me TorganizationTypes) IsDepartment() bool { return me.String() == "department" }

//	Returns true if the value of this enumerated TorganizationTypes is "team".
func (me TorganizationTypes) IsTeam() bool { return me.String() == "team" }

//	Returns true if the value of this enumerated TorganizationTypes is "unit".
func (me TorganizationTypes) IsUnit() bool { return me.String() == "unit" }

//	Since TorganizationTypes is just a simple String type, this merely sets the current value from the specified string.
func (me *TorganizationTypes) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TorganizationTypes is "group".
func (me TorganizationTypes) IsGroup() bool { return me.String() == "group" }

//	Returns true if the value of this enumerated TorganizationTypes is "branch".
func (me TorganizationTypes) IsBranch() bool { return me.String() == "branch" }

//	Returns true if the value of this enumerated TorganizationTypes is "company".
func (me TorganizationTypes) IsCompany() bool { return me.String() == "company" }

//	Returns true if the value of this enumerated TorganizationTypes is "subsidiary".
func (me TorganizationTypes) IsSubsidiary() bool { return me.String() == "subsidiary" }

type TOrganizationTypeStringExtensionType xsdt.String

//	Since TOrganizationTypeStringExtensionType is just a simple String type, this merely sets the current value from the specified string.
func (me *TOrganizationTypeStringExtensionType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TOrganizationTypeStringExtensionType is just a simple String type, this merely returns the current string value.
func (me TOrganizationTypeStringExtensionType) String() string { return xsdt.String(me).String() }

//	TOrganizationTypeStringExtensionType is an XSD union-type of several types. This is a simple type conversion to XsdtString, but keep in mind the actual value may or may not be a valid XsdtString value.
func (me TOrganizationTypeStringExtensionType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	TOrganizationTypeStringExtensionType is an XSD union-type of several types. This is a simple type conversion to TorganizationTypes, but keep in mind the actual value may or may not be a valid TorganizationTypes value.
func (me TOrganizationTypeStringExtensionType) ToTorganizationTypes() TorganizationTypes {
	return TorganizationTypes(me)
}

type XsdGoPkgHasAttr_OrganizationType_TOrganizationTypeStringExtensionType_ struct {
	OrganizationType TOrganizationTypeStringExtensionType `xml:"organizationType,attr,omitempty"`
}

type TPositionOrgNameType struct {
	XsdGoPkgHasElem_OrganizationNamesequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_OrganizationName_XsdtString_

	XsdGoPkgHasElem_OrgNamesequencePositionOrgNameTypeschema_OrgName_TPositionOrgNameType_

	XsdGoPkgHasAttr_OrganizationType_TOrganizationTypeStringExtensionType_
}

//	If the WalkHandlers.TPositionOrgNameType function is not nil (ie. was set by outside code), calls it with this TPositionOrgNameType instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TPositionOrgNameType instance.
func (me *TPositionOrgNameType) Walk() (err error) {
	if fn := WalkHandlers.TPositionOrgNameType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OrganizationNamesequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_OrganizationName_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_OrgNamesequencePositionOrgNameTypeschema_OrgName_TPositionOrgNameType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_OrgNamesequencePositionHistoryTypeschema_OrgName_TPositionOrgNameType_ struct {
	OrgName *TPositionOrgNameType `xml:"OrgName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OrgNamesequencePositionHistoryTypeschema_OrgName_TPositionOrgNameType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OrgNamesequencePositionHistoryTypeschema_OrgName_TPositionOrgNameType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_OrgNamesequencePositionHistoryTypeschema_OrgName_TPositionOrgNameType_ instance.
func (me *XsdGoPkgHasElem_OrgNamesequencePositionHistoryTypeschema_OrgName_TPositionOrgNameType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OrgNamesequencePositionHistoryTypeschema_OrgName_TPositionOrgNameType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.OrgName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PositionLocationsequencePositionOrgInfoTypeschema_PositionLocation_TPostalAddressType_ struct {
	PositionLocation *TPostalAddressType `xml:"PositionLocation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PositionLocationsequencePositionOrgInfoTypeschema_PositionLocation_TPostalAddressType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PositionLocationsequencePositionOrgInfoTypeschema_PositionLocation_TPostalAddressType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PositionLocationsequencePositionOrgInfoTypeschema_PositionLocation_TPostalAddressType_ instance.
func (me *XsdGoPkgHasElem_PositionLocationsequencePositionOrgInfoTypeschema_PositionLocation_TPostalAddressType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PositionLocationsequencePositionOrgInfoTypeschema_PositionLocation_TPostalAddressType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PositionLocation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_WebSitesequencePositionOrgInfoTypeschema_WebSite_TInternetWebAddressType_ struct {
	WebSite TInternetWebAddressType `xml:"WebSite"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_WebSitesequencePositionOrgInfoTypeschema_WebSite_TInternetWebAddressType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_WebSitesequencePositionOrgInfoTypeschema_WebSite_TInternetWebAddressType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_WebSitesequencePositionOrgInfoTypeschema_WebSite_TInternetWebAddressType_ instance.
func (me *XsdGoPkgHasElem_WebSitesequencePositionOrgInfoTypeschema_WebSite_TInternetWebAddressType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_WebSitesequencePositionOrgInfoTypeschema_WebSite_TInternetWebAddressType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPositionOrgInfoType struct {
	XsdGoPkgHasElem_PositionLocationsequencePositionOrgInfoTypeschema_PositionLocation_TPostalAddressType_

	XsdGoPkgHasElem_WebSitesequencePositionOrgInfoTypeschema_WebSite_TInternetWebAddressType_

	XsdGoPkgHasElem_LocationSummarysequenceEmpContactInfoTypeschema_LocationSummary_TEmploymentLocationSummaryType_
}

//	If the WalkHandlers.TPositionOrgInfoType function is not nil (ie. was set by outside code), calls it with this TPositionOrgInfoType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TPositionOrgInfoType instance.
func (me *TPositionOrgInfoType) Walk() (err error) {
	if fn := WalkHandlers.TPositionOrgInfoType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_PositionLocationsequencePositionOrgInfoTypeschema_PositionLocation_TPostalAddressType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_WebSitesequencePositionOrgInfoTypeschema_WebSite_TInternetWebAddressType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LocationSummarysequenceEmpContactInfoTypeschema_LocationSummary_TEmploymentLocationSummaryType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_OrgInfosequencePositionHistoryTypeschema_OrgInfo_TPositionOrgInfoType_ struct {
	OrgInfos []*TPositionOrgInfoType `xml:"OrgInfo"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OrgInfosequencePositionHistoryTypeschema_OrgInfo_TPositionOrgInfoType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OrgInfosequencePositionHistoryTypeschema_OrgInfo_TPositionOrgInfoType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OrgInfosequencePositionHistoryTypeschema_OrgInfo_TPositionOrgInfoType_ instance.
func (me *XsdGoPkgHasElems_OrgInfosequencePositionHistoryTypeschema_OrgInfo_TPositionOrgInfoType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OrgInfosequencePositionHistoryTypeschema_OrgInfo_TPositionOrgInfoType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.OrgInfos {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Version_XsdtString_ struct {
	Version xsdt.String `xml:"version,attr,omitempty"`
}

type TxsdOccupationalCategoryTypeSequenceTaxonomyName struct {
	XsdtString

	XsdGoPkgHasAttr_Version_XsdtString_
}

//	If the WalkHandlers.TxsdOccupationalCategoryTypeSequenceTaxonomyName function is not nil (ie. was set by outside code), calls it with this TxsdOccupationalCategoryTypeSequenceTaxonomyName instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdOccupationalCategoryTypeSequenceTaxonomyName instance.
func (me *TxsdOccupationalCategoryTypeSequenceTaxonomyName) Walk() (err error) {
	if fn := WalkHandlers.TxsdOccupationalCategoryTypeSequenceTaxonomyName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TaxonomyNamesequenceOccupationalCategoryTypeschema_TaxonomyName_TxsdOccupationalCategoryTypeSequenceTaxonomyName_ struct {
	TaxonomyName *TxsdOccupationalCategoryTypeSequenceTaxonomyName `xml:"TaxonomyName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TaxonomyNamesequenceOccupationalCategoryTypeschema_TaxonomyName_TxsdOccupationalCategoryTypeSequenceTaxonomyName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TaxonomyNamesequenceOccupationalCategoryTypeschema_TaxonomyName_TxsdOccupationalCategoryTypeSequenceTaxonomyName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_TaxonomyNamesequenceOccupationalCategoryTypeschema_TaxonomyName_TxsdOccupationalCategoryTypeSequenceTaxonomyName_ instance.
func (me *XsdGoPkgHasElem_TaxonomyNamesequenceOccupationalCategoryTypeschema_TaxonomyName_TxsdOccupationalCategoryTypeSequenceTaxonomyName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TaxonomyNamesequenceOccupationalCategoryTypeschema_TaxonomyName_TxsdOccupationalCategoryTypeSequenceTaxonomyName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TaxonomyName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CategoryCodesequenceOccupationalCategoryTypeschema_CategoryCode_XsdtString_ struct {
	CategoryCode xsdt.String `xml:"CategoryCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CategoryCodesequenceOccupationalCategoryTypeschema_CategoryCode_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CategoryCodesequenceOccupationalCategoryTypeschema_CategoryCode_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CategoryCodesequenceOccupationalCategoryTypeschema_CategoryCode_XsdtString_ instance.
func (me *XsdGoPkgHasElem_CategoryCodesequenceOccupationalCategoryTypeschema_CategoryCode_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CategoryCodesequenceOccupationalCategoryTypeschema_CategoryCode_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CategoryDescriptionsequenceOccupationalCategoryTypeschema_CategoryDescription_XsdtString_ struct {
	CategoryDescription xsdt.String `xml:"CategoryDescription"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CategoryDescriptionsequenceOccupationalCategoryTypeschema_CategoryDescription_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CategoryDescriptionsequenceOccupationalCategoryTypeschema_CategoryDescription_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CategoryDescriptionsequenceOccupationalCategoryTypeschema_CategoryDescription_XsdtString_ instance.
func (me *XsdGoPkgHasElem_CategoryDescriptionsequenceOccupationalCategoryTypeschema_CategoryDescription_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CategoryDescriptionsequenceOccupationalCategoryTypeschema_CategoryDescription_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_JobCategorysequenceOccupationalCategoryTypeschema_JobCategory_TOccupationalCategoryType_ struct {
	JobCategory *TOccupationalCategoryType `xml:"JobCategory"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_JobCategorysequenceOccupationalCategoryTypeschema_JobCategory_TOccupationalCategoryType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_JobCategorysequenceOccupationalCategoryTypeschema_JobCategory_TOccupationalCategoryType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_JobCategorysequenceOccupationalCategoryTypeschema_JobCategory_TOccupationalCategoryType_ instance.
func (me *XsdGoPkgHasElem_JobCategorysequenceOccupationalCategoryTypeschema_JobCategory_TOccupationalCategoryType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_JobCategorysequenceOccupationalCategoryTypeschema_JobCategory_TOccupationalCategoryType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TOccupationalCategoryType struct {
	XsdGoPkgHasElem_CategoryDescriptionsequenceOccupationalCategoryTypeschema_CategoryDescription_XsdtString_

	XsdGoPkgHasElem_CommentssequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Comments_XsdtString_

	XsdGoPkgHasElem_JobCategorysequenceOccupationalCategoryTypeschema_JobCategory_TOccupationalCategoryType_

	XsdGoPkgHasElem_TaxonomyNamesequenceOccupationalCategoryTypeschema_TaxonomyName_TxsdOccupationalCategoryTypeSequenceTaxonomyName_

	XsdGoPkgHasElem_CategoryCodesequenceOccupationalCategoryTypeschema_CategoryCode_XsdtString_
}

//	If the WalkHandlers.TOccupationalCategoryType function is not nil (ie. was set by outside code), calls it with this TOccupationalCategoryType instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TOccupationalCategoryType instance.
func (me *TOccupationalCategoryType) Walk() (err error) {
	if fn := WalkHandlers.TOccupationalCategoryType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_CategoryCodesequenceOccupationalCategoryTypeschema_CategoryCode_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CategoryDescriptionsequenceOccupationalCategoryTypeschema_CategoryDescription_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CommentssequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Comments_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_JobCategorysequenceOccupationalCategoryTypeschema_JobCategory_TOccupationalCategoryType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TaxonomyNamesequenceOccupationalCategoryTypeschema_TaxonomyName_TxsdOccupationalCategoryTypeSequenceTaxonomyName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_JobCategorysequencePositionHistoryTypeschema_JobCategory_TOccupationalCategoryType_ struct {
	JobCategories []*TOccupationalCategoryType `xml:"JobCategory"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_JobCategorysequencePositionHistoryTypeschema_JobCategory_TOccupationalCategoryType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_JobCategorysequencePositionHistoryTypeschema_JobCategory_TOccupationalCategoryType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_JobCategorysequencePositionHistoryTypeschema_JobCategory_TOccupationalCategoryType_ instance.
func (me *XsdGoPkgHasElems_JobCategorysequencePositionHistoryTypeschema_JobCategory_TOccupationalCategoryType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_JobCategorysequencePositionHistoryTypeschema_JobCategory_TOccupationalCategoryType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.JobCategories {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TitlesequencePositionHistoryTypeschema_Title_XsdtString_ struct {
	Title xsdt.String `xml:"Title"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TitlesequencePositionHistoryTypeschema_Title_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TitlesequencePositionHistoryTypeschema_Title_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TitlesequencePositionHistoryTypeschema_Title_XsdtString_ instance.
func (me *XsdGoPkgHasElem_TitlesequencePositionHistoryTypeschema_Title_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TitlesequencePositionHistoryTypeschema_Title_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPositionHistoryType struct {
	XsdGoPkgHasElems_OrgInfosequencePositionHistoryTypeschema_OrgInfo_TPositionOrgInfoType_

	XsdGoPkgHasElem_CommentssequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Comments_XsdtString_

	XsdGoPkgHasElems_JobCategorysequencePositionHistoryTypeschema_JobCategory_TOccupationalCategoryType_

	XsdGoPkgHasElem_TitlesequencePositionHistoryTypeschema_Title_XsdtString_

	XsdGoPkgHasElem_OrgSizesequencePositionHistoryTypeschema_OrgSize_XsdtString_

	XsdGoPkgHasElem_VerificationsequencePositionHistoryTypeschema_Verification_TVerificationType_

	XsdGoPkgHasAttr_CurrentEmployer_XsdtBoolean_

	XsdGoPkgHasElems_OrgIndustrysequencePositionHistoryTypeschema_OrgIndustry_TPositionOrgIndustryType_

	XsdGoPkgHasElem_StartDatesequenceAssociationTypeschema_StartDate_TFlexibleDatesType_

	XsdGoPkgHasElem_EndDatesequenceAssociationTypeschema_EndDate_TFlexibleDatesType_

	XsdGoPkgHasElem_CompensationsequencePositionHistoryTypeschema_Compensation_TPositionCompensationType_

	XsdGoPkgHasElem_UserArea

	XsdGoPkgHasAttr_PositionType_TPositionTypexStringPatternExtensionType_

	XsdGoPkgHasElem_DescriptionsequenceAchievementTypeschema_Description_XsdtString_

	XsdGoPkgHasElems_JobLevelInfosequencePositionHistoryTypeschema_JobLevelInfo_TJobLevelInfoType_

	XsdGoPkgHasElems_Competency

	XsdGoPkgHasElem_OrgNamesequencePositionHistoryTypeschema_OrgName_TPositionOrgNameType_
}

//	If the WalkHandlers.TPositionHistoryType function is not nil (ie. was set by outside code), calls it with this TPositionHistoryType instance as the single argument. Then calls the Walk() method on 15/17 embed(s) and 0/0 field(s) belonging to this TPositionHistoryType instance.
func (me *TPositionHistoryType) Walk() (err error) {
	if fn := WalkHandlers.TPositionHistoryType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OrgNamesequencePositionHistoryTypeschema_OrgName_TPositionOrgNameType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_JobLevelInfosequencePositionHistoryTypeschema_JobLevelInfo_TJobLevelInfoType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Competency.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TitlesequencePositionHistoryTypeschema_Title_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_OrgInfosequencePositionHistoryTypeschema_OrgInfo_TPositionOrgInfoType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CommentssequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Comments_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_JobCategorysequencePositionHistoryTypeschema_JobCategory_TOccupationalCategoryType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_OrgIndustrysequencePositionHistoryTypeschema_OrgIndustry_TPositionOrgIndustryType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_OrgSizesequencePositionHistoryTypeschema_OrgSize_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_VerificationsequencePositionHistoryTypeschema_Verification_TVerificationType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DescriptionsequenceAchievementTypeschema_Description_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_StartDatesequenceAssociationTypeschema_StartDate_TFlexibleDatesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EndDatesequenceAssociationTypeschema_EndDate_TFlexibleDatesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CompensationsequencePositionHistoryTypeschema_Compensation_TPositionCompensationType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_UserArea.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdEmployerOrgDataTypeSequencePositionHistory struct {
	TPositionHistoryType
}

//	If the WalkHandlers.TxsdEmployerOrgDataTypeSequencePositionHistory function is not nil (ie. was set by outside code), calls it with this TxsdEmployerOrgDataTypeSequencePositionHistory instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdEmployerOrgDataTypeSequencePositionHistory instance.
func (me *TxsdEmployerOrgDataTypeSequencePositionHistory) Walk() (err error) {
	if fn := WalkHandlers.TxsdEmployerOrgDataTypeSequencePositionHistory; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TPositionHistoryType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PositionHistorysequenceEmployerOrgDataTypeschema_PositionHistory_TxsdEmployerOrgDataTypeSequencePositionHistory_ struct {
	PositionHistories []*TxsdEmployerOrgDataTypeSequencePositionHistory `xml:"PositionHistory"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PositionHistorysequenceEmployerOrgDataTypeschema_PositionHistory_TxsdEmployerOrgDataTypeSequencePositionHistory_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PositionHistorysequenceEmployerOrgDataTypeschema_PositionHistory_TxsdEmployerOrgDataTypeSequencePositionHistory_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PositionHistorysequenceEmployerOrgDataTypeschema_PositionHistory_TxsdEmployerOrgDataTypeSequencePositionHistory_ instance.
func (me *XsdGoPkgHasElems_PositionHistorysequenceEmployerOrgDataTypeschema_PositionHistory_TxsdEmployerOrgDataTypeSequencePositionHistory_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PositionHistorysequenceEmployerOrgDataTypeschema_PositionHistory_TxsdEmployerOrgDataTypeSequencePositionHistory_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PositionHistories {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TemployerOrgTypes xsdt.String

//	Returns true if the value of this enumerated TemployerOrgTypes is "self".
func (me TemployerOrgTypes) IsSelf() bool { return me.String() == "self" }

//	Since TemployerOrgTypes is just a simple String type, this merely sets the current value from the specified string.
func (me *TemployerOrgTypes) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TemployerOrgTypes is just a simple String type, this merely returns the current string value.
func (me TemployerOrgTypes) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TemployerOrgTypes's alias type xsdt.String.
func (me TemployerOrgTypes) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TemployerOrgTypes is "soleEmployer".
func (me TemployerOrgTypes) IsSoleEmployer() bool { return me.String() == "soleEmployer" }

//	Returns true if the value of this enumerated TemployerOrgTypes is "agent".
func (me TemployerOrgTypes) IsAgent() bool { return me.String() == "agent" }

//	Returns true if the value of this enumerated TemployerOrgTypes is "broker".
func (me TemployerOrgTypes) IsBroker() bool { return me.String() == "broker" }

type TEmpOrgTypeStringExtensionType xsdt.String

//	Since TEmpOrgTypeStringExtensionType is just a simple String type, this merely sets the current value from the specified string.
func (me *TEmpOrgTypeStringExtensionType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TEmpOrgTypeStringExtensionType is just a simple String type, this merely returns the current string value.
func (me TEmpOrgTypeStringExtensionType) String() string { return xsdt.String(me).String() }

//	TEmpOrgTypeStringExtensionType is an XSD union-type of several types. This is a simple type conversion to XsdtString, but keep in mind the actual value may or may not be a valid XsdtString value.
func (me TEmpOrgTypeStringExtensionType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	TEmpOrgTypeStringExtensionType is an XSD union-type of several types. This is a simple type conversion to TemployerOrgTypes, but keep in mind the actual value may or may not be a valid TemployerOrgTypes value.
func (me TEmpOrgTypeStringExtensionType) ToTemployerOrgTypes() TemployerOrgTypes {
	return TemployerOrgTypes(me)
}

type XsdGoPkgHasAttr_EmployerOrgType_TEmpOrgTypeStringExtensionType_ struct {
	EmployerOrgType TEmpOrgTypeStringExtensionType `xml:"employerOrgType,attr,omitempty"`
}

type TEmployerOrgDataType struct {
	XsdGoPkgHasElem_EmployerOrgNamesequenceEmployerOrgDataTypeschema_EmployerOrgName_XsdtString_

	XsdGoPkgHasElem_EmployerContactInfosequenceEmployerOrgDataTypeschema_EmployerContactInfo_TEmpContactInfoType_

	XsdGoPkgHasElems_PositionHistorysequenceEmployerOrgDataTypeschema_PositionHistory_TxsdEmployerOrgDataTypeSequencePositionHistory_

	XsdGoPkgHasElem_UserArea

	XsdGoPkgHasAttr_EmployerOrgType_TEmpOrgTypeStringExtensionType_
}

//	If the WalkHandlers.TEmployerOrgDataType function is not nil (ie. was set by outside code), calls it with this TEmployerOrgDataType instance as the single argument. Then calls the Walk() method on 4/5 embed(s) and 0/0 field(s) belonging to this TEmployerOrgDataType instance.
func (me *TEmployerOrgDataType) Walk() (err error) {
	if fn := WalkHandlers.TEmployerOrgDataType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_PositionHistorysequenceEmployerOrgDataTypeschema_PositionHistory_TxsdEmployerOrgDataTypeSequencePositionHistory_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_UserArea.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EmployerOrgNamesequenceEmployerOrgDataTypeschema_EmployerOrgName_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EmployerContactInfosequenceEmployerOrgDataTypeschema_EmployerContactInfo_TEmpContactInfoType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EmployerOrgsequenceEmploymentHistoryTypeschema_EmployerOrg_TEmployerOrgDataType_ struct {
	EmployerOrgs []*TEmployerOrgDataType `xml:"EmployerOrg"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EmployerOrgsequenceEmploymentHistoryTypeschema_EmployerOrg_TEmployerOrgDataType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EmployerOrgsequenceEmploymentHistoryTypeschema_EmployerOrg_TEmployerOrgDataType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EmployerOrgsequenceEmploymentHistoryTypeschema_EmployerOrg_TEmployerOrgDataType_ instance.
func (me *XsdGoPkgHasElems_EmployerOrgsequenceEmploymentHistoryTypeschema_EmployerOrg_TEmployerOrgDataType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EmployerOrgsequenceEmploymentHistoryTypeschema_EmployerOrg_TEmployerOrgDataType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EmployerOrgs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TEmploymentHistoryType struct {
	XsdGoPkgHasElems_EmployerOrgsequenceEmploymentHistoryTypeschema_EmployerOrg_TEmployerOrgDataType_
}

//	If the WalkHandlers.TEmploymentHistoryType function is not nil (ie. was set by outside code), calls it with this TEmploymentHistoryType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TEmploymentHistoryType instance.
func (me *TEmploymentHistoryType) Walk() (err error) {
	if fn := WalkHandlers.TEmploymentHistoryType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_EmployerOrgsequenceEmploymentHistoryTypeschema_EmployerOrg_TEmployerOrgDataType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EmploymentHistory struct {
	EmploymentHistory *TEmploymentHistoryType `xml:"EmploymentHistory"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EmploymentHistory function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EmploymentHistory instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_EmploymentHistory instance.
func (me *XsdGoPkgHasElem_EmploymentHistory) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EmploymentHistory; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EmploymentHistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EmploymentHistory struct {
	EmploymentHistories []*TEmploymentHistoryType `xml:"EmploymentHistory"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EmploymentHistory function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EmploymentHistory instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EmploymentHistory instance.
func (me *XsdGoPkgHasElems_EmploymentHistory) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EmploymentHistory; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EmploymentHistories {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Extension struct {
	Extensions []xsdt.String `xml:"Extension"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Extension function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Extension instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Extension instance.
func (me *XsdGoPkgHasElems_Extension) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Extension; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Fax struct {
	Faxs []*TelcomNumberType `xml:"Fax"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Fax function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Fax instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Fax instance.
func (me *XsdGoPkgHasElems_Fax) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Fax; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Faxs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FormattedNumber struct {
	FormattedNumbers []xsdt.String `xml:"FormattedNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FormattedNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FormattedNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FormattedNumber instance.
func (me *XsdGoPkgHasElems_FormattedNumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FormattedNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Must conform to ISO 5218 - Representation of Human Sexes (0 - Not Known; 1 - Male; 2 - Female; 9 - Not specified)
type TGenderCodeType xsdt.Integer

//	Since TGenderCodeType is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TGenderCodeType) Set(s string) { (*xsdt.Integer)(me).Set(s) }

//	Returns a string representation of this TGenderCodeType's current non-string scalar value.
func (me TGenderCodeType) String() string { return xsdt.Integer(me).String() }

//	This convenience method just performs a simple type conversion to TGenderCodeType's alias type xsdt.Integer.
func (me TGenderCodeType) ToXsdtInteger() xsdt.Integer { return xsdt.Integer(me) }

type XsdGoPkgHasElem_GenderCode struct {
	GenderCode TGenderCodeType `xml:"GenderCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GenderCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GenderCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_GenderCode instance.
func (me *XsdGoPkgHasElem_GenderCode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GenderCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GenderCode struct {
	GenderCodes []TGenderCodeType `xml:"GenderCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GenderCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GenderCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GenderCode instance.
func (me *XsdGoPkgHasElems_GenderCode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GenderCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_InternationalCountryCode struct {
	InternationalCountryCodes []xsdt.String `xml:"InternationalCountryCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InternationalCountryCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InternationalCountryCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InternationalCountryCode instance.
func (me *XsdGoPkgHasElems_InternationalCountryCode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InternationalCountryCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_InternetDomainName struct {
	InternetDomainName *TInternetDomainNameType `xml:"InternetDomainName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InternetDomainName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InternetDomainName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_InternetDomainName instance.
func (me *XsdGoPkgHasElem_InternetDomainName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InternetDomainName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.InternetDomainName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_InternetEmailAddress struct {
	InternetEmailAddresses []TInternetEmailAddressType `xml:"InternetEmailAddress"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InternetEmailAddress function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InternetEmailAddress instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InternetEmailAddress instance.
func (me *XsdGoPkgHasElems_InternetEmailAddress) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InternetEmailAddress; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_InternetWebAddress struct {
	InternetWebAddresses []TInternetWebAddressType `xml:"InternetWebAddress"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InternetWebAddress function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InternetWebAddress instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InternetWebAddress instance.
func (me *XsdGoPkgHasElems_InternetWebAddress) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InternetWebAddress; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	ISO 639-1 two character code is preferred, but not required.
type TLanguageCodeType xsdt.Language

//	Since TLanguageCodeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TLanguageCodeType) Set(s string) { (*xsdt.Language)(me).Set(s) }

//	Since TLanguageCodeType is just a simple String type, this merely returns the current string value.
func (me TLanguageCodeType) String() string { return xsdt.Language(me).String() }

//	This convenience method just performs a simple type conversion to TLanguageCodeType's alias type xsdt.Language.
func (me TLanguageCodeType) ToXsdtLanguage() xsdt.Language { return xsdt.Language(me) }

type XsdGoPkgHasElem_LanguageCode struct {
	LanguageCode TLanguageCodeType `xml:"LanguageCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LanguageCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LanguageCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_LanguageCode instance.
func (me *XsdGoPkgHasElem_LanguageCode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LanguageCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ReadsequenceTxsdLanguageLanguageschema_Read_XsdtBoolean_ struct {
	Read xsdt.Boolean `xml:"Read"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ReadsequenceTxsdLanguageLanguageschema_Read_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ReadsequenceTxsdLanguageLanguageschema_Read_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ReadsequenceTxsdLanguageLanguageschema_Read_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElem_ReadsequenceTxsdLanguageLanguageschema_Read_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ReadsequenceTxsdLanguageLanguageschema_Read_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_WritesequenceTxsdLanguageLanguageschema_Write_XsdtBoolean_ struct {
	Write xsdt.Boolean `xml:"Write"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_WritesequenceTxsdLanguageLanguageschema_Write_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_WritesequenceTxsdLanguageLanguageschema_Write_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_WritesequenceTxsdLanguageLanguageschema_Write_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElem_WritesequenceTxsdLanguageLanguageschema_Write_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_WritesequenceTxsdLanguageLanguageschema_Write_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SpeaksequenceTxsdLanguageLanguageschema_Speak_XsdtBoolean_ struct {
	Speak xsdt.Boolean `xml:"Speak"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SpeaksequenceTxsdLanguageLanguageschema_Speak_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SpeaksequenceTxsdLanguageLanguageschema_Speak_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SpeaksequenceTxsdLanguageLanguageschema_Speak_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElem_SpeaksequenceTxsdLanguageLanguageschema_Speak_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SpeaksequenceTxsdLanguageLanguageschema_Speak_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdLanguage struct {
	XsdGoPkgHasElem_WritesequenceTxsdLanguageLanguageschema_Write_XsdtBoolean_

	XsdGoPkgHasElem_SpeaksequenceTxsdLanguageLanguageschema_Speak_XsdtBoolean_

	XsdGoPkgHasElem_CommentssequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Comments_XsdtString_

	XsdGoPkgHasElem_LanguageCode

	XsdGoPkgHasElem_ReadsequenceTxsdLanguageLanguageschema_Read_XsdtBoolean_
}

//	If the WalkHandlers.TxsdLanguage function is not nil (ie. was set by outside code), calls it with this TxsdLanguage instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TxsdLanguage instance.
func (me *TxsdLanguage) Walk() (err error) {
	if fn := WalkHandlers.TxsdLanguage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_WritesequenceTxsdLanguageLanguageschema_Write_XsdtBoolean_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SpeaksequenceTxsdLanguageLanguageschema_Speak_XsdtBoolean_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CommentssequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Comments_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LanguageCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ReadsequenceTxsdLanguageLanguageschema_Read_XsdtBoolean_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Language struct {
	Language *TxsdLanguage `xml:"Language"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Language function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Language instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Language instance.
func (me *XsdGoPkgHasElem_Language) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Language; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Language.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Language struct {
	Languages []*TxsdLanguage `xml:"Language"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Language function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Language instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Language instance.
func (me *XsdGoPkgHasElems_Language) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Language; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Languages {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LanguageCode struct {
	LanguageCodes []TLanguageCodeType `xml:"LanguageCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LanguageCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LanguageCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LanguageCode instance.
func (me *XsdGoPkgHasElems_LanguageCode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LanguageCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	An identifer for the credential.
type XsdGoPkgHasElem_IdsequenceCredentialTypeschema_Id_XsdtString_ struct {
	//	An identifer for the credential.
	Id xsdt.String `xml:"Id"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IdsequenceCredentialTypeschema_Id_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IdsequenceCredentialTypeschema_Id_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_IdsequenceCredentialTypeschema_Id_XsdtString_ instance.
func (me *XsdGoPkgHasElem_IdsequenceCredentialTypeschema_Id_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IdsequenceCredentialTypeschema_Id_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_CountryCode_TCountryCodeType_ struct {
	CountryCode TCountryCodeType `xml:"countryCode,attr,omitempty"`
}

type TIssuingAuthorityType struct {
	XsdtString

	XsdGoPkgHasAttr_CountryCode_TCountryCodeType_
}

//	If the WalkHandlers.TIssuingAuthorityType function is not nil (ie. was set by outside code), calls it with this TIssuingAuthorityType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TIssuingAuthorityType instance.
func (me *TIssuingAuthorityType) Walk() (err error) {
	if fn := WalkHandlers.TIssuingAuthorityType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_IssuingAuthoritysequenceCredentialTypeschema_IssuingAuthority_TIssuingAuthorityType_ struct {
	IssuingAuthority *TIssuingAuthorityType `xml:"IssuingAuthority"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IssuingAuthoritysequenceCredentialTypeschema_IssuingAuthority_TIssuingAuthorityType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IssuingAuthoritysequenceCredentialTypeschema_IssuingAuthority_TIssuingAuthorityType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_IssuingAuthoritysequenceCredentialTypeschema_IssuingAuthority_TIssuingAuthorityType_ instance.
func (me *XsdGoPkgHasElem_IssuingAuthoritysequenceCredentialTypeschema_IssuingAuthority_TIssuingAuthorityType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IssuingAuthoritysequenceCredentialTypeschema_IssuingAuthority_TIssuingAuthorityType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.IssuingAuthority.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ValidFromsequenceTxsdCredentialTypeSequenceEffectiveDateEffectiveDatesequenceCredentialTypeschema_ValidFrom_TFlexibleDatesType_ struct {
	ValidFrom *TFlexibleDatesType `xml:"ValidFrom"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ValidFromsequenceTxsdCredentialTypeSequenceEffectiveDateEffectiveDatesequenceCredentialTypeschema_ValidFrom_TFlexibleDatesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ValidFromsequenceTxsdCredentialTypeSequenceEffectiveDateEffectiveDatesequenceCredentialTypeschema_ValidFrom_TFlexibleDatesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ValidFromsequenceTxsdCredentialTypeSequenceEffectiveDateEffectiveDatesequenceCredentialTypeschema_ValidFrom_TFlexibleDatesType_ instance.
func (me *XsdGoPkgHasElem_ValidFromsequenceTxsdCredentialTypeSequenceEffectiveDateEffectiveDatesequenceCredentialTypeschema_ValidFrom_TFlexibleDatesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ValidFromsequenceTxsdCredentialTypeSequenceEffectiveDateEffectiveDatesequenceCredentialTypeschema_ValidFrom_TFlexibleDatesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ValidFrom.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ValidTosequenceTxsdCredentialTypeSequenceEffectiveDateEffectiveDatesequenceCredentialTypeschema_ValidTo_TFlexibleDatesType_ struct {
	ValidTo *TFlexibleDatesType `xml:"ValidTo"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ValidTosequenceTxsdCredentialTypeSequenceEffectiveDateEffectiveDatesequenceCredentialTypeschema_ValidTo_TFlexibleDatesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ValidTosequenceTxsdCredentialTypeSequenceEffectiveDateEffectiveDatesequenceCredentialTypeschema_ValidTo_TFlexibleDatesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ValidTosequenceTxsdCredentialTypeSequenceEffectiveDateEffectiveDatesequenceCredentialTypeschema_ValidTo_TFlexibleDatesType_ instance.
func (me *XsdGoPkgHasElem_ValidTosequenceTxsdCredentialTypeSequenceEffectiveDateEffectiveDatesequenceCredentialTypeschema_ValidTo_TFlexibleDatesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ValidTosequenceTxsdCredentialTypeSequenceEffectiveDateEffectiveDatesequenceCredentialTypeschema_ValidTo_TFlexibleDatesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ValidTo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FirstIssuedDatesequenceTxsdCredentialTypeSequenceEffectiveDateEffectiveDatesequenceCredentialTypeschema_FirstIssuedDate_TFlexibleDatesType_ struct {
	FirstIssuedDate *TFlexibleDatesType `xml:"FirstIssuedDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FirstIssuedDatesequenceTxsdCredentialTypeSequenceEffectiveDateEffectiveDatesequenceCredentialTypeschema_FirstIssuedDate_TFlexibleDatesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FirstIssuedDatesequenceTxsdCredentialTypeSequenceEffectiveDateEffectiveDatesequenceCredentialTypeschema_FirstIssuedDate_TFlexibleDatesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FirstIssuedDatesequenceTxsdCredentialTypeSequenceEffectiveDateEffectiveDatesequenceCredentialTypeschema_FirstIssuedDate_TFlexibleDatesType_ instance.
func (me *XsdGoPkgHasElem_FirstIssuedDatesequenceTxsdCredentialTypeSequenceEffectiveDateEffectiveDatesequenceCredentialTypeschema_FirstIssuedDate_TFlexibleDatesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FirstIssuedDatesequenceTxsdCredentialTypeSequenceEffectiveDateEffectiveDatesequenceCredentialTypeschema_FirstIssuedDate_TFlexibleDatesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FirstIssuedDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCredentialTypeSequenceEffectiveDate struct {
	XsdGoPkgHasElem_ValidFromsequenceTxsdCredentialTypeSequenceEffectiveDateEffectiveDatesequenceCredentialTypeschema_ValidFrom_TFlexibleDatesType_

	XsdGoPkgHasElem_ValidTosequenceTxsdCredentialTypeSequenceEffectiveDateEffectiveDatesequenceCredentialTypeschema_ValidTo_TFlexibleDatesType_

	XsdGoPkgHasElem_FirstIssuedDatesequenceTxsdCredentialTypeSequenceEffectiveDateEffectiveDatesequenceCredentialTypeschema_FirstIssuedDate_TFlexibleDatesType_
}

//	If the WalkHandlers.TxsdCredentialTypeSequenceEffectiveDate function is not nil (ie. was set by outside code), calls it with this TxsdCredentialTypeSequenceEffectiveDate instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdCredentialTypeSequenceEffectiveDate instance.
func (me *TxsdCredentialTypeSequenceEffectiveDate) Walk() (err error) {
	if fn := WalkHandlers.TxsdCredentialTypeSequenceEffectiveDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ValidFromsequenceTxsdCredentialTypeSequenceEffectiveDateEffectiveDatesequenceCredentialTypeschema_ValidFrom_TFlexibleDatesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ValidTosequenceTxsdCredentialTypeSequenceEffectiveDateEffectiveDatesequenceCredentialTypeschema_ValidTo_TFlexibleDatesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FirstIssuedDatesequenceTxsdCredentialTypeSequenceEffectiveDateEffectiveDatesequenceCredentialTypeschema_FirstIssuedDate_TFlexibleDatesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EffectiveDatesequenceCredentialTypeschema_EffectiveDate_TxsdCredentialTypeSequenceEffectiveDate_ struct {
	EffectiveDate *TxsdCredentialTypeSequenceEffectiveDate `xml:"EffectiveDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EffectiveDatesequenceCredentialTypeschema_EffectiveDate_TxsdCredentialTypeSequenceEffectiveDate_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EffectiveDatesequenceCredentialTypeschema_EffectiveDate_TxsdCredentialTypeSequenceEffectiveDate_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_EffectiveDatesequenceCredentialTypeschema_EffectiveDate_TxsdCredentialTypeSequenceEffectiveDate_ instance.
func (me *XsdGoPkgHasElem_EffectiveDatesequenceCredentialTypeschema_EffectiveDate_TxsdCredentialTypeSequenceEffectiveDate_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EffectiveDatesequenceCredentialTypeschema_EffectiveDate_TxsdCredentialTypeSequenceEffectiveDate_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EffectiveDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TCredentialType struct {
	//	The name of license or certification.
	XsdGoPkgHasElem_NamesequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Name_XsdtString_

	//	An identifer for the credential.
	XsdGoPkgHasElem_IdsequenceCredentialTypeschema_Id_XsdtString_

	XsdGoPkgHasElem_IssuingAuthoritysequenceCredentialTypeschema_IssuingAuthority_TIssuingAuthorityType_

	XsdGoPkgHasElem_DescriptionsequenceAchievementTypeschema_Description_XsdtString_

	XsdGoPkgHasElem_EffectiveDatesequenceCredentialTypeschema_EffectiveDate_TxsdCredentialTypeSequenceEffectiveDate_
}

//	If the WalkHandlers.TCredentialType function is not nil (ie. was set by outside code), calls it with this TCredentialType instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TCredentialType instance.
func (me *TCredentialType) Walk() (err error) {
	if fn := WalkHandlers.TCredentialType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_EffectiveDatesequenceCredentialTypeschema_EffectiveDate_TxsdCredentialTypeSequenceEffectiveDate_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_NamesequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Name_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_IdsequenceCredentialTypeschema_Id_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_IssuingAuthoritysequenceCredentialTypeschema_IssuingAuthority_TIssuingAuthorityType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DescriptionsequenceAchievementTypeschema_Description_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_LicenseOrCertification struct {
	LicenseOrCertification *TCredentialType `xml:"LicenseOrCertification"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LicenseOrCertification function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LicenseOrCertification instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LicenseOrCertification instance.
func (me *XsdGoPkgHasElem_LicenseOrCertification) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LicenseOrCertification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LicenseOrCertification.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LicenseOrCertification struct {
	LicenseOrCertifications []*TCredentialType `xml:"LicenseOrCertification"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LicenseOrCertification function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LicenseOrCertification instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LicenseOrCertification instance.
func (me *XsdGoPkgHasElems_LicenseOrCertification) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LicenseOrCertification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.LicenseOrCertifications {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdLicensesAndCertifications struct {
	XsdGoPkgHasElems_LicenseOrCertification
}

//	If the WalkHandlers.TxsdLicensesAndCertifications function is not nil (ie. was set by outside code), calls it with this TxsdLicensesAndCertifications instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdLicensesAndCertifications instance.
func (me *TxsdLicensesAndCertifications) Walk() (err error) {
	if fn := WalkHandlers.TxsdLicensesAndCertifications; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_LicenseOrCertification.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_LicensesAndCertifications struct {
	LicensesAndCertifications *TxsdLicensesAndCertifications `xml:"LicensesAndCertifications"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LicensesAndCertifications function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LicensesAndCertifications instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LicensesAndCertifications instance.
func (me *XsdGoPkgHasElem_LicensesAndCertifications) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LicensesAndCertifications; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LicensesAndCertifications.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LicensesAndCertifications struct {
	LicensesAndCertificationses []*TxsdLicensesAndCertifications `xml:"LicensesAndCertifications"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LicensesAndCertifications function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LicensesAndCertifications instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LicensesAndCertifications instance.
func (me *XsdGoPkgHasElems_LicensesAndCertifications) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LicensesAndCertifications; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.LicensesAndCertificationses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Location struct {
	Locations []TcontactMethodLocationPatternExtensionType `xml:"Location"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Location function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Location instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Location instance.
func (me *XsdGoPkgHasElems_Location) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Location; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_StartRanksequenceRankAchievedTypeschema_StartRank_XsdtString_ struct {
	StartRank xsdt.String `xml:"StartRank"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_StartRanksequenceRankAchievedTypeschema_StartRank_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_StartRanksequenceRankAchievedTypeschema_StartRank_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_StartRanksequenceRankAchievedTypeschema_StartRank_XsdtString_ instance.
func (me *XsdGoPkgHasElem_StartRanksequenceRankAchievedTypeschema_StartRank_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_StartRanksequenceRankAchievedTypeschema_StartRank_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CurrentOrEndRanksequenceRankAchievedTypeschema_CurrentOrEndRank_XsdtString_ struct {
	CurrentOrEndRank xsdt.String `xml:"CurrentOrEndRank"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CurrentOrEndRanksequenceRankAchievedTypeschema_CurrentOrEndRank_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CurrentOrEndRanksequenceRankAchievedTypeschema_CurrentOrEndRank_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CurrentOrEndRanksequenceRankAchievedTypeschema_CurrentOrEndRank_XsdtString_ instance.
func (me *XsdGoPkgHasElem_CurrentOrEndRanksequenceRankAchievedTypeschema_CurrentOrEndRank_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CurrentOrEndRanksequenceRankAchievedTypeschema_CurrentOrEndRank_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TRankAchievedType struct {
	XsdGoPkgHasElem_StartRanksequenceRankAchievedTypeschema_StartRank_XsdtString_

	XsdGoPkgHasElem_CurrentOrEndRanksequenceRankAchievedTypeschema_CurrentOrEndRank_XsdtString_
}

//	If the WalkHandlers.TRankAchievedType function is not nil (ie. was set by outside code), calls it with this TRankAchievedType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TRankAchievedType instance.
func (me *TRankAchievedType) Walk() (err error) {
	if fn := WalkHandlers.TRankAchievedType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_StartRanksequenceRankAchievedTypeschema_StartRank_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CurrentOrEndRanksequenceRankAchievedTypeschema_CurrentOrEndRank_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RankAchievedsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_RankAchieved_TRankAchievedType_ struct {
	RankAchieved *TRankAchievedType `xml:"RankAchieved"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RankAchievedsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_RankAchieved_TRankAchievedType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RankAchievedsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_RankAchieved_TRankAchievedType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RankAchievedsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_RankAchieved_TRankAchievedType_ instance.
func (me *XsdGoPkgHasElem_RankAchievedsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_RankAchieved_TRankAchievedType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RankAchievedsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_RankAchieved_TRankAchievedType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RankAchieved.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TDatesOfServiceType struct {
	XsdGoPkgHasElem_StartDatesequenceAssociationTypeschema_StartDate_TFlexibleDatesType_

	XsdGoPkgHasElem_EndDatesequenceAssociationTypeschema_EndDate_TFlexibleDatesType_
}

//	If the WalkHandlers.TDatesOfServiceType function is not nil (ie. was set by outside code), calls it with this TDatesOfServiceType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TDatesOfServiceType instance.
func (me *TDatesOfServiceType) Walk() (err error) {
	if fn := WalkHandlers.TDatesOfServiceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_StartDatesequenceAssociationTypeschema_StartDate_TFlexibleDatesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EndDatesequenceAssociationTypeschema_EndDate_TFlexibleDatesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DatesOfServicesequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DatesOfService_TDatesOfServiceType_ struct {
	DatesOfService *TDatesOfServiceType `xml:"DatesOfService"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DatesOfServicesequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DatesOfService_TDatesOfServiceType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DatesOfServicesequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DatesOfService_TDatesOfServiceType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DatesOfServicesequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DatesOfService_TDatesOfServiceType_ instance.
func (me *XsdGoPkgHasElem_DatesOfServicesequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DatesOfService_TDatesOfServiceType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DatesOfServicesequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DatesOfService_TDatesOfServiceType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DatesOfService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RecognitionAchievedsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_RecognitionAchieved_XsdtString_ struct {
	RecognitionAchieveds []xsdt.String `xml:"RecognitionAchieved"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RecognitionAchievedsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_RecognitionAchieved_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RecognitionAchievedsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_RecognitionAchieved_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RecognitionAchievedsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_RecognitionAchieved_XsdtString_ instance.
func (me *XsdGoPkgHasElems_RecognitionAchievedsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_RecognitionAchieved_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RecognitionAchievedsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_RecognitionAchieved_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Branch_XsdtString_ struct {
	Branch xsdt.String `xml:"branch,attr,omitempty"`
}

type XsdGoPkgHasElem_UnitOrDivisionsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_UnitOrDivision_XsdtString_ struct {
	UnitOrDivision xsdt.String `xml:"UnitOrDivision"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_UnitOrDivisionsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_UnitOrDivision_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_UnitOrDivisionsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_UnitOrDivision_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_UnitOrDivisionsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_UnitOrDivision_XsdtString_ instance.
func (me *XsdGoPkgHasElem_UnitOrDivisionsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_UnitOrDivision_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_UnitOrDivisionsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_UnitOrDivision_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CampaignsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_Campaign_XsdtString_ struct {
	Campaigns []xsdt.String `xml:"Campaign"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CampaignsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_Campaign_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CampaignsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_Campaign_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CampaignsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_Campaign_XsdtString_ instance.
func (me *XsdGoPkgHasElems_CampaignsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_Campaign_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CampaignsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_Campaign_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AreaOfExpertisesequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_AreaOfExpertise_XsdtString_ struct {
	AreaOfExpertises []xsdt.String `xml:"AreaOfExpertise"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AreaOfExpertisesequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_AreaOfExpertise_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AreaOfExpertisesequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_AreaOfExpertise_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AreaOfExpertisesequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_AreaOfExpertise_XsdtString_ instance.
func (me *XsdGoPkgHasElems_AreaOfExpertisesequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_AreaOfExpertise_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AreaOfExpertisesequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_AreaOfExpertise_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DisciplinaryActionsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DisciplinaryAction_XsdtString_ struct {
	DisciplinaryActions []xsdt.String `xml:"DisciplinaryAction"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DisciplinaryActionsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DisciplinaryAction_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DisciplinaryActionsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DisciplinaryAction_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DisciplinaryActionsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DisciplinaryAction_XsdtString_ instance.
func (me *XsdGoPkgHasElems_DisciplinaryActionsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DisciplinaryAction_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DisciplinaryActionsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DisciplinaryAction_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DischargeStatussequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DischargeStatus_XsdtString_ struct {
	DischargeStatus xsdt.String `xml:"DischargeStatus"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DischargeStatussequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DischargeStatus_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DischargeStatussequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DischargeStatus_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DischargeStatussequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DischargeStatus_XsdtString_ instance.
func (me *XsdGoPkgHasElem_DischargeStatussequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DischargeStatus_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DischargeStatussequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DischargeStatus_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdMilitaryHistoryTypeSequenceServiceDetail struct {
	XsdGoPkgHasElems_AreaOfExpertisesequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_AreaOfExpertise_XsdtString_

	XsdGoPkgHasElems_DisciplinaryActionsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DisciplinaryAction_XsdtString_

	XsdGoPkgHasElem_DischargeStatussequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DischargeStatus_XsdtString_

	XsdGoPkgHasElem_UnitOrDivisionsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_UnitOrDivision_XsdtString_

	XsdGoPkgHasElems_CampaignsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_Campaign_XsdtString_

	XsdGoPkgHasElems_RecognitionAchievedsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_RecognitionAchieved_XsdtString_

	XsdGoPkgHasElem_UserArea

	XsdGoPkgHasAttr_Branch_XsdtString_

	XsdGoPkgHasElem_RankAchievedsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_RankAchieved_TRankAchievedType_

	XsdGoPkgHasElem_DatesOfServicesequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DatesOfService_TDatesOfServiceType_
}

//	If the WalkHandlers.TxsdMilitaryHistoryTypeSequenceServiceDetail function is not nil (ie. was set by outside code), calls it with this TxsdMilitaryHistoryTypeSequenceServiceDetail instance as the single argument. Then calls the Walk() method on 9/10 embed(s) and 0/0 field(s) belonging to this TxsdMilitaryHistoryTypeSequenceServiceDetail instance.
func (me *TxsdMilitaryHistoryTypeSequenceServiceDetail) Walk() (err error) {
	if fn := WalkHandlers.TxsdMilitaryHistoryTypeSequenceServiceDetail; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_RankAchievedsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_RankAchieved_TRankAchievedType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DatesOfServicesequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DatesOfService_TDatesOfServiceType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RecognitionAchievedsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_RecognitionAchieved_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_UserArea.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_UnitOrDivisionsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_UnitOrDivision_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_CampaignsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_Campaign_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AreaOfExpertisesequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_AreaOfExpertise_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_DisciplinaryActionsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DisciplinaryAction_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DischargeStatussequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DischargeStatus_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ServiceDetailsequenceMilitaryHistoryTypeschema_ServiceDetail_TxsdMilitaryHistoryTypeSequenceServiceDetail_ struct {
	ServiceDetails []*TxsdMilitaryHistoryTypeSequenceServiceDetail `xml:"ServiceDetail"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ServiceDetailsequenceMilitaryHistoryTypeschema_ServiceDetail_TxsdMilitaryHistoryTypeSequenceServiceDetail_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ServiceDetailsequenceMilitaryHistoryTypeschema_ServiceDetail_TxsdMilitaryHistoryTypeSequenceServiceDetail_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ServiceDetailsequenceMilitaryHistoryTypeschema_ServiceDetail_TxsdMilitaryHistoryTypeSequenceServiceDetail_ instance.
func (me *XsdGoPkgHasElems_ServiceDetailsequenceMilitaryHistoryTypeschema_ServiceDetail_TxsdMilitaryHistoryTypeSequenceServiceDetail_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ServiceDetailsequenceMilitaryHistoryTypeschema_ServiceDetail_TxsdMilitaryHistoryTypeSequenceServiceDetail_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ServiceDetails {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ServiceStatussequenceMilitaryHistoryTypeschema_ServiceStatus_XsdtString_ struct {
	ServiceStatus xsdt.String `xml:"ServiceStatus"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ServiceStatussequenceMilitaryHistoryTypeschema_ServiceStatus_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ServiceStatussequenceMilitaryHistoryTypeschema_ServiceStatus_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ServiceStatussequenceMilitaryHistoryTypeschema_ServiceStatus_XsdtString_ instance.
func (me *XsdGoPkgHasElem_ServiceStatussequenceMilitaryHistoryTypeschema_ServiceStatus_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ServiceStatussequenceMilitaryHistoryTypeschema_ServiceStatus_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CountryServedsequenceMilitaryHistoryTypeschema_CountryServed_TCountryCodeType_ struct {
	CountryServed TCountryCodeType `xml:"CountryServed"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CountryServedsequenceMilitaryHistoryTypeschema_CountryServed_TCountryCodeType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CountryServedsequenceMilitaryHistoryTypeschema_CountryServed_TCountryCodeType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CountryServedsequenceMilitaryHistoryTypeschema_CountryServed_TCountryCodeType_ instance.
func (me *XsdGoPkgHasElem_CountryServedsequenceMilitaryHistoryTypeschema_CountryServed_TCountryCodeType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CountryServedsequenceMilitaryHistoryTypeschema_CountryServed_TCountryCodeType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ServiceNumbersequenceMilitaryHistoryTypeschema_ServiceNumber_TEntityIdType_ struct {
	ServiceNumber *TEntityIdType `xml:"ServiceNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ServiceNumbersequenceMilitaryHistoryTypeschema_ServiceNumber_TEntityIdType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ServiceNumbersequenceMilitaryHistoryTypeschema_ServiceNumber_TEntityIdType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ServiceNumbersequenceMilitaryHistoryTypeschema_ServiceNumber_TEntityIdType_ instance.
func (me *XsdGoPkgHasElem_ServiceNumbersequenceMilitaryHistoryTypeschema_ServiceNumber_TEntityIdType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ServiceNumbersequenceMilitaryHistoryTypeschema_ServiceNumber_TEntityIdType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ServiceNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TMilitaryHistoryType struct {
	XsdGoPkgHasElem_CountryServedsequenceMilitaryHistoryTypeschema_CountryServed_TCountryCodeType_

	XsdGoPkgHasElem_ServiceNumbersequenceMilitaryHistoryTypeschema_ServiceNumber_TEntityIdType_

	XsdGoPkgHasElems_ServiceDetailsequenceMilitaryHistoryTypeschema_ServiceDetail_TxsdMilitaryHistoryTypeSequenceServiceDetail_

	XsdGoPkgHasElem_ServiceStatussequenceMilitaryHistoryTypeschema_ServiceStatus_XsdtString_

	XsdGoPkgHasElem_CommentssequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Comments_XsdtString_

	XsdGoPkgHasElem_UserArea
}

//	If the WalkHandlers.TMilitaryHistoryType function is not nil (ie. was set by outside code), calls it with this TMilitaryHistoryType instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TMilitaryHistoryType instance.
func (me *TMilitaryHistoryType) Walk() (err error) {
	if fn := WalkHandlers.TMilitaryHistoryType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_CountryServedsequenceMilitaryHistoryTypeschema_CountryServed_TCountryCodeType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ServiceNumbersequenceMilitaryHistoryTypeschema_ServiceNumber_TEntityIdType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ServiceDetailsequenceMilitaryHistoryTypeschema_ServiceDetail_TxsdMilitaryHistoryTypeSequenceServiceDetail_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ServiceStatussequenceMilitaryHistoryTypeschema_ServiceStatus_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CommentssequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Comments_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_UserArea.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MilitaryHistory struct {
	MilitaryHistory *TMilitaryHistoryType `xml:"MilitaryHistory"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MilitaryHistory function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MilitaryHistory instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MilitaryHistory instance.
func (me *XsdGoPkgHasElem_MilitaryHistory) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MilitaryHistory; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MilitaryHistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MilitaryHistory struct {
	MilitaryHistories []*TMilitaryHistoryType `xml:"MilitaryHistory"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MilitaryHistory function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MilitaryHistory instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MilitaryHistory instance.
func (me *XsdGoPkgHasElems_MilitaryHistory) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MilitaryHistory; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MilitaryHistories {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Mobile struct {
	Mobiles []*TMobileTelcomNumberType `xml:"Mobile"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Mobile function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Mobile instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Mobile instance.
func (me *XsdGoPkgHasElems_Mobile) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Mobile; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Mobiles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_NationalNumber struct {
	NationalNumbers []xsdt.String `xml:"NationalNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NationalNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NationalNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NationalNumber instance.
func (me *XsdGoPkgHasElems_NationalNumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NationalNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TextResumesequenceNonXMLResumeTypeschema_TextResume_XsdtString_ struct {
	TextResume xsdt.String `xml:"TextResume"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TextResumesequenceNonXMLResumeTypeschema_TextResume_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TextResumesequenceNonXMLResumeTypeschema_TextResume_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TextResumesequenceNonXMLResumeTypeschema_TextResume_XsdtString_ instance.
func (me *XsdGoPkgHasElem_TextResumesequenceNonXMLResumeTypeschema_TextResume_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TextResumesequenceNonXMLResumeTypeschema_TextResume_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_LinkToResumesequenceNonXMLResumeTypeschema_LinkToResume_XsdtString_ struct {
	LinkToResume xsdt.String `xml:"LinkToResume"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LinkToResumesequenceNonXMLResumeTypeschema_LinkToResume_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LinkToResumesequenceNonXMLResumeTypeschema_LinkToResume_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_LinkToResumesequenceNonXMLResumeTypeschema_LinkToResume_XsdtString_ instance.
func (me *XsdGoPkgHasElem_LinkToResumesequenceNonXMLResumeTypeschema_LinkToResume_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LinkToResumesequenceNonXMLResumeTypeschema_LinkToResume_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	This type is officially deprecated in favor of the subsequently issued "SupportingMaterials" schema located in the CPO folder.  The prefix "Staffing" was added to the type name here so as to distinguish it.  No content models were changed here.
type XsdGoPkgHasAttr_Context_XsdtString_ struct {
	Context xsdt.String `xml:"context,attr,omitempty"`
}

type XsdGoPkgHasAttr_MimeType_XsdtString_ struct {
	MimeType xsdt.String `xml:"mimeType,attr,omitempty"`
}

type TxsdStaffingSupportingMaterialsTypeSequenceChoiceAttachmentReference struct {
	XsdGoPkgHasAttr_Context_XsdtString_

	XsdGoPkgHasAttr_MimeType_XsdtString_

	XsdtString
}

//	If the WalkHandlers.TxsdStaffingSupportingMaterialsTypeSequenceChoiceAttachmentReference function is not nil (ie. was set by outside code), calls it with this TxsdStaffingSupportingMaterialsTypeSequenceChoiceAttachmentReference instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdStaffingSupportingMaterialsTypeSequenceChoiceAttachmentReference instance.
func (me *TxsdStaffingSupportingMaterialsTypeSequenceChoiceAttachmentReference) Walk() (err error) {
	if fn := WalkHandlers.TxsdStaffingSupportingMaterialsTypeSequenceChoiceAttachmentReference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AttachmentReferencechoicesequenceStaffingSupportingMaterialsTypeschema_AttachmentReference_TxsdStaffingSupportingMaterialsTypeSequenceChoiceAttachmentReference_ struct {
	AttachmentReference *TxsdStaffingSupportingMaterialsTypeSequenceChoiceAttachmentReference `xml:"AttachmentReference"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AttachmentReferencechoicesequenceStaffingSupportingMaterialsTypeschema_AttachmentReference_TxsdStaffingSupportingMaterialsTypeSequenceChoiceAttachmentReference_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AttachmentReferencechoicesequenceStaffingSupportingMaterialsTypeschema_AttachmentReference_TxsdStaffingSupportingMaterialsTypeSequenceChoiceAttachmentReference_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AttachmentReferencechoicesequenceStaffingSupportingMaterialsTypeschema_AttachmentReference_TxsdStaffingSupportingMaterialsTypeSequenceChoiceAttachmentReference_ instance.
func (me *XsdGoPkgHasElem_AttachmentReferencechoicesequenceStaffingSupportingMaterialsTypeschema_AttachmentReference_TxsdStaffingSupportingMaterialsTypeSequenceChoiceAttachmentReference_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AttachmentReferencechoicesequenceStaffingSupportingMaterialsTypeschema_AttachmentReference_TxsdStaffingSupportingMaterialsTypeSequenceChoiceAttachmentReference_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AttachmentReference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TStaffingSupportingMaterialsType struct {
	XsdGoPkgHasElem_LinksequenceAssociationTypeschema_Link_TInternetWebAddressType_

	XsdGoPkgHasElem_AttachmentReferencechoicesequenceStaffingSupportingMaterialsTypeschema_AttachmentReference_TxsdStaffingSupportingMaterialsTypeSequenceChoiceAttachmentReference_

	XsdGoPkgHasElem_DescriptionsequenceAchievementTypeschema_Description_XsdtString_
}

//	If the WalkHandlers.TStaffingSupportingMaterialsType function is not nil (ie. was set by outside code), calls it with this TStaffingSupportingMaterialsType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TStaffingSupportingMaterialsType instance.
func (me *TStaffingSupportingMaterialsType) Walk() (err error) {
	if fn := WalkHandlers.TStaffingSupportingMaterialsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_DescriptionsequenceAchievementTypeschema_Description_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LinksequenceAssociationTypeschema_Link_TInternetWebAddressType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AttachmentReferencechoicesequenceStaffingSupportingMaterialsTypeschema_AttachmentReference_TxsdStaffingSupportingMaterialsTypeSequenceChoiceAttachmentReference_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SupportingMaterialssequenceNonXMLResumeTypeschema_SupportingMaterials_TStaffingSupportingMaterialsType_ struct {
	SupportingMaterialses []*TStaffingSupportingMaterialsType `xml:"SupportingMaterials"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SupportingMaterialssequenceNonXMLResumeTypeschema_SupportingMaterials_TStaffingSupportingMaterialsType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SupportingMaterialssequenceNonXMLResumeTypeschema_SupportingMaterials_TStaffingSupportingMaterialsType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SupportingMaterialssequenceNonXMLResumeTypeschema_SupportingMaterials_TStaffingSupportingMaterialsType_ instance.
func (me *XsdGoPkgHasElems_SupportingMaterialssequenceNonXMLResumeTypeschema_SupportingMaterials_TStaffingSupportingMaterialsType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SupportingMaterialssequenceNonXMLResumeTypeschema_SupportingMaterials_TStaffingSupportingMaterialsType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SupportingMaterialses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAnyDateTimeNkType xsdt.String

//	Since TAnyDateTimeNkType is just a simple String type, this merely sets the current value from the specified string.
func (me *TAnyDateTimeNkType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TAnyDateTimeNkType is just a simple String type, this merely returns the current string value.
func (me TAnyDateTimeNkType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TAnyDateTimeNkType's alias type xsdt.String.
func (me TAnyDateTimeNkType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	TAnyDateTimeNkType is an XSD union-type of several types. This is a simple type conversion to TLocalDateType, but keep in mind the actual value may or may not be a valid TLocalDateType value.
func (me TAnyDateTimeNkType) ToTLocalDateType() TLocalDateType { return TLocalDateType(me) }

//	TAnyDateTimeNkType is an XSD union-type of several types. This is a simple type conversion to TDateType, but keep in mind the actual value may or may not be a valid TDateType value.
func (me TAnyDateTimeNkType) ToTDateType() TDateType { return TDateType(me) }

//	TAnyDateTimeNkType is an XSD union-type of several types. This is a simple type conversion to TLocalDateTimeType, but keep in mind the actual value may or may not be a valid TLocalDateTimeType value.
func (me TAnyDateTimeNkType) ToTLocalDateTimeType() TLocalDateTimeType { return TLocalDateTimeType(me) }

//	TAnyDateTimeNkType is an XSD union-type of several types. This is a simple type conversion to TDateTimeType, but keep in mind the actual value may or may not be a valid TDateTimeType value.
func (me TAnyDateTimeNkType) ToTDateTimeType() TDateTimeType { return TDateTimeType(me) }

//	TAnyDateTimeNkType is an XSD union-type of several types. This is a simple type conversion to TNotKnownLiteral, but keep in mind the actual value may or may not be a valid TNotKnownLiteral value.
func (me TAnyDateTimeNkType) ToTNotKnownLiteral() TNotKnownLiteral { return TNotKnownLiteral(me) }

type XsdGoPkgHasElem_RevisionDatesequenceNonXMLResumeTypeschema_RevisionDate_TAnyDateTimeNkType_ struct {
	RevisionDate TAnyDateTimeNkType `xml:"RevisionDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RevisionDatesequenceNonXMLResumeTypeschema_RevisionDate_TAnyDateTimeNkType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RevisionDatesequenceNonXMLResumeTypeschema_RevisionDate_TAnyDateTimeNkType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_RevisionDatesequenceNonXMLResumeTypeschema_RevisionDate_TAnyDateTimeNkType_ instance.
func (me *XsdGoPkgHasElem_RevisionDatesequenceNonXMLResumeTypeschema_RevisionDate_TAnyDateTimeNkType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RevisionDatesequenceNonXMLResumeTypeschema_RevisionDate_TAnyDateTimeNkType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasGroup_Comments struct {
	XsdGoPkgHasElem_CommentssequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Comments_XsdtString_
}

//	If the WalkHandlers.XsdGoPkgHasGroup_Comments function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_Comments instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_Comments instance.
func (me *XsdGoPkgHasGroup_Comments) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasGroup_Comments; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_CommentssequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Comments_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TNonXMLResumeType struct {
	XsdGoPkgHasElem_TextResumesequenceNonXMLResumeTypeschema_TextResume_XsdtString_

	XsdGoPkgHasElem_LinkToResumesequenceNonXMLResumeTypeschema_LinkToResume_XsdtString_

	XsdGoPkgHasElems_SupportingMaterialssequenceNonXMLResumeTypeschema_SupportingMaterials_TStaffingSupportingMaterialsType_

	XsdGoPkgHasElem_RevisionDatesequenceNonXMLResumeTypeschema_RevisionDate_TAnyDateTimeNkType_

	XsdGoPkgHasGroup_Comments
}

//	If the WalkHandlers.TNonXMLResumeType function is not nil (ie. was set by outside code), calls it with this TNonXMLResumeType instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TNonXMLResumeType instance.
func (me *TNonXMLResumeType) Walk() (err error) {
	if fn := WalkHandlers.TNonXMLResumeType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_TextResumesequenceNonXMLResumeTypeschema_TextResume_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LinkToResumesequenceNonXMLResumeTypeschema_LinkToResume_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_SupportingMaterialssequenceNonXMLResumeTypeschema_SupportingMaterials_TStaffingSupportingMaterialsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RevisionDatesequenceNonXMLResumeTypeschema_RevisionDate_TAnyDateTimeNkType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasGroup_Comments.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_NonXMLResume struct {
	NonXMLResume *TNonXMLResumeType `xml:"NonXMLResume"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NonXMLResume function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NonXMLResume instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_NonXMLResume instance.
func (me *XsdGoPkgHasElem_NonXMLResume) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NonXMLResume; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.NonXMLResume.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_NonXMLResume struct {
	NonXMLResumes []*TNonXMLResumeType `xml:"NonXMLResume"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NonXMLResume function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NonXMLResume instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NonXMLResume instance.
func (me *XsdGoPkgHasElems_NonXMLResume) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NonXMLResume; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.NonXMLResumes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_NumericValue struct {
	NumericValues []*TxsdNumericValue `xml:"NumericValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NumericValue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NumericValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NumericValue instance.
func (me *XsdGoPkgHasElems_NumericValue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NumericValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.NumericValues {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Pager struct {
	Pagers []*TelcomNumberType `xml:"Pager"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Pager function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Pager instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Pager instance.
func (me *XsdGoPkgHasElems_Pager) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Pager; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Pagers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A patent has one or more applicants. An applicant is the person or corporate body that applies for the patent and intends to 'work' the invention (to manufacture or license the technology).  Under US law the applicants must be the inventor(s) except in exceptional circumstances.  On a resume or CV listing patents held or submitted, an individual might use the "Applicants" component when the patent is held or was filed with others ("co-applicants").
type XsdGoPkgHasElems_InventorNamesequenceTxsdPatentDescriptionTypeSequenceInventorsInventorssequencePatentDescriptionTypeschema_InventorName_XsdtString_ struct {
	InventorNames []xsdt.String `xml:"InventorName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InventorNamesequenceTxsdPatentDescriptionTypeSequenceInventorsInventorssequencePatentDescriptionTypeschema_InventorName_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InventorNamesequenceTxsdPatentDescriptionTypeSequenceInventorsInventorssequencePatentDescriptionTypeschema_InventorName_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InventorNamesequenceTxsdPatentDescriptionTypeSequenceInventorsInventorssequencePatentDescriptionTypeschema_InventorName_XsdtString_ instance.
func (me *XsdGoPkgHasElems_InventorNamesequenceTxsdPatentDescriptionTypeSequenceInventorsInventorssequencePatentDescriptionTypeschema_InventorName_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InventorNamesequenceTxsdPatentDescriptionTypeSequenceInventorsInventorssequencePatentDescriptionTypeschema_InventorName_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPatentDescriptionTypeSequenceInventors struct {
	XsdGoPkgHasElems_InventorNamesequenceTxsdPatentDescriptionTypeSequenceInventorsInventorssequencePatentDescriptionTypeschema_InventorName_XsdtString_
}

//	If the WalkHandlers.TxsdPatentDescriptionTypeSequenceInventors function is not nil (ie. was set by outside code), calls it with this TxsdPatentDescriptionTypeSequenceInventors instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdPatentDescriptionTypeSequenceInventors instance.
func (me *TxsdPatentDescriptionTypeSequenceInventors) Walk() (err error) {
	if fn := WalkHandlers.TxsdPatentDescriptionTypeSequenceInventors; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_InventorNamesequenceTxsdPatentDescriptionTypeSequenceInventorsInventorssequencePatentDescriptionTypeschema_InventorName_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_InventorssequencePatentDescriptionTypeschema_Inventors_TxsdPatentDescriptionTypeSequenceInventors_ struct {
	//	A patent has one or more applicants. An applicant is the person or corporate body that applies for the patent and intends to 'work' the invention (to manufacture or license the technology).  Under US law the applicants must be the inventor(s) except in exceptional circumstances.  On a resume or CV listing patents held or submitted, an individual might use the "Applicants" component when the patent is held or was filed with others ("co-applicants").
	Inventors *TxsdPatentDescriptionTypeSequenceInventors `xml:"Inventors"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InventorssequencePatentDescriptionTypeschema_Inventors_TxsdPatentDescriptionTypeSequenceInventors_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InventorssequencePatentDescriptionTypeschema_Inventors_TxsdPatentDescriptionTypeSequenceInventors_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_InventorssequencePatentDescriptionTypeschema_Inventors_TxsdPatentDescriptionTypeSequenceInventors_ instance.
func (me *XsdGoPkgHasElem_InventorssequencePatentDescriptionTypeschema_Inventors_TxsdPatentDescriptionTypeSequenceInventors_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InventorssequencePatentDescriptionTypeschema_Inventors_TxsdPatentDescriptionTypeSequenceInventors_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Inventors.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_IssuingAuthoritysequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_IssuingAuthority_TxsdPatentDescriptionTypeSequencePatentDetailSequenceIssuingAuthority_ struct {
	IssuingAuthority *TIssuingAuthorityType `xml:"IssuingAuthority"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IssuingAuthoritysequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_IssuingAuthority_TxsdPatentDescriptionTypeSequencePatentDetailSequenceIssuingAuthority_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IssuingAuthoritysequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_IssuingAuthority_TxsdPatentDescriptionTypeSequencePatentDetailSequenceIssuingAuthority_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_IssuingAuthoritysequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_IssuingAuthority_TxsdPatentDescriptionTypeSequencePatentDetailSequenceIssuingAuthority_ instance.
func (me *XsdGoPkgHasElem_IssuingAuthoritysequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_IssuingAuthority_TxsdPatentDescriptionTypeSequencePatentDetailSequenceIssuingAuthority_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IssuingAuthoritysequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_IssuingAuthority_TxsdPatentDescriptionTypeSequencePatentDetailSequenceIssuingAuthority_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.IssuingAuthority.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPatentStatusTypeTypes xsdt.String

//	Since TPatentStatusTypeTypes is just a simple String type, this merely sets the current value from the specified string.
func (me *TPatentStatusTypeTypes) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TPatentStatusTypeTypes is just a simple String type, this merely returns the current string value.
func (me TPatentStatusTypeTypes) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TPatentStatusTypeTypes's alias type xsdt.String.
func (me TPatentStatusTypeTypes) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TPatentStatusTypeTypes is "PatentIssued".
func (me TPatentStatusTypeTypes) IsPatentIssued() bool { return me.String() == "PatentIssued" }

//	Returns true if the value of this enumerated TPatentStatusTypeTypes is "PatentPending".
func (me TPatentStatusTypeTypes) IsPatentPending() bool { return me.String() == "PatentPending" }

//	Returns true if the value of this enumerated TPatentStatusTypeTypes is "PatentFiled".
func (me TPatentStatusTypeTypes) IsPatentFiled() bool { return me.String() == "PatentFiled" }

type TPatentStatusTypes xsdt.String

//	TPatentStatusTypes is an XSD union-type of several types. This is a simple type conversion to TPatentStatusTypeTypes, but keep in mind the actual value may or may not be a valid TPatentStatusTypeTypes value.
func (me TPatentStatusTypes) ToTPatentStatusTypeTypes() TPatentStatusTypeTypes {
	return TPatentStatusTypeTypes(me)
}

//	TPatentStatusTypes is an XSD union-type of several types. This is a simple type conversion to TxStringPatternExtensionType, but keep in mind the actual value may or may not be a valid TxStringPatternExtensionType value.
func (me TPatentStatusTypes) ToTxStringPatternExtensionType() TxStringPatternExtensionType {
	return TxStringPatternExtensionType(me)
}

//	Since TPatentStatusTypes is just a simple String type, this merely sets the current value from the specified string.
func (me *TPatentStatusTypes) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TPatentStatusTypes is just a simple String type, this merely returns the current string value.
func (me TPatentStatusTypes) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TPatentStatusTypes's alias type xsdt.String.
func (me TPatentStatusTypes) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElem_StatussequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Status_TPatentStatusTypes_ struct {
	Status TPatentStatusTypes `xml:"Status"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_StatussequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Status_TPatentStatusTypes_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_StatussequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Status_TPatentStatusTypes_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_StatussequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Status_TPatentStatusTypes_ instance.
func (me *XsdGoPkgHasElem_StatussequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Status_TPatentStatusTypes_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_StatussequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Status_TPatentStatusTypes_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DatesequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Date_TAnyDateTimeNkNaType_ struct {
	Date TAnyDateTimeNkNaType `xml:"Date"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DatesequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Date_TAnyDateTimeNkNaType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DatesequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Date_TAnyDateTimeNkNaType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DatesequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Date_TAnyDateTimeNkNaType_ instance.
func (me *XsdGoPkgHasElem_DatesequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Date_TAnyDateTimeNkNaType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DatesequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Date_TAnyDateTimeNkNaType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestone struct {
	XsdGoPkgHasElem_StatussequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Status_TPatentStatusTypes_

	XsdGoPkgHasElem_DatesequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Date_TAnyDateTimeNkNaType_

	XsdGoPkgHasElem_IdsequenceCredentialTypeschema_Id_XsdtString_
}

//	If the WalkHandlers.TxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestone function is not nil (ie. was set by outside code), calls it with this TxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestone instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestone instance.
func (me *TxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestone) Walk() (err error) {
	if fn := WalkHandlers.TxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestone; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_IdsequenceCredentialTypeschema_Id_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_StatussequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Status_TPatentStatusTypes_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DatesequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Date_TAnyDateTimeNkNaType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_PatentMilestone_TxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestone_ struct {
	PatentMilestones []*TxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestone `xml:"PatentMilestone"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_PatentMilestone_TxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestone_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_PatentMilestone_TxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestone_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_PatentMilestone_TxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestone_ instance.
func (me *XsdGoPkgHasElems_PatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_PatentMilestone_TxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestone_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_PatentMilestone_TxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestone_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PatentMilestones {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPatentDescriptionTypeSequencePatentDetail struct {
	XsdGoPkgHasElem_IssuingAuthoritysequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_IssuingAuthority_TxsdPatentDescriptionTypeSequencePatentDetailSequenceIssuingAuthority_

	XsdGoPkgHasElems_PatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_PatentMilestone_TxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestone_
}

//	If the WalkHandlers.TxsdPatentDescriptionTypeSequencePatentDetail function is not nil (ie. was set by outside code), calls it with this TxsdPatentDescriptionTypeSequencePatentDetail instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdPatentDescriptionTypeSequencePatentDetail instance.
func (me *TxsdPatentDescriptionTypeSequencePatentDetail) Walk() (err error) {
	if fn := WalkHandlers.TxsdPatentDescriptionTypeSequencePatentDetail; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_IssuingAuthoritysequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_IssuingAuthority_TxsdPatentDescriptionTypeSequencePatentDetailSequenceIssuingAuthority_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_PatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_PatentMilestone_TxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestone_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PatentDetailsequencePatentDescriptionTypeschema_PatentDetail_TxsdPatentDescriptionTypeSequencePatentDetail_ struct {
	PatentDetails []*TxsdPatentDescriptionTypeSequencePatentDetail `xml:"PatentDetail"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PatentDetailsequencePatentDescriptionTypeschema_PatentDetail_TxsdPatentDescriptionTypeSequencePatentDetail_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PatentDetailsequencePatentDescriptionTypeschema_PatentDetail_TxsdPatentDescriptionTypeSequencePatentDetail_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PatentDetailsequencePatentDescriptionTypeschema_PatentDetail_TxsdPatentDescriptionTypeSequencePatentDetail_ instance.
func (me *XsdGoPkgHasElems_PatentDetailsequencePatentDescriptionTypeschema_PatentDetail_TxsdPatentDescriptionTypeSequencePatentDetail_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PatentDetailsequencePatentDescriptionTypeschema_PatentDetail_TxsdPatentDescriptionTypeSequencePatentDetail_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PatentDetails {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PatentTitlesequencePatentDescriptionTypeschema_PatentTitle_XsdtString_ struct {
	PatentTitle xsdt.String `xml:"PatentTitle"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PatentTitlesequencePatentDescriptionTypeschema_PatentTitle_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PatentTitlesequencePatentDescriptionTypeschema_PatentTitle_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PatentTitlesequencePatentDescriptionTypeschema_PatentTitle_XsdtString_ instance.
func (me *XsdGoPkgHasElem_PatentTitlesequencePatentDescriptionTypeschema_PatentTitle_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PatentTitlesequencePatentDescriptionTypeschema_PatentTitle_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPatentDescriptionType struct {
	XsdGoPkgHasElems_PatentDetailsequencePatentDescriptionTypeschema_PatentDetail_TxsdPatentDescriptionTypeSequencePatentDetail_

	XsdGoPkgHasElem_LinksequenceAssociationTypeschema_Link_TInternetWebAddressType_

	XsdGoPkgHasElem_PatentTitlesequencePatentDescriptionTypeschema_PatentTitle_XsdtString_

	XsdGoPkgHasElem_DescriptionsequenceAchievementTypeschema_Description_XsdtString_

	//	A patent has one or more applicants. An applicant is the person or corporate body that applies for the patent and intends to 'work' the invention (to manufacture or license the technology).  Under US law the applicants must be the inventor(s) except in exceptional circumstances.  On a resume or CV listing patents held or submitted, an individual might use the "Applicants" component when the patent is held or was filed with others ("co-applicants").
	XsdGoPkgHasElem_InventorssequencePatentDescriptionTypeschema_Inventors_TxsdPatentDescriptionTypeSequenceInventors_
}

//	If the WalkHandlers.TPatentDescriptionType function is not nil (ie. was set by outside code), calls it with this TPatentDescriptionType instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TPatentDescriptionType instance.
func (me *TPatentDescriptionType) Walk() (err error) {
	if fn := WalkHandlers.TPatentDescriptionType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_InventorssequencePatentDescriptionTypeschema_Inventors_TxsdPatentDescriptionTypeSequenceInventors_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_PatentDetailsequencePatentDescriptionTypeschema_PatentDetail_TxsdPatentDescriptionTypeSequencePatentDetail_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LinksequenceAssociationTypeschema_Link_TInternetWebAddressType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PatentTitlesequencePatentDescriptionTypeschema_PatentTitle_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DescriptionsequenceAchievementTypeschema_Description_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PatentsequencePatentHistoryTypeschema_Patent_TPatentDescriptionType_ struct {
	Patents []*TPatentDescriptionType `xml:"Patent"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PatentsequencePatentHistoryTypeschema_Patent_TPatentDescriptionType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PatentsequencePatentHistoryTypeschema_Patent_TPatentDescriptionType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PatentsequencePatentHistoryTypeschema_Patent_TPatentDescriptionType_ instance.
func (me *XsdGoPkgHasElems_PatentsequencePatentHistoryTypeschema_Patent_TPatentDescriptionType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PatentsequencePatentHistoryTypeschema_Patent_TPatentDescriptionType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Patents {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPatentHistoryType struct {
	XsdGoPkgHasElems_PatentsequencePatentHistoryTypeschema_Patent_TPatentDescriptionType_
}

//	If the WalkHandlers.TPatentHistoryType function is not nil (ie. was set by outside code), calls it with this TPatentHistoryType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TPatentHistoryType instance.
func (me *TPatentHistoryType) Walk() (err error) {
	if fn := WalkHandlers.TPatentHistoryType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_PatentsequencePatentHistoryTypeschema_Patent_TPatentDescriptionType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PatentHistory struct {
	PatentHistory *TPatentHistoryType `xml:"PatentHistory"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PatentHistory function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PatentHistory instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PatentHistory instance.
func (me *XsdGoPkgHasElem_PatentHistory) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PatentHistory; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PatentHistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PatentHistory struct {
	PatentHistories []*TPatentHistoryType `xml:"PatentHistory"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PatentHistory function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PatentHistory instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PatentHistory instance.
func (me *XsdGoPkgHasElems_PatentHistory) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PatentHistory; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PatentHistories {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PersonName struct {
	PersonNames []*TPersonNameType `xml:"PersonName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PersonName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PersonName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PersonName instance.
func (me *XsdGoPkgHasElems_PersonName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PersonName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PersonNames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PostalAddress struct {
	PostalAddresses []*TPostalAddressType `xml:"PostalAddress"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PostalAddress function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PostalAddress instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PostalAddress instance.
func (me *XsdGoPkgHasElems_PostalAddress) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PostalAddress; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PostalAddresses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	This is used in the context of a resume or CV to list articles, books, or other publications authored or co-authored by an individual.
type TPublicationTypeTypes xsdt.String

//	Since TPublicationTypeTypes is just a simple String type, this merely sets the current value from the specified string.
func (me *TPublicationTypeTypes) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TPublicationTypeTypes is just a simple String type, this merely returns the current string value.
func (me TPublicationTypeTypes) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TPublicationTypeTypes's alias type xsdt.String.
func (me TPublicationTypeTypes) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TPublicationTypeTypes is "Article".
func (me TPublicationTypeTypes) IsArticle() bool { return me.String() == "Article" }

//	Returns true if the value of this enumerated TPublicationTypeTypes is "Book".
func (me TPublicationTypeTypes) IsBook() bool { return me.String() == "Book" }

//	Returns true if the value of this enumerated TPublicationTypeTypes is "Conference".
func (me TPublicationTypeTypes) IsConference() bool { return me.String() == "Conference" }

//	Returns true if the value of this enumerated TPublicationTypeTypes is "Other".
func (me TPublicationTypeTypes) IsOther() bool { return me.String() == "Other" }

type TPublicationTypes xsdt.String

//	TPublicationTypes is an XSD union-type of several types. This is a simple type conversion to TPublicationTypeTypes, but keep in mind the actual value may or may not be a valid TPublicationTypeTypes value.
func (me TPublicationTypes) ToTPublicationTypeTypes() TPublicationTypeTypes {
	return TPublicationTypeTypes(me)
}

//	TPublicationTypes is an XSD union-type of several types. This is a simple type conversion to TxStringPatternExtensionType, but keep in mind the actual value may or may not be a valid TxStringPatternExtensionType value.
func (me TPublicationTypes) ToTxStringPatternExtensionType() TxStringPatternExtensionType {
	return TxStringPatternExtensionType(me)
}

//	Since TPublicationTypes is just a simple String type, this merely sets the current value from the specified string.
func (me *TPublicationTypes) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TPublicationTypes is just a simple String type, this merely returns the current string value.
func (me TPublicationTypes) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TPublicationTypes's alias type xsdt.String.
func (me TPublicationTypes) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_Type_TPublicationTypes_ struct {
	Type TPublicationTypes `xml:"type,attr,omitempty"`
}

type TxsdPublicationHistoryTypeSequenceFormattedPublicationDescription struct {
	XsdtString

	XsdGoPkgHasAttr_Type_TPublicationTypes_
}

//	If the WalkHandlers.TxsdPublicationHistoryTypeSequenceFormattedPublicationDescription function is not nil (ie. was set by outside code), calls it with this TxsdPublicationHistoryTypeSequenceFormattedPublicationDescription instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdPublicationHistoryTypeSequenceFormattedPublicationDescription instance.
func (me *TxsdPublicationHistoryTypeSequenceFormattedPublicationDescription) Walk() (err error) {
	if fn := WalkHandlers.TxsdPublicationHistoryTypeSequenceFormattedPublicationDescription; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FormattedPublicationDescriptionsequencePublicationHistoryTypeschema_FormattedPublicationDescription_TxsdPublicationHistoryTypeSequenceFormattedPublicationDescription_ struct {
	FormattedPublicationDescriptions []*TxsdPublicationHistoryTypeSequenceFormattedPublicationDescription `xml:"FormattedPublicationDescription"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FormattedPublicationDescriptionsequencePublicationHistoryTypeschema_FormattedPublicationDescription_TxsdPublicationHistoryTypeSequenceFormattedPublicationDescription_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FormattedPublicationDescriptionsequencePublicationHistoryTypeschema_FormattedPublicationDescription_TxsdPublicationHistoryTypeSequenceFormattedPublicationDescription_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FormattedPublicationDescriptionsequencePublicationHistoryTypeschema_FormattedPublicationDescription_TxsdPublicationHistoryTypeSequenceFormattedPublicationDescription_ instance.
func (me *XsdGoPkgHasElems_FormattedPublicationDescriptionsequencePublicationHistoryTypeschema_FormattedPublicationDescription_TxsdPublicationHistoryTypeSequenceFormattedPublicationDescription_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FormattedPublicationDescriptionsequencePublicationHistoryTypeschema_FormattedPublicationDescription_TxsdPublicationHistoryTypeSequenceFormattedPublicationDescription_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FormattedPublicationDescriptions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Contains bibliographic information for an article published in a journal or serial.
type XsdGoPkgHasElem_VolumesequenceextensioncomplexContentArticleTypeschema_Volume_XsdtString_ struct {
	Volume xsdt.String `xml:"Volume"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_VolumesequenceextensioncomplexContentArticleTypeschema_Volume_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_VolumesequenceextensioncomplexContentArticleTypeschema_Volume_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_VolumesequenceextensioncomplexContentArticleTypeschema_Volume_XsdtString_ instance.
func (me *XsdGoPkgHasElem_VolumesequenceextensioncomplexContentArticleTypeschema_Volume_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_VolumesequenceextensioncomplexContentArticleTypeschema_Volume_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_IssuesequenceextensioncomplexContentArticleTypeschema_Issue_XsdtString_ struct {
	Issue xsdt.String `xml:"Issue"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IssuesequenceextensioncomplexContentArticleTypeschema_Issue_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IssuesequenceextensioncomplexContentArticleTypeschema_Issue_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_IssuesequenceextensioncomplexContentArticleTypeschema_Issue_XsdtString_ instance.
func (me *XsdGoPkgHasElem_IssuesequenceextensioncomplexContentArticleTypeschema_Issue_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IssuesequenceextensioncomplexContentArticleTypeschema_Issue_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PageNumbersequenceextensioncomplexContentArticleTypeschema_PageNumber_XsdtString_ struct {
	PageNumber xsdt.String `xml:"PageNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PageNumbersequenceextensioncomplexContentArticleTypeschema_PageNumber_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PageNumbersequenceextensioncomplexContentArticleTypeschema_PageNumber_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PageNumbersequenceextensioncomplexContentArticleTypeschema_PageNumber_XsdtString_ instance.
func (me *XsdGoPkgHasElem_PageNumbersequenceextensioncomplexContentArticleTypeschema_PageNumber_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PageNumbersequenceextensioncomplexContentArticleTypeschema_PageNumber_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PublicationLanguagesequenceextensioncomplexContentArticleTypeschema_PublicationLanguage_TLanguageCodeType_ struct {
	PublicationLanguage TLanguageCodeType `xml:"PublicationLanguage"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PublicationLanguagesequenceextensioncomplexContentArticleTypeschema_PublicationLanguage_TLanguageCodeType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PublicationLanguagesequenceextensioncomplexContentArticleTypeschema_PublicationLanguage_TLanguageCodeType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PublicationLanguagesequenceextensioncomplexContentArticleTypeschema_PublicationLanguage_TLanguageCodeType_ instance.
func (me *XsdGoPkgHasElem_PublicationLanguagesequenceextensioncomplexContentArticleTypeschema_PublicationLanguage_TLanguageCodeType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PublicationLanguagesequenceextensioncomplexContentArticleTypeschema_PublicationLanguage_TLanguageCodeType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TRoleType xsdt.String

//	Since TRoleType is just a simple String type, this merely returns the current string value.
func (me TRoleType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TRoleType's alias type xsdt.String.
func (me TRoleType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TRoleType is "author".
func (me TRoleType) IsAuthor() bool { return me.String() == "author" }

//	Returns true if the value of this enumerated TRoleType is "editor".
func (me TRoleType) IsEditor() bool { return me.String() == "editor" }

//	Returns true if the value of this enumerated TRoleType is "illustrator".
func (me TRoleType) IsIllustrator() bool { return me.String() == "illustrator" }

//	Returns true if the value of this enumerated TRoleType is "contributor".
func (me TRoleType) IsContributor() bool { return me.String() == "contributor" }

//	Since TRoleType is just a simple String type, this merely sets the current value from the specified string.
func (me *TRoleType) Set(s string) { (*xsdt.String)(me).Set(s) }

type TExtendedRoleType xsdt.String

//	TExtendedRoleType is an XSD union-type of several types. This is a simple type conversion to TRoleType, but keep in mind the actual value may or may not be a valid TRoleType value.
func (me TExtendedRoleType) ToTRoleType() TRoleType { return TRoleType(me) }

//	Since TExtendedRoleType is just a simple String type, this merely sets the current value from the specified string.
func (me *TExtendedRoleType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TExtendedRoleType is just a simple String type, this merely returns the current string value.
func (me TExtendedRoleType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TExtendedRoleType's alias type xsdt.String.
func (me TExtendedRoleType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	TExtendedRoleType is an XSD union-type of several types. This is a simple type conversion to TxStringPatternExtensionType, but keep in mind the actual value may or may not be a valid TxStringPatternExtensionType value.
func (me TExtendedRoleType) ToTxStringPatternExtensionType() TxStringPatternExtensionType {
	return TxStringPatternExtensionType(me)
}

type XsdGoPkgHasAttr_Role_TExtendedRoleType_ struct {
	Role TExtendedRoleType `xml:"role,attr,omitempty"`
}

type TxsdBasicBibliographicRecordTypeSequenceName struct {
	TPersonNameType

	XsdGoPkgHasAttr_Role_TExtendedRoleType_
}

//	If the WalkHandlers.TxsdBasicBibliographicRecordTypeSequenceName function is not nil (ie. was set by outside code), calls it with this TxsdBasicBibliographicRecordTypeSequenceName instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TxsdBasicBibliographicRecordTypeSequenceName instance.
func (me *TxsdBasicBibliographicRecordTypeSequenceName) Walk() (err error) {
	if fn := WalkHandlers.TxsdBasicBibliographicRecordTypeSequenceName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TPersonNameType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_NamesequenceBasicBibliographicRecordTypeschema_Name_TxsdBasicBibliographicRecordTypeSequenceName_ struct {
	Names []*TxsdBasicBibliographicRecordTypeSequenceName `xml:"Name"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NamesequenceBasicBibliographicRecordTypeschema_Name_TxsdBasicBibliographicRecordTypeSequenceName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NamesequenceBasicBibliographicRecordTypeschema_Name_TxsdBasicBibliographicRecordTypeSequenceName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NamesequenceBasicBibliographicRecordTypeschema_Name_TxsdBasicBibliographicRecordTypeSequenceName_ instance.
func (me *XsdGoPkgHasElems_NamesequenceBasicBibliographicRecordTypeschema_Name_TxsdBasicBibliographicRecordTypeSequenceName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NamesequenceBasicBibliographicRecordTypeschema_Name_TxsdBasicBibliographicRecordTypeSequenceName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Names {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PublicationDatesequenceBasicBibliographicRecordTypeschema_PublicationDate_TFlexibleDatesType_ struct {
	PublicationDate *TFlexibleDatesType `xml:"PublicationDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PublicationDatesequenceBasicBibliographicRecordTypeschema_PublicationDate_TFlexibleDatesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PublicationDatesequenceBasicBibliographicRecordTypeschema_PublicationDate_TFlexibleDatesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PublicationDatesequenceBasicBibliographicRecordTypeschema_PublicationDate_TFlexibleDatesType_ instance.
func (me *XsdGoPkgHasElem_PublicationDatesequenceBasicBibliographicRecordTypeschema_PublicationDate_TFlexibleDatesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PublicationDatesequenceBasicBibliographicRecordTypeschema_PublicationDate_TFlexibleDatesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PublicationDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LinksequenceBasicBibliographicRecordTypeschema_Link_TInternetWebAddressType_ struct {
	Links []TInternetWebAddressType `xml:"Link"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LinksequenceBasicBibliographicRecordTypeschema_Link_TInternetWebAddressType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LinksequenceBasicBibliographicRecordTypeschema_Link_TInternetWebAddressType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LinksequenceBasicBibliographicRecordTypeschema_Link_TInternetWebAddressType_ instance.
func (me *XsdGoPkgHasElems_LinksequenceBasicBibliographicRecordTypeschema_Link_TInternetWebAddressType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LinksequenceBasicBibliographicRecordTypeschema_Link_TInternetWebAddressType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AbstractsequenceBasicBibliographicRecordTypeschema_Abstract_XsdtString_ struct {
	Abstract xsdt.String `xml:"Abstract"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AbstractsequenceBasicBibliographicRecordTypeschema_Abstract_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AbstractsequenceBasicBibliographicRecordTypeschema_Abstract_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AbstractsequenceBasicBibliographicRecordTypeschema_Abstract_XsdtString_ instance.
func (me *XsdGoPkgHasElem_AbstractsequenceBasicBibliographicRecordTypeschema_Abstract_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AbstractsequenceBasicBibliographicRecordTypeschema_Abstract_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Contains copyright information, such as year and copyright text.
type XsdGoPkgHasElem_MostRecentDatesequenceTxsdCopyrightTypeSequenceCopyrightDatesCopyrightDatessequenceCopyrightTypeschema_MostRecentDate_TFlexibleDatesType_ struct {
	MostRecentDate *TFlexibleDatesType `xml:"MostRecentDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MostRecentDatesequenceTxsdCopyrightTypeSequenceCopyrightDatesCopyrightDatessequenceCopyrightTypeschema_MostRecentDate_TFlexibleDatesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MostRecentDatesequenceTxsdCopyrightTypeSequenceCopyrightDatesCopyrightDatessequenceCopyrightTypeschema_MostRecentDate_TFlexibleDatesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MostRecentDatesequenceTxsdCopyrightTypeSequenceCopyrightDatesCopyrightDatessequenceCopyrightTypeschema_MostRecentDate_TFlexibleDatesType_ instance.
func (me *XsdGoPkgHasElem_MostRecentDatesequenceTxsdCopyrightTypeSequenceCopyrightDatesCopyrightDatessequenceCopyrightTypeschema_MostRecentDate_TFlexibleDatesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MostRecentDatesequenceTxsdCopyrightTypeSequenceCopyrightDatesCopyrightDatessequenceCopyrightTypeschema_MostRecentDate_TFlexibleDatesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MostRecentDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_OriginalDatesequenceTxsdCopyrightTypeSequenceCopyrightDatesCopyrightDatessequenceCopyrightTypeschema_OriginalDate_TFlexibleDatesType_ struct {
	OriginalDate *TFlexibleDatesType `xml:"OriginalDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OriginalDatesequenceTxsdCopyrightTypeSequenceCopyrightDatesCopyrightDatessequenceCopyrightTypeschema_OriginalDate_TFlexibleDatesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OriginalDatesequenceTxsdCopyrightTypeSequenceCopyrightDatesCopyrightDatessequenceCopyrightTypeschema_OriginalDate_TFlexibleDatesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_OriginalDatesequenceTxsdCopyrightTypeSequenceCopyrightDatesCopyrightDatessequenceCopyrightTypeschema_OriginalDate_TFlexibleDatesType_ instance.
func (me *XsdGoPkgHasElem_OriginalDatesequenceTxsdCopyrightTypeSequenceCopyrightDatesCopyrightDatessequenceCopyrightTypeschema_OriginalDate_TFlexibleDatesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OriginalDatesequenceTxsdCopyrightTypeSequenceCopyrightDatesCopyrightDatessequenceCopyrightTypeschema_OriginalDate_TFlexibleDatesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.OriginalDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCopyrightTypeSequenceCopyrightDates struct {
	XsdGoPkgHasElem_OriginalDatesequenceTxsdCopyrightTypeSequenceCopyrightDatesCopyrightDatessequenceCopyrightTypeschema_OriginalDate_TFlexibleDatesType_

	XsdGoPkgHasElem_MostRecentDatesequenceTxsdCopyrightTypeSequenceCopyrightDatesCopyrightDatessequenceCopyrightTypeschema_MostRecentDate_TFlexibleDatesType_
}

//	If the WalkHandlers.TxsdCopyrightTypeSequenceCopyrightDates function is not nil (ie. was set by outside code), calls it with this TxsdCopyrightTypeSequenceCopyrightDates instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdCopyrightTypeSequenceCopyrightDates instance.
func (me *TxsdCopyrightTypeSequenceCopyrightDates) Walk() (err error) {
	if fn := WalkHandlers.TxsdCopyrightTypeSequenceCopyrightDates; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OriginalDatesequenceTxsdCopyrightTypeSequenceCopyrightDatesCopyrightDatessequenceCopyrightTypeschema_OriginalDate_TFlexibleDatesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MostRecentDatesequenceTxsdCopyrightTypeSequenceCopyrightDatesCopyrightDatessequenceCopyrightTypeschema_MostRecentDate_TFlexibleDatesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CopyrightDatessequenceCopyrightTypeschema_CopyrightDates_TxsdCopyrightTypeSequenceCopyrightDates_ struct {
	CopyrightDates *TxsdCopyrightTypeSequenceCopyrightDates `xml:"CopyrightDates"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CopyrightDatessequenceCopyrightTypeschema_CopyrightDates_TxsdCopyrightTypeSequenceCopyrightDates_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CopyrightDatessequenceCopyrightTypeschema_CopyrightDates_TxsdCopyrightTypeSequenceCopyrightDates_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CopyrightDatessequenceCopyrightTypeschema_CopyrightDates_TxsdCopyrightTypeSequenceCopyrightDates_ instance.
func (me *XsdGoPkgHasElem_CopyrightDatessequenceCopyrightTypeschema_CopyrightDates_TxsdCopyrightTypeSequenceCopyrightDates_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CopyrightDatessequenceCopyrightTypeschema_CopyrightDates_TxsdCopyrightTypeSequenceCopyrightDates_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CopyrightDates.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CopyrightTextsequenceCopyrightTypeschema_CopyrightText_XsdtString_ struct {
	CopyrightText xsdt.String `xml:"CopyrightText"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CopyrightTextsequenceCopyrightTypeschema_CopyrightText_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CopyrightTextsequenceCopyrightTypeschema_CopyrightText_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CopyrightTextsequenceCopyrightTypeschema_CopyrightText_XsdtString_ instance.
func (me *XsdGoPkgHasElem_CopyrightTextsequenceCopyrightTypeschema_CopyrightText_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CopyrightTextsequenceCopyrightTypeschema_CopyrightText_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TCopyrightType struct {
	XsdGoPkgHasElem_CopyrightDatessequenceCopyrightTypeschema_CopyrightDates_TxsdCopyrightTypeSequenceCopyrightDates_

	XsdGoPkgHasElem_CopyrightTextsequenceCopyrightTypeschema_CopyrightText_XsdtString_
}

//	If the WalkHandlers.TCopyrightType function is not nil (ie. was set by outside code), calls it with this TCopyrightType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TCopyrightType instance.
func (me *TCopyrightType) Walk() (err error) {
	if fn := WalkHandlers.TCopyrightType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_CopyrightDatessequenceCopyrightTypeschema_CopyrightDates_TxsdCopyrightTypeSequenceCopyrightDates_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CopyrightTextsequenceCopyrightTypeschema_CopyrightText_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CopyrightsequenceBasicBibliographicRecordTypeschema_Copyright_TCopyrightType_ struct {
	Copyright *TCopyrightType `xml:"Copyright"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CopyrightsequenceBasicBibliographicRecordTypeschema_Copyright_TCopyrightType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CopyrightsequenceBasicBibliographicRecordTypeschema_Copyright_TCopyrightType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CopyrightsequenceBasicBibliographicRecordTypeschema_Copyright_TCopyrightType_ instance.
func (me *XsdGoPkgHasElem_CopyrightsequenceBasicBibliographicRecordTypeschema_Copyright_TCopyrightType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CopyrightsequenceBasicBibliographicRecordTypeschema_Copyright_TCopyrightType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Copyright.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TBasicBibliographicRecordType struct {
	XsdGoPkgHasElem_AbstractsequenceBasicBibliographicRecordTypeschema_Abstract_XsdtString_

	XsdGoPkgHasElem_CopyrightsequenceBasicBibliographicRecordTypeschema_Copyright_TCopyrightType_

	XsdGoPkgHasElem_CommentssequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Comments_XsdtString_

	XsdGoPkgHasElem_TitlesequencePositionHistoryTypeschema_Title_XsdtString_

	XsdGoPkgHasElems_NamesequenceBasicBibliographicRecordTypeschema_Name_TxsdBasicBibliographicRecordTypeSequenceName_

	XsdGoPkgHasElem_PublicationDatesequenceBasicBibliographicRecordTypeschema_PublicationDate_TFlexibleDatesType_

	XsdGoPkgHasElems_LinksequenceBasicBibliographicRecordTypeschema_Link_TInternetWebAddressType_
}

//	If the WalkHandlers.TBasicBibliographicRecordType function is not nil (ie. was set by outside code), calls it with this TBasicBibliographicRecordType instance as the single argument. Then calls the Walk() method on 7/7 embed(s) and 0/0 field(s) belonging to this TBasicBibliographicRecordType instance.
func (me *TBasicBibliographicRecordType) Walk() (err error) {
	if fn := WalkHandlers.TBasicBibliographicRecordType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_LinksequenceBasicBibliographicRecordTypeschema_Link_TInternetWebAddressType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AbstractsequenceBasicBibliographicRecordTypeschema_Abstract_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CopyrightsequenceBasicBibliographicRecordTypeschema_Copyright_TCopyrightType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CommentssequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Comments_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TitlesequencePositionHistoryTypeschema_Title_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_NamesequenceBasicBibliographicRecordTypeschema_Name_TxsdBasicBibliographicRecordTypeSequenceName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PublicationDatesequenceBasicBibliographicRecordTypeschema_PublicationDate_TFlexibleDatesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_JournalOrSerialNamesequenceextensioncomplexContentArticleTypeschema_JournalOrSerialName_XsdtString_ struct {
	JournalOrSerialName xsdt.String `xml:"JournalOrSerialName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_JournalOrSerialNamesequenceextensioncomplexContentArticleTypeschema_JournalOrSerialName_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_JournalOrSerialNamesequenceextensioncomplexContentArticleTypeschema_JournalOrSerialName_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_JournalOrSerialNamesequenceextensioncomplexContentArticleTypeschema_JournalOrSerialName_XsdtString_ instance.
func (me *XsdGoPkgHasElem_JournalOrSerialNamesequenceextensioncomplexContentArticleTypeschema_JournalOrSerialName_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_JournalOrSerialNamesequenceextensioncomplexContentArticleTypeschema_JournalOrSerialName_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	International Standard Serial Number. The is an identifier for articles and serial publications. The ISSN is defined by the ISO 3297 standard. The ISSN can be applied to series of books. A book belonging to a particular series will have both an ISSN (identifying the series) and an ISBN (identifying the given monograph as such).
type TissnType xsdt.String

//	This convenience method just performs a simple type conversion to TissnType's alias type xsdt.String.
func (me TissnType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Since TissnType is just a simple String type, this merely sets the current value from the specified string.
func (me *TissnType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TissnType is just a simple String type, this merely returns the current string value.
func (me TissnType) String() string { return xsdt.String(me).String() }

type XsdGoPkgHasElem_ISSNsequenceextensioncomplexContentArticleTypeschema_Issn_TissnType_ struct {
	Issn TissnType `xml:"ISSN"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ISSNsequenceextensioncomplexContentArticleTypeschema_Issn_TissnType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ISSNsequenceextensioncomplexContentArticleTypeschema_Issn_TissnType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ISSNsequenceextensioncomplexContentArticleTypeschema_Issn_TissnType_ instance.
func (me *XsdGoPkgHasElem_ISSNsequenceextensioncomplexContentArticleTypeschema_Issn_TissnType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ISSNsequenceextensioncomplexContentArticleTypeschema_Issn_TissnType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TArticleType struct {
	TBasicBibliographicRecordType

	XsdGoPkgHasElem_JournalOrSerialNamesequenceextensioncomplexContentArticleTypeschema_JournalOrSerialName_XsdtString_

	XsdGoPkgHasElem_ISSNsequenceextensioncomplexContentArticleTypeschema_Issn_TissnType_

	XsdGoPkgHasElem_VolumesequenceextensioncomplexContentArticleTypeschema_Volume_XsdtString_

	XsdGoPkgHasElem_IssuesequenceextensioncomplexContentArticleTypeschema_Issue_XsdtString_

	XsdGoPkgHasElem_PageNumbersequenceextensioncomplexContentArticleTypeschema_PageNumber_XsdtString_

	XsdGoPkgHasElem_PublicationLanguagesequenceextensioncomplexContentArticleTypeschema_PublicationLanguage_TLanguageCodeType_
}

//	If the WalkHandlers.TArticleType function is not nil (ie. was set by outside code), calls it with this TArticleType instance as the single argument. Then calls the Walk() method on 7/7 embed(s) and 0/0 field(s) belonging to this TArticleType instance.
func (me *TArticleType) Walk() (err error) {
	if fn := WalkHandlers.TArticleType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_IssuesequenceextensioncomplexContentArticleTypeschema_Issue_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PageNumbersequenceextensioncomplexContentArticleTypeschema_PageNumber_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PublicationLanguagesequenceextensioncomplexContentArticleTypeschema_PublicationLanguage_TLanguageCodeType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TBasicBibliographicRecordType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_JournalOrSerialNamesequenceextensioncomplexContentArticleTypeschema_JournalOrSerialName_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ISSNsequenceextensioncomplexContentArticleTypeschema_Issn_TissnType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_VolumesequenceextensioncomplexContentArticleTypeschema_Volume_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ArticlesequencePublicationHistoryTypeschema_Article_TArticleType_ struct {
	Articles []*TArticleType `xml:"Article"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ArticlesequencePublicationHistoryTypeschema_Article_TArticleType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ArticlesequencePublicationHistoryTypeschema_Article_TArticleType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ArticlesequencePublicationHistoryTypeschema_Article_TArticleType_ instance.
func (me *XsdGoPkgHasElems_ArticlesequencePublicationHistoryTypeschema_Article_TArticleType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ArticlesequencePublicationHistoryTypeschema_Article_TArticleType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Articles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Contain bibliographic information for a book or monograph.
type XsdGoPkgHasElem_PublisherLocationsequenceextensioncomplexContentBookTypeschema_PublisherLocation_XsdtString_ struct {
	PublisherLocation xsdt.String `xml:"PublisherLocation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PublisherLocationsequenceextensioncomplexContentBookTypeschema_PublisherLocation_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PublisherLocationsequenceextensioncomplexContentBookTypeschema_PublisherLocation_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PublisherLocationsequenceextensioncomplexContentBookTypeschema_PublisherLocation_XsdtString_ instance.
func (me *XsdGoPkgHasElem_PublisherLocationsequenceextensioncomplexContentBookTypeschema_PublisherLocation_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PublisherLocationsequenceextensioncomplexContentBookTypeschema_PublisherLocation_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EditionsequenceextensioncomplexContentBookTypeschema_Edition_XsdtString_ struct {
	Edition xsdt.String `xml:"Edition"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EditionsequenceextensioncomplexContentBookTypeschema_Edition_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EditionsequenceextensioncomplexContentBookTypeschema_Edition_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_EditionsequenceextensioncomplexContentBookTypeschema_Edition_XsdtString_ instance.
func (me *XsdGoPkgHasElem_EditionsequenceextensioncomplexContentBookTypeschema_Edition_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EditionsequenceextensioncomplexContentBookTypeschema_Edition_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ChaptersequenceextensioncomplexContentBookTypeschema_Chapter_XsdtString_ struct {
	Chapter xsdt.String `xml:"Chapter"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ChaptersequenceextensioncomplexContentBookTypeschema_Chapter_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ChaptersequenceextensioncomplexContentBookTypeschema_Chapter_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ChaptersequenceextensioncomplexContentBookTypeschema_Chapter_XsdtString_ instance.
func (me *XsdGoPkgHasElem_ChaptersequenceextensioncomplexContentBookTypeschema_Chapter_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ChaptersequenceextensioncomplexContentBookTypeschema_Chapter_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	International Standard Book Number. The ISBN is defined by the ISO ISO 2108 standard. The International Standard Book Number (ISBN) is a 10-digit system to identify books and monographic publications.
type TisbnType xsdt.String

//	Since TisbnType is just a simple String type, this merely sets the current value from the specified string.
func (me *TisbnType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TisbnType is just a simple String type, this merely returns the current string value.
func (me TisbnType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TisbnType's alias type xsdt.String.
func (me TisbnType) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElem_ISBNsequenceextensioncomplexContentBookTypeschema_Isbn_TisbnType_ struct {
	Isbn TisbnType `xml:"ISBN"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ISBNsequenceextensioncomplexContentBookTypeschema_Isbn_TisbnType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ISBNsequenceextensioncomplexContentBookTypeschema_Isbn_TisbnType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ISBNsequenceextensioncomplexContentBookTypeschema_Isbn_TisbnType_ instance.
func (me *XsdGoPkgHasElem_ISBNsequenceextensioncomplexContentBookTypeschema_Isbn_TisbnType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ISBNsequenceextensioncomplexContentBookTypeschema_Isbn_TisbnType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_NumberOfPagessequenceextensioncomplexContentBookTypeschema_NumberOfPages_XsdtPositiveInteger_ struct {
	NumberOfPages xsdt.PositiveInteger `xml:"NumberOfPages"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NumberOfPagessequenceextensioncomplexContentBookTypeschema_NumberOfPages_XsdtPositiveInteger_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NumberOfPagessequenceextensioncomplexContentBookTypeschema_NumberOfPages_XsdtPositiveInteger_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_NumberOfPagessequenceextensioncomplexContentBookTypeschema_NumberOfPages_XsdtPositiveInteger_ instance.
func (me *XsdGoPkgHasElem_NumberOfPagessequenceextensioncomplexContentBookTypeschema_NumberOfPages_XsdtPositiveInteger_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NumberOfPagessequenceextensioncomplexContentBookTypeschema_NumberOfPages_XsdtPositiveInteger_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PublisherNamesequenceextensioncomplexContentBookTypeschema_PublisherName_XsdtString_ struct {
	PublisherName xsdt.String `xml:"PublisherName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PublisherNamesequenceextensioncomplexContentBookTypeschema_PublisherName_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PublisherNamesequenceextensioncomplexContentBookTypeschema_PublisherName_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PublisherNamesequenceextensioncomplexContentBookTypeschema_PublisherName_XsdtString_ instance.
func (me *XsdGoPkgHasElem_PublisherNamesequenceextensioncomplexContentBookTypeschema_PublisherName_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PublisherNamesequenceextensioncomplexContentBookTypeschema_PublisherName_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TBookType struct {
	XsdGoPkgHasElem_EditionsequenceextensioncomplexContentBookTypeschema_Edition_XsdtString_

	XsdGoPkgHasElem_ChaptersequenceextensioncomplexContentBookTypeschema_Chapter_XsdtString_

	XsdGoPkgHasElem_ISSNsequenceextensioncomplexContentArticleTypeschema_Issn_TissnType_

	XsdGoPkgHasElem_ISBNsequenceextensioncomplexContentBookTypeschema_Isbn_TisbnType_

	XsdGoPkgHasElem_NumberOfPagessequenceextensioncomplexContentBookTypeschema_NumberOfPages_XsdtPositiveInteger_

	XsdGoPkgHasElem_PublisherNamesequenceextensioncomplexContentBookTypeschema_PublisherName_XsdtString_

	XsdGoPkgHasElem_PublisherLocationsequenceextensioncomplexContentBookTypeschema_PublisherLocation_XsdtString_

	TBasicBibliographicRecordType
}

//	If the WalkHandlers.TBookType function is not nil (ie. was set by outside code), calls it with this TBookType instance as the single argument. Then calls the Walk() method on 8/8 embed(s) and 0/0 field(s) belonging to this TBookType instance.
func (me *TBookType) Walk() (err error) {
	if fn := WalkHandlers.TBookType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_PublisherNamesequenceextensioncomplexContentBookTypeschema_PublisherName_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PublisherLocationsequenceextensioncomplexContentBookTypeschema_PublisherLocation_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TBasicBibliographicRecordType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EditionsequenceextensioncomplexContentBookTypeschema_Edition_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ChaptersequenceextensioncomplexContentBookTypeschema_Chapter_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ISSNsequenceextensioncomplexContentArticleTypeschema_Issn_TissnType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ISBNsequenceextensioncomplexContentBookTypeschema_Isbn_TisbnType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_NumberOfPagessequenceextensioncomplexContentBookTypeschema_NumberOfPages_XsdtPositiveInteger_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_BooksequencePublicationHistoryTypeschema_Book_TBookType_ struct {
	Books []*TBookType `xml:"Book"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_BooksequencePublicationHistoryTypeschema_Book_TBookType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BooksequencePublicationHistoryTypeschema_Book_TBookType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BooksequencePublicationHistoryTypeschema_Book_TBookType_ instance.
func (me *XsdGoPkgHasElems_BooksequencePublicationHistoryTypeschema_Book_TBookType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_BooksequencePublicationHistoryTypeschema_Book_TBookType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Books {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Contains details about papers or presentations prepared for delivery at a conference.
//	A paper or presentation given at a conference or published as part of conference proceedings.
type XsdGoPkgHasElem_EventNamesequenceextensioncomplexContentConferencePaperTypeschema_EventName_XsdtString_ struct {
	EventName xsdt.String `xml:"EventName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EventNamesequenceextensioncomplexContentConferencePaperTypeschema_EventName_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EventNamesequenceextensioncomplexContentConferencePaperTypeschema_EventName_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_EventNamesequenceextensioncomplexContentConferencePaperTypeschema_EventName_XsdtString_ instance.
func (me *XsdGoPkgHasElem_EventNamesequenceextensioncomplexContentConferencePaperTypeschema_EventName_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EventNamesequenceextensioncomplexContentConferencePaperTypeschema_EventName_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ConferenceDatesequenceextensioncomplexContentConferencePaperTypeschema_ConferenceDate_TFlexibleDatesType_ struct {
	ConferenceDate *TFlexibleDatesType `xml:"ConferenceDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ConferenceDatesequenceextensioncomplexContentConferencePaperTypeschema_ConferenceDate_TFlexibleDatesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ConferenceDatesequenceextensioncomplexContentConferencePaperTypeschema_ConferenceDate_TFlexibleDatesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ConferenceDatesequenceextensioncomplexContentConferencePaperTypeschema_ConferenceDate_TFlexibleDatesType_ instance.
func (me *XsdGoPkgHasElem_ConferenceDatesequenceextensioncomplexContentConferencePaperTypeschema_ConferenceDate_TFlexibleDatesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ConferenceDatesequenceextensioncomplexContentConferencePaperTypeschema_ConferenceDate_TFlexibleDatesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ConferenceDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ConferenceLocationsequenceextensioncomplexContentConferencePaperTypeschema_ConferenceLocation_XsdtString_ struct {
	ConferenceLocation xsdt.String `xml:"ConferenceLocation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ConferenceLocationsequenceextensioncomplexContentConferencePaperTypeschema_ConferenceLocation_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ConferenceLocationsequenceextensioncomplexContentConferencePaperTypeschema_ConferenceLocation_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ConferenceLocationsequenceextensioncomplexContentConferencePaperTypeschema_ConferenceLocation_XsdtString_ instance.
func (me *XsdGoPkgHasElem_ConferenceLocationsequenceextensioncomplexContentConferencePaperTypeschema_ConferenceLocation_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ConferenceLocationsequenceextensioncomplexContentConferencePaperTypeschema_ConferenceLocation_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TConferencePaperType struct {
	TBasicBibliographicRecordType

	XsdGoPkgHasElem_EventNamesequenceextensioncomplexContentConferencePaperTypeschema_EventName_XsdtString_

	XsdGoPkgHasElem_ConferenceDatesequenceextensioncomplexContentConferencePaperTypeschema_ConferenceDate_TFlexibleDatesType_

	XsdGoPkgHasElem_ConferenceLocationsequenceextensioncomplexContentConferencePaperTypeschema_ConferenceLocation_XsdtString_
}

//	If the WalkHandlers.TConferencePaperType function is not nil (ie. was set by outside code), calls it with this TConferencePaperType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TConferencePaperType instance.
func (me *TConferencePaperType) Walk() (err error) {
	if fn := WalkHandlers.TConferencePaperType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TBasicBibliographicRecordType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EventNamesequenceextensioncomplexContentConferencePaperTypeschema_EventName_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ConferenceDatesequenceextensioncomplexContentConferencePaperTypeschema_ConferenceDate_TFlexibleDatesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ConferenceLocationsequenceextensioncomplexContentConferencePaperTypeschema_ConferenceLocation_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ConferencePapersequencePublicationHistoryTypeschema_ConferencePaper_TConferencePaperType_ struct {
	//	Contains details about papers or presentations prepared for delivery at a conference.
	ConferencePapers []*TConferencePaperType `xml:"ConferencePaper"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ConferencePapersequencePublicationHistoryTypeschema_ConferencePaper_TConferencePaperType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ConferencePapersequencePublicationHistoryTypeschema_ConferencePaper_TConferencePaperType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ConferencePapersequencePublicationHistoryTypeschema_ConferencePaper_TConferencePaperType_ instance.
func (me *XsdGoPkgHasElems_ConferencePapersequencePublicationHistoryTypeschema_ConferencePaper_TConferencePaperType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ConferencePapersequencePublicationHistoryTypeschema_ConferencePaper_TConferencePaperType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ConferencePapers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Bibliographic information for other publication type, such as a Thesis, Whitepaper, Report, Technical Documentation, etc.
type TPublicationOtherTypeTypes xsdt.String

//	Returns true if the value of this enumerated TPublicationOtherTypeTypes is "Whitepaper".
func (me TPublicationOtherTypeTypes) IsWhitepaper() bool { return me.String() == "Whitepaper" }

//	Returns true if the value of this enumerated TPublicationOtherTypeTypes is "Report".
func (me TPublicationOtherTypeTypes) IsReport() bool { return me.String() == "Report" }

//	Returns true if the value of this enumerated TPublicationOtherTypeTypes is "Manual".
func (me TPublicationOtherTypeTypes) IsManual() bool { return me.String() == "Manual" }

//	Returns true if the value of this enumerated TPublicationOtherTypeTypes is "TechnicalDocumentation".
func (me TPublicationOtherTypeTypes) IsTechnicalDocumentation() bool {
	return me.String() == "TechnicalDocumentation"
}

//	Returns true if the value of this enumerated TPublicationOtherTypeTypes is "Study".
func (me TPublicationOtherTypeTypes) IsStudy() bool { return me.String() == "Study" }

//	Returns true if the value of this enumerated TPublicationOtherTypeTypes is "ResearchPaper".
func (me TPublicationOtherTypeTypes) IsResearchPaper() bool { return me.String() == "ResearchPaper" }

//	Since TPublicationOtherTypeTypes is just a simple String type, this merely sets the current value from the specified string.
func (me *TPublicationOtherTypeTypes) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TPublicationOtherTypeTypes is just a simple String type, this merely returns the current string value.
func (me TPublicationOtherTypeTypes) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TPublicationOtherTypeTypes's alias type xsdt.String.
func (me TPublicationOtherTypeTypes) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TPublicationOtherTypeTypes is "Thesis".
func (me TPublicationOtherTypeTypes) IsThesis() bool { return me.String() == "Thesis" }

type TPublicationOtherTypes xsdt.String

//	TPublicationOtherTypes is an XSD union-type of several types. This is a simple type conversion to TPublicationOtherTypeTypes, but keep in mind the actual value may or may not be a valid TPublicationOtherTypeTypes value.
func (me TPublicationOtherTypes) ToTPublicationOtherTypeTypes() TPublicationOtherTypeTypes {
	return TPublicationOtherTypeTypes(me)
}

//	Since TPublicationOtherTypes is just a simple String type, this merely sets the current value from the specified string.
func (me *TPublicationOtherTypes) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TPublicationOtherTypes is just a simple String type, this merely returns the current string value.
func (me TPublicationOtherTypes) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TPublicationOtherTypes's alias type xsdt.String.
func (me TPublicationOtherTypes) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	TPublicationOtherTypes is an XSD union-type of several types. This is a simple type conversion to TxStringPatternExtensionType, but keep in mind the actual value may or may not be a valid TxStringPatternExtensionType value.
func (me TPublicationOtherTypes) ToTxStringPatternExtensionType() TxStringPatternExtensionType {
	return TxStringPatternExtensionType(me)
}

type XsdGoPkgHasAttr_Type_TPublicationOtherTypes_ struct {
	Type TPublicationOtherTypes `xml:"type,attr,omitempty"`
}

type TOtherPublicationType struct {
	XsdGoPkgHasElem_ISSNsequenceextensioncomplexContentArticleTypeschema_Issn_TissnType_

	XsdGoPkgHasElem_ISBNsequenceextensioncomplexContentBookTypeschema_Isbn_TisbnType_

	XsdGoPkgHasElem_NumberOfPagessequenceextensioncomplexContentBookTypeschema_NumberOfPages_XsdtPositiveInteger_

	XsdGoPkgHasElem_PublisherNamesequenceextensioncomplexContentBookTypeschema_PublisherName_XsdtString_

	XsdGoPkgHasElem_PublisherLocationsequenceextensioncomplexContentBookTypeschema_PublisherLocation_XsdtString_

	XsdGoPkgHasAttr_Type_TPublicationOtherTypes_

	TBasicBibliographicRecordType
}

//	If the WalkHandlers.TOtherPublicationType function is not nil (ie. was set by outside code), calls it with this TOtherPublicationType instance as the single argument. Then calls the Walk() method on 6/7 embed(s) and 0/0 field(s) belonging to this TOtherPublicationType instance.
func (me *TOtherPublicationType) Walk() (err error) {
	if fn := WalkHandlers.TOtherPublicationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_PublisherLocationsequenceextensioncomplexContentBookTypeschema_PublisherLocation_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TBasicBibliographicRecordType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ISSNsequenceextensioncomplexContentArticleTypeschema_Issn_TissnType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ISBNsequenceextensioncomplexContentBookTypeschema_Isbn_TisbnType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_NumberOfPagessequenceextensioncomplexContentBookTypeschema_NumberOfPages_XsdtPositiveInteger_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PublisherNamesequenceextensioncomplexContentBookTypeschema_PublisherName_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_OtherPublicationsequencePublicationHistoryTypeschema_OtherPublication_TOtherPublicationType_ struct {
	OtherPublications []*TOtherPublicationType `xml:"OtherPublication"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OtherPublicationsequencePublicationHistoryTypeschema_OtherPublication_TOtherPublicationType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OtherPublicationsequencePublicationHistoryTypeschema_OtherPublication_TOtherPublicationType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OtherPublicationsequencePublicationHistoryTypeschema_OtherPublication_TOtherPublicationType_ instance.
func (me *XsdGoPkgHasElems_OtherPublicationsequencePublicationHistoryTypeschema_OtherPublication_TOtherPublicationType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OtherPublicationsequencePublicationHistoryTypeschema_OtherPublication_TOtherPublicationType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.OtherPublications {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPublicationHistoryType struct {
	XsdGoPkgHasElems_ArticlesequencePublicationHistoryTypeschema_Article_TArticleType_

	XsdGoPkgHasElems_BooksequencePublicationHistoryTypeschema_Book_TBookType_

	//	Contains details about papers or presentations prepared for delivery at a conference.
	XsdGoPkgHasElems_ConferencePapersequencePublicationHistoryTypeschema_ConferencePaper_TConferencePaperType_

	XsdGoPkgHasElems_OtherPublicationsequencePublicationHistoryTypeschema_OtherPublication_TOtherPublicationType_

	XsdGoPkgHasElems_FormattedPublicationDescriptionsequencePublicationHistoryTypeschema_FormattedPublicationDescription_TxsdPublicationHistoryTypeSequenceFormattedPublicationDescription_
}

//	If the WalkHandlers.TPublicationHistoryType function is not nil (ie. was set by outside code), calls it with this TPublicationHistoryType instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TPublicationHistoryType instance.
func (me *TPublicationHistoryType) Walk() (err error) {
	if fn := WalkHandlers.TPublicationHistoryType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_ConferencePapersequencePublicationHistoryTypeschema_ConferencePaper_TConferencePaperType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_OtherPublicationsequencePublicationHistoryTypeschema_OtherPublication_TOtherPublicationType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_FormattedPublicationDescriptionsequencePublicationHistoryTypeschema_FormattedPublicationDescription_TxsdPublicationHistoryTypeSequenceFormattedPublicationDescription_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ArticlesequencePublicationHistoryTypeschema_Article_TArticleType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_BooksequencePublicationHistoryTypeschema_Book_TBookType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PublicationHistory struct {
	PublicationHistory *TPublicationHistoryType `xml:"PublicationHistory"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PublicationHistory function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PublicationHistory instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PublicationHistory instance.
func (me *XsdGoPkgHasElem_PublicationHistory) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PublicationHistory; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PublicationHistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PublicationHistory struct {
	PublicationHistories []*TPublicationHistoryType `xml:"PublicationHistory"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PublicationHistory function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PublicationHistory instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PublicationHistory instance.
func (me *XsdGoPkgHasElems_PublicationHistory) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PublicationHistory; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PublicationHistories {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PositionTitlesequenceReferenceTypeschema_PositionTitle_XsdtString_ struct {
	PositionTitle xsdt.String `xml:"PositionTitle"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PositionTitlesequenceReferenceTypeschema_PositionTitle_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PositionTitlesequenceReferenceTypeschema_PositionTitle_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PositionTitlesequenceReferenceTypeschema_PositionTitle_XsdtString_ instance.
func (me *XsdGoPkgHasElem_PositionTitlesequenceReferenceTypeschema_PositionTitle_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PositionTitlesequenceReferenceTypeschema_PositionTitle_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TBasicReferenceType xsdt.String

//	Returns true if the value of this enumerated TBasicReferenceType is "Personal".
func (me TBasicReferenceType) IsPersonal() bool { return me.String() == "Personal" }

//	Returns true if the value of this enumerated TBasicReferenceType is "Verification".
func (me TBasicReferenceType) IsVerification() bool { return me.String() == "Verification" }

//	Since TBasicReferenceType is just a simple String type, this merely sets the current value from the specified string.
func (me *TBasicReferenceType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TBasicReferenceType is just a simple String type, this merely returns the current string value.
func (me TBasicReferenceType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TBasicReferenceType's alias type xsdt.String.
func (me TBasicReferenceType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TBasicReferenceType is "Professional".
func (me TBasicReferenceType) IsProfessional() bool { return me.String() == "Professional" }

type TReferenceTypes xsdt.String

//	Since TReferenceTypes is just a simple String type, this merely returns the current string value.
func (me TReferenceTypes) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TReferenceTypes's alias type xsdt.String.
func (me TReferenceTypes) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	TReferenceTypes is an XSD union-type of several types. This is a simple type conversion to TBasicReferenceType, but keep in mind the actual value may or may not be a valid TBasicReferenceType value.
func (me TReferenceTypes) ToTBasicReferenceType() TBasicReferenceType { return TBasicReferenceType(me) }

//	TReferenceTypes is an XSD union-type of several types. This is a simple type conversion to TxStringPatternExtensionType, but keep in mind the actual value may or may not be a valid TxStringPatternExtensionType value.
func (me TReferenceTypes) ToTxStringPatternExtensionType() TxStringPatternExtensionType {
	return TxStringPatternExtensionType(me)
}

//	Since TReferenceTypes is just a simple String type, this merely sets the current value from the specified string.
func (me *TReferenceTypes) Set(s string) { (*xsdt.String)(me).Set(s) }

type XsdGoPkgHasAttr_Type_TReferenceTypes_ struct {
	Type TReferenceTypes `xml:"type,attr,omitempty"`
}

type TReferenceType struct {
	XsdGoPkgHasElem_CommentssequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Comments_XsdtString_

	XsdGoPkgHasAttr_Type_TReferenceTypes_

	XsdGoPkgHasElem_PersonNamesequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_PersonName_TPersonNameType_

	XsdGoPkgHasElem_PositionTitlesequenceReferenceTypeschema_PositionTitle_XsdtString_

	XsdGoPkgHasElems_ContactMethodsequenceEmpContactInfoTypeschema_ContactMethod_TContactMethodType_
}

//	If the WalkHandlers.TReferenceType function is not nil (ie. was set by outside code), calls it with this TReferenceType instance as the single argument. Then calls the Walk() method on 4/5 embed(s) and 0/0 field(s) belonging to this TReferenceType instance.
func (me *TReferenceType) Walk() (err error) {
	if fn := WalkHandlers.TReferenceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_ContactMethodsequenceEmpContactInfoTypeschema_ContactMethod_TContactMethodType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CommentssequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Comments_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PersonNamesequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_PersonName_TPersonNameType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PositionTitlesequenceReferenceTypeschema_PositionTitle_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Reference struct {
	Reference *TReferenceType `xml:"Reference"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Reference function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Reference instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Reference instance.
func (me *XsdGoPkgHasElem_Reference) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Reference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Reference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Reference struct {
	References []*TReferenceType `xml:"Reference"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Reference function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Reference instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Reference instance.
func (me *XsdGoPkgHasElems_Reference) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Reference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.References {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdReferences struct {
	XsdGoPkgHasElems_Reference
}

//	If the WalkHandlers.TxsdReferences function is not nil (ie. was set by outside code), calls it with this TxsdReferences instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdReferences instance.
func (me *TxsdReferences) Walk() (err error) {
	if fn := WalkHandlers.TxsdReferences; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Reference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_References struct {
	References *TxsdReferences `xml:"References"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_References function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_References instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_References instance.
func (me *XsdGoPkgHasElem_References) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_References; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.References.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_References struct {
	Referenceses []*TxsdReferences `xml:"References"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_References function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_References instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_References instance.
func (me *XsdGoPkgHasElems_References) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_References; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Referenceses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ResumeIdsequenceTxsdResumeResumeschema_ResumeId_TEntityIdType_ struct {
	ResumeId *TEntityIdType `xml:"ResumeId"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ResumeIdsequenceTxsdResumeResumeschema_ResumeId_TEntityIdType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ResumeIdsequenceTxsdResumeResumeschema_ResumeId_TEntityIdType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ResumeIdsequenceTxsdResumeResumeschema_ResumeId_TEntityIdType_ instance.
func (me *XsdGoPkgHasElem_ResumeIdsequenceTxsdResumeResumeschema_ResumeId_TEntityIdType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ResumeIdsequenceTxsdResumeResumeschema_ResumeId_TEntityIdType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ResumeId.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TLocalDateNkNaType xsdt.String

//	Since TLocalDateNkNaType is just a simple String type, this merely sets the current value from the specified string.
func (me *TLocalDateNkNaType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TLocalDateNkNaType is just a simple String type, this merely returns the current string value.
func (me TLocalDateNkNaType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TLocalDateNkNaType's alias type xsdt.String.
func (me TLocalDateNkNaType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	TLocalDateNkNaType is an XSD union-type of several types. This is a simple type conversion to TLocalDateType, but keep in mind the actual value may or may not be a valid TLocalDateType value.
func (me TLocalDateNkNaType) ToTLocalDateType() TLocalDateType { return TLocalDateType(me) }

//	TLocalDateNkNaType is an XSD union-type of several types. This is a simple type conversion to TNotKnownLiteral, but keep in mind the actual value may or may not be a valid TNotKnownLiteral value.
func (me TLocalDateNkNaType) ToTNotKnownLiteral() TNotKnownLiteral { return TNotKnownLiteral(me) }

//	TLocalDateNkNaType is an XSD union-type of several types. This is a simple type conversion to TNotApplicableLiteral, but keep in mind the actual value may or may not be a valid TNotApplicableLiteral value.
func (me TLocalDateNkNaType) ToTNotApplicableLiteral() TNotApplicableLiteral {
	return TNotApplicableLiteral(me)
}

type XsdGoPkgHasAttr_ValidFrom_TLocalDateNkNaType_ struct {
	ValidFrom TLocalDateNkNaType `xml:"validFrom,attr,omitempty"`
}

type XsdGoPkgHasAttr_ValidTo_TLocalDateNkNaType_ struct {
	ValidTo TLocalDateNkNaType `xml:"validTo,attr,omitempty"`
}

type TDistributionType struct {
	XsdGoPkgHasElem_IdsequenceAssociationTypeschema_Id_TEntityIdType_

	XsdGoPkgHasElem_NamesequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Name_XsdtString_

	XsdGoPkgHasAttr_ValidFrom_TLocalDateNkNaType_

	XsdGoPkgHasAttr_ValidTo_TLocalDateNkNaType_
}

//	If the WalkHandlers.TDistributionType function is not nil (ie. was set by outside code), calls it with this TDistributionType instance as the single argument. Then calls the Walk() method on 2/4 embed(s) and 0/0 field(s) belonging to this TDistributionType instance.
func (me *TDistributionType) Walk() (err error) {
	if fn := WalkHandlers.TDistributionType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_IdsequenceAssociationTypeschema_Id_TEntityIdType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_NamesequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Name_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdDistributionGuidelinesTypeSequenceDistributeTo struct {
	TDistributionType

	XsdGoPkgHasElems_ContactMethodsequenceEmpContactInfoTypeschema_ContactMethod_TContactMethodType_
}

//	If the WalkHandlers.TxsdDistributionGuidelinesTypeSequenceDistributeTo function is not nil (ie. was set by outside code), calls it with this TxsdDistributionGuidelinesTypeSequenceDistributeTo instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdDistributionGuidelinesTypeSequenceDistributeTo instance.
func (me *TxsdDistributionGuidelinesTypeSequenceDistributeTo) Walk() (err error) {
	if fn := WalkHandlers.TxsdDistributionGuidelinesTypeSequenceDistributeTo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_ContactMethodsequenceEmpContactInfoTypeschema_ContactMethod_TContactMethodType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TDistributionType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DistributeTosequenceDistributionGuidelinesTypeschema_DistributeTo_TxsdDistributionGuidelinesTypeSequenceDistributeTo_ struct {
	DistributeTos []*TxsdDistributionGuidelinesTypeSequenceDistributeTo `xml:"DistributeTo"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DistributeTosequenceDistributionGuidelinesTypeschema_DistributeTo_TxsdDistributionGuidelinesTypeSequenceDistributeTo_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DistributeTosequenceDistributionGuidelinesTypeschema_DistributeTo_TxsdDistributionGuidelinesTypeSequenceDistributeTo_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DistributeTosequenceDistributionGuidelinesTypeschema_DistributeTo_TxsdDistributionGuidelinesTypeSequenceDistributeTo_ instance.
func (me *XsdGoPkgHasElems_DistributeTosequenceDistributionGuidelinesTypeschema_DistributeTo_TxsdDistributionGuidelinesTypeSequenceDistributeTo_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DistributeTosequenceDistributionGuidelinesTypeschema_DistributeTo_TxsdDistributionGuidelinesTypeSequenceDistributeTo_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DistributeTos {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DoNotDistributeTosequenceDistributionGuidelinesTypeschema_DoNotDistributeTo_TDistributionType_ struct {
	DoNotDistributeTos []*TDistributionType `xml:"DoNotDistributeTo"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DoNotDistributeTosequenceDistributionGuidelinesTypeschema_DoNotDistributeTo_TDistributionType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DoNotDistributeTosequenceDistributionGuidelinesTypeschema_DoNotDistributeTo_TDistributionType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DoNotDistributeTosequenceDistributionGuidelinesTypeschema_DoNotDistributeTo_TDistributionType_ instance.
func (me *XsdGoPkgHasElems_DoNotDistributeTosequenceDistributionGuidelinesTypeschema_DoNotDistributeTo_TDistributionType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DoNotDistributeTosequenceDistributionGuidelinesTypeschema_DoNotDistributeTo_TDistributionType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DoNotDistributeTos {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TDistributionGuidelinesType struct {
	XsdGoPkgHasElems_DistributeTosequenceDistributionGuidelinesTypeschema_DistributeTo_TxsdDistributionGuidelinesTypeSequenceDistributeTo_

	XsdGoPkgHasElems_DoNotDistributeTosequenceDistributionGuidelinesTypeschema_DoNotDistributeTo_TDistributionType_
}

//	If the WalkHandlers.TDistributionGuidelinesType function is not nil (ie. was set by outside code), calls it with this TDistributionGuidelinesType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TDistributionGuidelinesType instance.
func (me *TDistributionGuidelinesType) Walk() (err error) {
	if fn := WalkHandlers.TDistributionGuidelinesType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_DoNotDistributeTosequenceDistributionGuidelinesTypeschema_DoNotDistributeTo_TDistributionType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_DistributeTosequenceDistributionGuidelinesTypeschema_DistributeTo_TxsdDistributionGuidelinesTypeSequenceDistributeTo_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DistributionGuidelinessequenceTxsdResumeResumeschema_DistributionGuidelines_TDistributionGuidelinesType_ struct {
	DistributionGuidelines *TDistributionGuidelinesType `xml:"DistributionGuidelines"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DistributionGuidelinessequenceTxsdResumeResumeschema_DistributionGuidelines_TDistributionGuidelinesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DistributionGuidelinessequenceTxsdResumeResumeschema_DistributionGuidelines_TDistributionGuidelinesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DistributionGuidelinessequenceTxsdResumeResumeschema_DistributionGuidelines_TDistributionGuidelinesType_ instance.
func (me *XsdGoPkgHasElem_DistributionGuidelinessequenceTxsdResumeResumeschema_DistributionGuidelines_TDistributionGuidelinesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DistributionGuidelinessequenceTxsdResumeResumeschema_DistributionGuidelines_TDistributionGuidelinesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DistributionGuidelines.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSEPContactInfoType struct {
	XsdGoPkgHasElem_PersonNamesequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_PersonName_TPersonNameType_

	XsdGoPkgHasElems_ContactMethodsequenceEmpContactInfoTypeschema_ContactMethod_TContactMethodType_
}

//	If the WalkHandlers.TSEPContactInfoType function is not nil (ie. was set by outside code), calls it with this TSEPContactInfoType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TSEPContactInfoType instance.
func (me *TSEPContactInfoType) Walk() (err error) {
	if fn := WalkHandlers.TSEPContactInfoType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_PersonNamesequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_PersonName_TPersonNameType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ContactMethodsequenceEmpContactInfoTypeschema_ContactMethod_TContactMethodType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ContactInfosequenceStructuredXMLResumeTypeschema_ContactInfo_TSEPContactInfoType_ struct {
	ContactInfo *TSEPContactInfoType `xml:"ContactInfo"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ContactInfosequenceStructuredXMLResumeTypeschema_ContactInfo_TSEPContactInfoType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ContactInfosequenceStructuredXMLResumeTypeschema_ContactInfo_TSEPContactInfoType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ContactInfosequenceStructuredXMLResumeTypeschema_ContactInfo_TSEPContactInfoType_ instance.
func (me *XsdGoPkgHasElem_ContactInfosequenceStructuredXMLResumeTypeschema_ContactInfo_TSEPContactInfoType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ContactInfosequenceStructuredXMLResumeTypeschema_ContactInfo_TSEPContactInfoType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ContactInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RolesequenceSpeakingEventTypeschema_Role_XsdtString_ struct {
	Role xsdt.String `xml:"Role"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RolesequenceSpeakingEventTypeschema_Role_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RolesequenceSpeakingEventTypeschema_Role_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_RolesequenceSpeakingEventTypeschema_Role_XsdtString_ instance.
func (me *XsdGoPkgHasElem_RolesequenceSpeakingEventTypeschema_Role_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RolesequenceSpeakingEventTypeschema_Role_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TEventTypeType xsdt.String

//	Returns true if the value of this enumerated TEventTypeType is "web-based".
func (me TEventTypeType) IsWebBased() bool { return me.String() == "web-based" }

//	Since TEventTypeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TEventTypeType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TEventTypeType is "rally".
func (me TEventTypeType) IsRally() bool { return me.String() == "rally" }

//	Returns true if the value of this enumerated TEventTypeType is "sales meeting".
func (me TEventTypeType) IsSalesMeeting() bool { return me.String() == "sales meeting" }

//	Returns true if the value of this enumerated TEventTypeType is "television show".
func (me TEventTypeType) IsTelevisionShow() bool { return me.String() == "television show" }

//	Returns true if the value of this enumerated TEventTypeType is "radio show".
func (me TEventTypeType) IsRadioShow() bool { return me.String() == "radio show" }

//	Since TEventTypeType is just a simple String type, this merely returns the current string value.
func (me TEventTypeType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TEventTypeType's alias type xsdt.String.
func (me TEventTypeType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TEventTypeType is "convention".
func (me TEventTypeType) IsConvention() bool { return me.String() == "convention" }

//	Returns true if the value of this enumerated TEventTypeType is "conference".
func (me TEventTypeType) IsConference() bool { return me.String() == "conference" }

type TExtendedEventTypeType xsdt.String

//	Since TExtendedEventTypeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TExtendedEventTypeType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TExtendedEventTypeType is just a simple String type, this merely returns the current string value.
func (me TExtendedEventTypeType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TExtendedEventTypeType's alias type xsdt.String.
func (me TExtendedEventTypeType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	TExtendedEventTypeType is an XSD union-type of several types. This is a simple type conversion to TEventTypeType, but keep in mind the actual value may or may not be a valid TEventTypeType value.
func (me TExtendedEventTypeType) ToTEventTypeType() TEventTypeType { return TEventTypeType(me) }

//	TExtendedEventTypeType is an XSD union-type of several types. This is a simple type conversion to TxStringPatternExtensionType, but keep in mind the actual value may or may not be a valid TxStringPatternExtensionType value.
func (me TExtendedEventTypeType) ToTxStringPatternExtensionType() TxStringPatternExtensionType {
	return TxStringPatternExtensionType(me)
}

type XsdGoPkgHasElem_EventTypesequenceSpeakingEventTypeschema_EventType_TExtendedEventTypeType_ struct {
	EventType TExtendedEventTypeType `xml:"EventType"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EventTypesequenceSpeakingEventTypeschema_EventType_TExtendedEventTypeType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EventTypesequenceSpeakingEventTypeschema_EventType_TExtendedEventTypeType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_EventTypesequenceSpeakingEventTypeschema_EventType_TExtendedEventTypeType_ instance.
func (me *XsdGoPkgHasElem_EventTypesequenceSpeakingEventTypeschema_EventType_TExtendedEventTypeType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EventTypesequenceSpeakingEventTypeschema_EventType_TExtendedEventTypeType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_LocationsequenceSpeakingEventTypeschema_Location_XsdtString_ struct {
	Location xsdt.String `xml:"Location"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LocationsequenceSpeakingEventTypeschema_Location_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LocationsequenceSpeakingEventTypeschema_Location_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_LocationsequenceSpeakingEventTypeschema_Location_XsdtString_ instance.
func (me *XsdGoPkgHasElem_LocationsequenceSpeakingEventTypeschema_Location_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LocationsequenceSpeakingEventTypeschema_Location_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AffiliatedOrganizationsequenceSpeakingEventTypeschema_AffiliatedOrganization_XsdtString_ struct {
	AffiliatedOrganizations []xsdt.String `xml:"AffiliatedOrganization"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AffiliatedOrganizationsequenceSpeakingEventTypeschema_AffiliatedOrganization_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AffiliatedOrganizationsequenceSpeakingEventTypeschema_AffiliatedOrganization_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AffiliatedOrganizationsequenceSpeakingEventTypeschema_AffiliatedOrganization_XsdtString_ instance.
func (me *XsdGoPkgHasElems_AffiliatedOrganizationsequenceSpeakingEventTypeschema_AffiliatedOrganization_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AffiliatedOrganizationsequenceSpeakingEventTypeschema_AffiliatedOrganization_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSpeakingTypeType xsdt.String

//	Returns true if the value of this enumerated TSpeakingTypeType is "demonstration".
func (me TSpeakingTypeType) IsDemonstration() bool { return me.String() == "demonstration" }

//	Returns true if the value of this enumerated TSpeakingTypeType is "interview".
func (me TSpeakingTypeType) IsInterview() bool { return me.String() == "interview" }

//	Returns true if the value of this enumerated TSpeakingTypeType is "presentation".
func (me TSpeakingTypeType) IsPresentation() bool { return me.String() == "presentation" }

//	Returns true if the value of this enumerated TSpeakingTypeType is "debate".
func (me TSpeakingTypeType) IsDebate() bool { return me.String() == "debate" }

//	Returns true if the value of this enumerated TSpeakingTypeType is "panel discussion".
func (me TSpeakingTypeType) IsPanelDiscussion() bool { return me.String() == "panel discussion" }

//	Since TSpeakingTypeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TSpeakingTypeType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TSpeakingTypeType is just a simple String type, this merely returns the current string value.
func (me TSpeakingTypeType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TSpeakingTypeType's alias type xsdt.String.
func (me TSpeakingTypeType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TSpeakingTypeType is "speech".
func (me TSpeakingTypeType) IsSpeech() bool { return me.String() == "speech" }

type TExtendedSpeakingTypeType xsdt.String

//	Since TExtendedSpeakingTypeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TExtendedSpeakingTypeType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TExtendedSpeakingTypeType is just a simple String type, this merely returns the current string value.
func (me TExtendedSpeakingTypeType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TExtendedSpeakingTypeType's alias type xsdt.String.
func (me TExtendedSpeakingTypeType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	TExtendedSpeakingTypeType is an XSD union-type of several types. This is a simple type conversion to TSpeakingTypeType, but keep in mind the actual value may or may not be a valid TSpeakingTypeType value.
func (me TExtendedSpeakingTypeType) ToTSpeakingTypeType() TSpeakingTypeType {
	return TSpeakingTypeType(me)
}

//	TExtendedSpeakingTypeType is an XSD union-type of several types. This is a simple type conversion to TxStringPatternExtensionType, but keep in mind the actual value may or may not be a valid TxStringPatternExtensionType value.
func (me TExtendedSpeakingTypeType) ToTxStringPatternExtensionType() TxStringPatternExtensionType {
	return TxStringPatternExtensionType(me)
}

type XsdGoPkgHasAttr_Type_TExtendedSpeakingTypeType_ struct {
	Type TExtendedSpeakingTypeType `xml:"type,attr,omitempty"`
}

type TSpeakingEventType struct {
	XsdGoPkgHasElem_RolesequenceSpeakingEventTypeschema_Role_XsdtString_

	XsdGoPkgHasElem_StartDatesequenceAssociationTypeschema_StartDate_TFlexibleDatesType_

	XsdGoPkgHasElem_EventNamesequenceextensioncomplexContentConferencePaperTypeschema_EventName_XsdtString_

	XsdGoPkgHasElem_EventTypesequenceSpeakingEventTypeschema_EventType_TExtendedEventTypeType_

	XsdGoPkgHasElem_DescriptionsequenceAchievementTypeschema_Description_XsdtString_

	XsdGoPkgHasElem_LinksequenceAssociationTypeschema_Link_TInternetWebAddressType_

	XsdGoPkgHasElem_TitlesequencePositionHistoryTypeschema_Title_XsdtString_

	XsdGoPkgHasElem_EndDatesequenceAssociationTypeschema_EndDate_TFlexibleDatesType_

	XsdGoPkgHasElem_LocationsequenceSpeakingEventTypeschema_Location_XsdtString_

	XsdGoPkgHasElems_AffiliatedOrganizationsequenceSpeakingEventTypeschema_AffiliatedOrganization_XsdtString_

	XsdGoPkgHasAttr_Type_TExtendedSpeakingTypeType_
}

//	If the WalkHandlers.TSpeakingEventType function is not nil (ie. was set by outside code), calls it with this TSpeakingEventType instance as the single argument. Then calls the Walk() method on 10/11 embed(s) and 0/0 field(s) belonging to this TSpeakingEventType instance.
func (me *TSpeakingEventType) Walk() (err error) {
	if fn := WalkHandlers.TSpeakingEventType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_EventTypesequenceSpeakingEventTypeschema_EventType_TExtendedEventTypeType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DescriptionsequenceAchievementTypeschema_Description_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LinksequenceAssociationTypeschema_Link_TInternetWebAddressType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RolesequenceSpeakingEventTypeschema_Role_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_StartDatesequenceAssociationTypeschema_StartDate_TFlexibleDatesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EventNamesequenceextensioncomplexContentConferencePaperTypeschema_EventName_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AffiliatedOrganizationsequenceSpeakingEventTypeschema_AffiliatedOrganization_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TitlesequencePositionHistoryTypeschema_Title_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EndDatesequenceAssociationTypeschema_EndDate_TFlexibleDatesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LocationsequenceSpeakingEventTypeschema_Location_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SpeakingEvent struct {
	SpeakingEvents []*TSpeakingEventType `xml:"SpeakingEvent"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SpeakingEvent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SpeakingEvent instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SpeakingEvent instance.
func (me *XsdGoPkgHasElems_SpeakingEvent) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SpeakingEvent; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SpeakingEvents {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSpeakingEventsHistory struct {
	XsdGoPkgHasElems_SpeakingEvent
}

//	If the WalkHandlers.TxsdSpeakingEventsHistory function is not nil (ie. was set by outside code), calls it with this TxsdSpeakingEventsHistory instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdSpeakingEventsHistory instance.
func (me *TxsdSpeakingEventsHistory) Walk() (err error) {
	if fn := WalkHandlers.TxsdSpeakingEventsHistory; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_SpeakingEvent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SpeakingEventsHistory struct {
	SpeakingEventsHistory *TxsdSpeakingEventsHistory `xml:"SpeakingEventsHistory"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SpeakingEventsHistory function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SpeakingEventsHistory instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SpeakingEventsHistory instance.
func (me *XsdGoPkgHasElem_SpeakingEventsHistory) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SpeakingEventsHistory; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SpeakingEventsHistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdStructuredXMLResumeTypeSequenceLanguages struct {
	XsdGoPkgHasElems_Language
}

//	If the WalkHandlers.TxsdStructuredXMLResumeTypeSequenceLanguages function is not nil (ie. was set by outside code), calls it with this TxsdStructuredXMLResumeTypeSequenceLanguages instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdStructuredXMLResumeTypeSequenceLanguages instance.
func (me *TxsdStructuredXMLResumeTypeSequenceLanguages) Walk() (err error) {
	if fn := WalkHandlers.TxsdStructuredXMLResumeTypeSequenceLanguages; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Language.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_LanguagessequenceStructuredXMLResumeTypeschema_Languages_TxsdStructuredXMLResumeTypeSequenceLanguages_ struct {
	Languages *TxsdStructuredXMLResumeTypeSequenceLanguages `xml:"Languages"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LanguagessequenceStructuredXMLResumeTypeschema_Languages_TxsdStructuredXMLResumeTypeSequenceLanguages_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LanguagessequenceStructuredXMLResumeTypeschema_Languages_TxsdStructuredXMLResumeTypeSequenceLanguages_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LanguagessequenceStructuredXMLResumeTypeschema_Languages_TxsdStructuredXMLResumeTypeSequenceLanguages_ instance.
func (me *XsdGoPkgHasElem_LanguagessequenceStructuredXMLResumeTypeschema_Languages_TxsdStructuredXMLResumeTypeSequenceLanguages_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LanguagessequenceStructuredXMLResumeTypeschema_Languages_TxsdStructuredXMLResumeTypeSequenceLanguages_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Languages.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SecurityCredential struct {
	SecurityCredentials []*TCredentialType `xml:"SecurityCredential"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SecurityCredential function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SecurityCredential instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SecurityCredential instance.
func (me *XsdGoPkgHasElems_SecurityCredential) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SecurityCredential; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SecurityCredentials {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSecurityCredentials struct {
	XsdGoPkgHasElems_SecurityCredential
}

//	If the WalkHandlers.TxsdSecurityCredentials function is not nil (ie. was set by outside code), calls it with this TxsdSecurityCredentials instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdSecurityCredentials instance.
func (me *TxsdSecurityCredentials) Walk() (err error) {
	if fn := WalkHandlers.TxsdSecurityCredentials; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_SecurityCredential.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SecurityCredentials struct {
	SecurityCredentials *TxsdSecurityCredentials `xml:"SecurityCredentials"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SecurityCredentials function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SecurityCredentials instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SecurityCredentials instance.
func (me *XsdGoPkgHasElem_SecurityCredentials) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SecurityCredentials; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SecurityCredentials.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The type attribute of the parent element will identify the content of this element.  i.e. header, detail, etc.
type XsdGoPkgHasElems_DescriptionsequenceAdditionalItemTypeschema_Description_XsdtString_ struct {
	//	The type attribute of the parent element will identify the content of this element.  i.e. header, detail, etc.
	Descriptions []xsdt.String `xml:"Description"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DescriptionsequenceAdditionalItemTypeschema_Description_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DescriptionsequenceAdditionalItemTypeschema_Description_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DescriptionsequenceAdditionalItemTypeschema_Description_XsdtString_ instance.
func (me *XsdGoPkgHasElems_DescriptionsequenceAdditionalItemTypeschema_Description_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DescriptionsequenceAdditionalItemTypeschema_Description_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TResumeItemTypeTypes xsdt.String

//	Since TResumeItemTypeTypes is just a simple String type, this merely returns the current string value.
func (me TResumeItemTypeTypes) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TResumeItemTypeTypes's alias type xsdt.String.
func (me TResumeItemTypeTypes) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TResumeItemTypeTypes is "Activities".
func (me TResumeItemTypeTypes) IsActivities() bool { return me.String() == "Activities" }

//	Returns true if the value of this enumerated TResumeItemTypeTypes is "Interests".
func (me TResumeItemTypeTypes) IsInterests() bool { return me.String() == "Interests" }

//	Returns true if the value of this enumerated TResumeItemTypeTypes is "Community".
func (me TResumeItemTypeTypes) IsCommunity() bool { return me.String() == "Community" }

//	Since TResumeItemTypeTypes is just a simple String type, this merely sets the current value from the specified string.
func (me *TResumeItemTypeTypes) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TResumeItemTypeTypes is "Personal".
func (me TResumeItemTypeTypes) IsPersonal() bool { return me.String() == "Personal" }

//	Returns true if the value of this enumerated TResumeItemTypeTypes is "Hobbies".
func (me TResumeItemTypeTypes) IsHobbies() bool { return me.String() == "Hobbies" }

//	Returns true if the value of this enumerated TResumeItemTypeTypes is "Volunteer".
func (me TResumeItemTypeTypes) IsVolunteer() bool { return me.String() == "Volunteer" }

type TResumeItemTypes xsdt.String

//	Since TResumeItemTypes is just a simple String type, this merely sets the current value from the specified string.
func (me *TResumeItemTypes) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TResumeItemTypes is just a simple String type, this merely returns the current string value.
func (me TResumeItemTypes) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TResumeItemTypes's alias type xsdt.String.
func (me TResumeItemTypes) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	TResumeItemTypes is an XSD union-type of several types. This is a simple type conversion to TxStringPatternExtensionType, but keep in mind the actual value may or may not be a valid TxStringPatternExtensionType value.
func (me TResumeItemTypes) ToTxStringPatternExtensionType() TxStringPatternExtensionType {
	return TxStringPatternExtensionType(me)
}

//	TResumeItemTypes is an XSD union-type of several types. This is a simple type conversion to TResumeItemTypeTypes, but keep in mind the actual value may or may not be a valid TResumeItemTypeTypes value.
func (me TResumeItemTypes) ToTResumeItemTypeTypes() TResumeItemTypeTypes {
	return TResumeItemTypeTypes(me)
}

type XsdGoPkgHasAttr_Type_TResumeItemTypes_ struct {
	Type TResumeItemTypes `xml:"type,attr,omitempty"`
}

type TxsdAdditionalItemTypeSequenceEffectiveDate struct {
	XsdGoPkgHasElem_StartDatesequenceAssociationTypeschema_StartDate_TFlexibleDatesType_

	XsdGoPkgHasElem_EndDatesequenceAssociationTypeschema_EndDate_TFlexibleDatesType_
}

//	If the WalkHandlers.TxsdAdditionalItemTypeSequenceEffectiveDate function is not nil (ie. was set by outside code), calls it with this TxsdAdditionalItemTypeSequenceEffectiveDate instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdAdditionalItemTypeSequenceEffectiveDate instance.
func (me *TxsdAdditionalItemTypeSequenceEffectiveDate) Walk() (err error) {
	if fn := WalkHandlers.TxsdAdditionalItemTypeSequenceEffectiveDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_StartDatesequenceAssociationTypeschema_StartDate_TFlexibleDatesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EndDatesequenceAssociationTypeschema_EndDate_TFlexibleDatesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EffectiveDatesequenceAdditionalItemTypeschema_EffectiveDate_TxsdAdditionalItemTypeSequenceEffectiveDate_ struct {
	EffectiveDate *TxsdAdditionalItemTypeSequenceEffectiveDate `xml:"EffectiveDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EffectiveDatesequenceAdditionalItemTypeschema_EffectiveDate_TxsdAdditionalItemTypeSequenceEffectiveDate_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EffectiveDatesequenceAdditionalItemTypeschema_EffectiveDate_TxsdAdditionalItemTypeSequenceEffectiveDate_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_EffectiveDatesequenceAdditionalItemTypeschema_EffectiveDate_TxsdAdditionalItemTypeSequenceEffectiveDate_ instance.
func (me *XsdGoPkgHasElem_EffectiveDatesequenceAdditionalItemTypeschema_EffectiveDate_TxsdAdditionalItemTypeSequenceEffectiveDate_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EffectiveDatesequenceAdditionalItemTypeschema_EffectiveDate_TxsdAdditionalItemTypeSequenceEffectiveDate_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EffectiveDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAdditionalItemType struct {
	XsdGoPkgHasAttr_Type_TResumeItemTypes_

	XsdGoPkgHasElem_EffectiveDatesequenceAdditionalItemTypeschema_EffectiveDate_TxsdAdditionalItemTypeSequenceEffectiveDate_

	//	The type attribute of the parent element will identify the content of this element.  i.e. header, detail, etc.
	XsdGoPkgHasElems_DescriptionsequenceAdditionalItemTypeschema_Description_XsdtString_
}

//	If the WalkHandlers.TAdditionalItemType function is not nil (ie. was set by outside code), calls it with this TAdditionalItemType instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TAdditionalItemType instance.
func (me *TAdditionalItemType) Walk() (err error) {
	if fn := WalkHandlers.TAdditionalItemType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_EffectiveDatesequenceAdditionalItemTypeschema_EffectiveDate_TxsdAdditionalItemTypeSequenceEffectiveDate_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_DescriptionsequenceAdditionalItemTypeschema_Description_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ResumeAdditionalItem struct {
	ResumeAdditionalItems []*TAdditionalItemType `xml:"ResumeAdditionalItem"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ResumeAdditionalItem function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ResumeAdditionalItem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ResumeAdditionalItem instance.
func (me *XsdGoPkgHasElems_ResumeAdditionalItem) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ResumeAdditionalItem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ResumeAdditionalItems {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdStructuredXMLResumeTypeSequenceResumeAdditionalItems struct {
	XsdGoPkgHasElems_ResumeAdditionalItem
}

//	If the WalkHandlers.TxsdStructuredXMLResumeTypeSequenceResumeAdditionalItems function is not nil (ie. was set by outside code), calls it with this TxsdStructuredXMLResumeTypeSequenceResumeAdditionalItems instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdStructuredXMLResumeTypeSequenceResumeAdditionalItems instance.
func (me *TxsdStructuredXMLResumeTypeSequenceResumeAdditionalItems) Walk() (err error) {
	if fn := WalkHandlers.TxsdStructuredXMLResumeTypeSequenceResumeAdditionalItems; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_ResumeAdditionalItem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ResumeAdditionalItemssequenceStructuredXMLResumeTypeschema_ResumeAdditionalItems_TxsdStructuredXMLResumeTypeSequenceResumeAdditionalItems_ struct {
	ResumeAdditionalItems *TxsdStructuredXMLResumeTypeSequenceResumeAdditionalItems `xml:"ResumeAdditionalItems"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ResumeAdditionalItemssequenceStructuredXMLResumeTypeschema_ResumeAdditionalItems_TxsdStructuredXMLResumeTypeSequenceResumeAdditionalItems_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ResumeAdditionalItemssequenceStructuredXMLResumeTypeschema_ResumeAdditionalItems_TxsdStructuredXMLResumeTypeSequenceResumeAdditionalItems_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ResumeAdditionalItemssequenceStructuredXMLResumeTypeschema_ResumeAdditionalItems_TxsdStructuredXMLResumeTypeSequenceResumeAdditionalItems_ instance.
func (me *XsdGoPkgHasElem_ResumeAdditionalItemssequenceStructuredXMLResumeTypeschema_ResumeAdditionalItems_TxsdStructuredXMLResumeTypeSequenceResumeAdditionalItems_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ResumeAdditionalItemssequenceStructuredXMLResumeTypeschema_ResumeAdditionalItems_TxsdStructuredXMLResumeTypeSequenceResumeAdditionalItems_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ResumeAdditionalItems.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ExecutiveSummarysequenceStructuredXMLResumeTypeschema_ExecutiveSummary_XsdtString_ struct {
	ExecutiveSummary xsdt.String `xml:"ExecutiveSummary"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ExecutiveSummarysequenceStructuredXMLResumeTypeschema_ExecutiveSummary_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ExecutiveSummarysequenceStructuredXMLResumeTypeschema_ExecutiveSummary_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ExecutiveSummarysequenceStructuredXMLResumeTypeschema_ExecutiveSummary_XsdtString_ instance.
func (me *XsdGoPkgHasElem_ExecutiveSummarysequenceStructuredXMLResumeTypeschema_ExecutiveSummary_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ExecutiveSummarysequenceStructuredXMLResumeTypeschema_ExecutiveSummary_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ObjectivesequenceStructuredXMLResumeTypeschema_Objective_XsdtString_ struct {
	Objective xsdt.String `xml:"Objective"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ObjectivesequenceStructuredXMLResumeTypeschema_Objective_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ObjectivesequenceStructuredXMLResumeTypeschema_Objective_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ObjectivesequenceStructuredXMLResumeTypeschema_Objective_XsdtString_ instance.
func (me *XsdGoPkgHasElem_ObjectivesequenceStructuredXMLResumeTypeschema_Objective_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ObjectivesequenceStructuredXMLResumeTypeschema_Objective_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AssociationsequenceProfessionalAssociationTypeschema_Association_XsdtString_ struct {
	Associations []xsdt.String `xml:"Association"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AssociationsequenceProfessionalAssociationTypeschema_Association_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AssociationsequenceProfessionalAssociationTypeschema_Association_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AssociationsequenceProfessionalAssociationTypeschema_Association_XsdtString_ instance.
func (me *XsdGoPkgHasElems_AssociationsequenceProfessionalAssociationTypeschema_Association_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AssociationsequenceProfessionalAssociationTypeschema_Association_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TProfessionalAssociationType struct {
	XsdGoPkgHasElems_AssociationsequenceProfessionalAssociationTypeschema_Association_XsdtString_
}

//	If the WalkHandlers.TProfessionalAssociationType function is not nil (ie. was set by outside code), calls it with this TProfessionalAssociationType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TProfessionalAssociationType instance.
func (me *TProfessionalAssociationType) Walk() (err error) {
	if fn := WalkHandlers.TProfessionalAssociationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_AssociationsequenceProfessionalAssociationTypeschema_Association_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ProfessionalAssociationssequenceStructuredXMLResumeTypeschema_ProfessionalAssociations_TProfessionalAssociationType_ struct {
	ProfessionalAssociations *TProfessionalAssociationType `xml:"ProfessionalAssociations"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ProfessionalAssociationssequenceStructuredXMLResumeTypeschema_ProfessionalAssociations_TProfessionalAssociationType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ProfessionalAssociationssequenceStructuredXMLResumeTypeschema_ProfessionalAssociations_TProfessionalAssociationType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ProfessionalAssociationssequenceStructuredXMLResumeTypeschema_ProfessionalAssociations_TProfessionalAssociationType_ instance.
func (me *XsdGoPkgHasElem_ProfessionalAssociationssequenceStructuredXMLResumeTypeschema_ProfessionalAssociations_TProfessionalAssociationType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ProfessionalAssociationssequenceStructuredXMLResumeTypeschema_ProfessionalAssociations_TProfessionalAssociationType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ProfessionalAssociations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_QualificationSummarysequenceTxsdStructuredXMLResumeTypeSequenceQualificationsQualificationssequenceStructuredXMLResumeTypeschema_QualificationSummary_XsdtString_ struct {
	QualificationSummary xsdt.String `xml:"QualificationSummary"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_QualificationSummarysequenceTxsdStructuredXMLResumeTypeSequenceQualificationsQualificationssequenceStructuredXMLResumeTypeschema_QualificationSummary_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_QualificationSummarysequenceTxsdStructuredXMLResumeTypeSequenceQualificationsQualificationssequenceStructuredXMLResumeTypeschema_QualificationSummary_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_QualificationSummarysequenceTxsdStructuredXMLResumeTypeSequenceQualificationsQualificationssequenceStructuredXMLResumeTypeschema_QualificationSummary_XsdtString_ instance.
func (me *XsdGoPkgHasElem_QualificationSummarysequenceTxsdStructuredXMLResumeTypeSequenceQualificationsQualificationssequenceStructuredXMLResumeTypeschema_QualificationSummary_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_QualificationSummarysequenceTxsdStructuredXMLResumeTypeSequenceQualificationsQualificationssequenceStructuredXMLResumeTypeschema_QualificationSummary_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdStructuredXMLResumeTypeSequenceQualifications struct {
	XsdGoPkgHasElem_QualificationSummarysequenceTxsdStructuredXMLResumeTypeSequenceQualificationsQualificationssequenceStructuredXMLResumeTypeschema_QualificationSummary_XsdtString_

	XsdGoPkgHasElems_Competency
}

//	If the WalkHandlers.TxsdStructuredXMLResumeTypeSequenceQualifications function is not nil (ie. was set by outside code), calls it with this TxsdStructuredXMLResumeTypeSequenceQualifications instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdStructuredXMLResumeTypeSequenceQualifications instance.
func (me *TxsdStructuredXMLResumeTypeSequenceQualifications) Walk() (err error) {
	if fn := WalkHandlers.TxsdStructuredXMLResumeTypeSequenceQualifications; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_QualificationSummarysequenceTxsdStructuredXMLResumeTypeSequenceQualificationsQualificationssequenceStructuredXMLResumeTypeschema_QualificationSummary_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Competency.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_QualificationssequenceStructuredXMLResumeTypeschema_Qualifications_TxsdStructuredXMLResumeTypeSequenceQualifications_ struct {
	Qualifications *TxsdStructuredXMLResumeTypeSequenceQualifications `xml:"Qualifications"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_QualificationssequenceStructuredXMLResumeTypeschema_Qualifications_TxsdStructuredXMLResumeTypeSequenceQualifications_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_QualificationssequenceStructuredXMLResumeTypeschema_Qualifications_TxsdStructuredXMLResumeTypeSequenceQualifications_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_QualificationssequenceStructuredXMLResumeTypeschema_Qualifications_TxsdStructuredXMLResumeTypeSequenceQualifications_ instance.
func (me *XsdGoPkgHasElem_QualificationssequenceStructuredXMLResumeTypeschema_Qualifications_TxsdStructuredXMLResumeTypeSequenceQualifications_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_QualificationssequenceStructuredXMLResumeTypeschema_Qualifications_TxsdStructuredXMLResumeTypeSequenceQualifications_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Qualifications.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TStructuredXMLResumeType struct {
	XsdGoPkgHasElem_ExecutiveSummarysequenceStructuredXMLResumeTypeschema_ExecutiveSummary_XsdtString_

	XsdGoPkgHasElem_ObjectivesequenceStructuredXMLResumeTypeschema_Objective_XsdtString_

	XsdGoPkgHasElem_LicensesAndCertifications

	XsdGoPkgHasElem_SecurityCredentials

	XsdGoPkgHasElem_ResumeAdditionalItemssequenceStructuredXMLResumeTypeschema_ResumeAdditionalItems_TxsdStructuredXMLResumeTypeSequenceResumeAdditionalItems_

	XsdGoPkgHasElem_PatentHistory

	XsdGoPkgHasElem_QualificationssequenceStructuredXMLResumeTypeschema_Qualifications_TxsdStructuredXMLResumeTypeSequenceQualifications_

	XsdGoPkgHasElem_References

	XsdGoPkgHasElem_ProfessionalAssociationssequenceStructuredXMLResumeTypeschema_ProfessionalAssociations_TProfessionalAssociationType_

	XsdGoPkgHasElem_RevisionDatesequenceNonXMLResumeTypeschema_RevisionDate_TAnyDateTimeNkType_

	XsdGoPkgHasElem_ContactInfosequenceStructuredXMLResumeTypeschema_ContactInfo_TSEPContactInfoType_

	XsdGoPkgHasElem_EmploymentHistory

	XsdGoPkgHasElem_PublicationHistory

	XsdGoPkgHasElem_Associations

	XsdGoPkgHasElems_SupportingMaterialssequenceNonXMLResumeTypeschema_SupportingMaterials_TStaffingSupportingMaterialsType_

	XsdGoPkgHasGroup_Comments

	XsdGoPkgHasElem_EducationHistory

	XsdGoPkgHasElem_MilitaryHistory

	XsdGoPkgHasElem_SpeakingEventsHistory

	XsdGoPkgHasElem_LanguagessequenceStructuredXMLResumeTypeschema_Languages_TxsdStructuredXMLResumeTypeSequenceLanguages_

	XsdGoPkgHasElem_Achievements
}

//	If the WalkHandlers.TStructuredXMLResumeType function is not nil (ie. was set by outside code), calls it with this TStructuredXMLResumeType instance as the single argument. Then calls the Walk() method on 21/21 embed(s) and 0/0 field(s) belonging to this TStructuredXMLResumeType instance.
func (me *TStructuredXMLResumeType) Walk() (err error) {
	if fn := WalkHandlers.TStructuredXMLResumeType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ExecutiveSummarysequenceStructuredXMLResumeTypeschema_ExecutiveSummary_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ObjectivesequenceStructuredXMLResumeTypeschema_Objective_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LicensesAndCertifications.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SecurityCredentials.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ResumeAdditionalItemssequenceStructuredXMLResumeTypeschema_ResumeAdditionalItems_TxsdStructuredXMLResumeTypeSequenceResumeAdditionalItems_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PatentHistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_QualificationssequenceStructuredXMLResumeTypeschema_Qualifications_TxsdStructuredXMLResumeTypeSequenceQualifications_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_References.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ProfessionalAssociationssequenceStructuredXMLResumeTypeschema_ProfessionalAssociations_TProfessionalAssociationType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RevisionDatesequenceNonXMLResumeTypeschema_RevisionDate_TAnyDateTimeNkType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ContactInfosequenceStructuredXMLResumeTypeschema_ContactInfo_TSEPContactInfoType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EmploymentHistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PublicationHistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Associations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_SupportingMaterialssequenceNonXMLResumeTypeschema_SupportingMaterials_TStaffingSupportingMaterialsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasGroup_Comments.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EducationHistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MilitaryHistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SpeakingEventsHistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LanguagessequenceStructuredXMLResumeTypeschema_Languages_TxsdStructuredXMLResumeTypeSequenceLanguages_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Achievements.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_StructuredXMLResume struct {
	StructuredXMLResume *TStructuredXMLResumeType `xml:"StructuredXMLResume"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_StructuredXMLResume function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_StructuredXMLResume instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_StructuredXMLResume instance.
func (me *XsdGoPkgHasElem_StructuredXMLResume) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_StructuredXMLResume; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StructuredXMLResume.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdResume struct {
	XsdGoPkgHasElem_UserArea

	xml.XsdGoPkgHasAttr_Lang

	XsdGoPkgHasElem_ResumeIdsequenceTxsdResumeResumeschema_ResumeId_TEntityIdType_

	XsdGoPkgHasElem_DistributionGuidelinessequenceTxsdResumeResumeschema_DistributionGuidelines_TDistributionGuidelinesType_

	XsdGoPkgHasElem_StructuredXMLResume

	XsdGoPkgHasElem_NonXMLResume
}

//	If the WalkHandlers.TxsdResume function is not nil (ie. was set by outside code), calls it with this TxsdResume instance as the single argument. Then calls the Walk() method on 5/6 embed(s) and 0/0 field(s) belonging to this TxsdResume instance.
func (me *TxsdResume) Walk() (err error) {
	if fn := WalkHandlers.TxsdResume; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_NonXMLResume.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_UserArea.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ResumeIdsequenceTxsdResumeResumeschema_ResumeId_TEntityIdType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DistributionGuidelinessequenceTxsdResumeResumeschema_DistributionGuidelines_TDistributionGuidelinesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_StructuredXMLResume.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Resume struct {
	Resume *TxsdResume `xml:"Resume"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Resume function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Resume instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Resume instance.
func (me *XsdGoPkgHasElem_Resume) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Resume; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Resume.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Resume struct {
	Resumes []*TxsdResume `xml:"Resume"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Resume function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Resume instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Resume instance.
func (me *XsdGoPkgHasElems_Resume) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Resume; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Resumes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ResumeAdditionalItem struct {
	ResumeAdditionalItem *TAdditionalItemType `xml:"ResumeAdditionalItem"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ResumeAdditionalItem function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ResumeAdditionalItem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ResumeAdditionalItem instance.
func (me *XsdGoPkgHasElem_ResumeAdditionalItem) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ResumeAdditionalItem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ResumeAdditionalItem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SecurityCredential struct {
	SecurityCredential *TCredentialType `xml:"SecurityCredential"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SecurityCredential function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SecurityCredential instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SecurityCredential instance.
func (me *XsdGoPkgHasElem_SecurityCredential) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SecurityCredential; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SecurityCredential.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SecurityCredentials struct {
	SecurityCredentialses []*TxsdSecurityCredentials `xml:"SecurityCredentials"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SecurityCredentials function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SecurityCredentials instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SecurityCredentials instance.
func (me *XsdGoPkgHasElems_SecurityCredentials) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SecurityCredentials; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SecurityCredentialses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SpeakingEvent struct {
	SpeakingEvent *TSpeakingEventType `xml:"SpeakingEvent"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SpeakingEvent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SpeakingEvent instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SpeakingEvent instance.
func (me *XsdGoPkgHasElem_SpeakingEvent) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SpeakingEvent; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SpeakingEvent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SpeakingEventsHistory struct {
	SpeakingEventsHistories []*TxsdSpeakingEventsHistory `xml:"SpeakingEventsHistory"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SpeakingEventsHistory function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SpeakingEventsHistory instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SpeakingEventsHistory instance.
func (me *XsdGoPkgHasElems_SpeakingEventsHistory) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SpeakingEventsHistory; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SpeakingEventsHistories {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_StringValue struct {
	StringValues []*TxsdStringValue `xml:"StringValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_StringValue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_StringValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_StringValue instance.
func (me *XsdGoPkgHasElems_StringValue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_StringValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.StringValues {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_StructuredXMLResume struct {
	StructuredXMLResumes []*TStructuredXMLResumeType `xml:"StructuredXMLResume"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_StructuredXMLResume function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_StructuredXMLResume instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_StructuredXMLResume instance.
func (me *XsdGoPkgHasElems_StructuredXMLResume) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_StructuredXMLResume; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.StructuredXMLResumes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SubscriberNumber struct {
	SubscriberNumbers []xsdt.String `xml:"SubscriberNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SubscriberNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SubscriberNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SubscriberNumber instance.
func (me *XsdGoPkgHasElems_SubscriberNumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SubscriberNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SupportingInformation struct {
	SupportingInformation xsdt.String `xml:"SupportingInformation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SupportingInformation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SupportingInformation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SupportingInformation instance.
func (me *XsdGoPkgHasElem_SupportingInformation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SupportingInformation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Telephone struct {
	Telephones []*TelcomNumberType `xml:"Telephone"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Telephone function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Telephone instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Telephone instance.
func (me *XsdGoPkgHasElems_Telephone) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Telephone; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Telephones {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Ttytdd struct {
	Ttytdds []*TelcomNumberType `xml:"TTYTDD"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Ttytdd function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Ttytdd instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Ttytdd instance.
func (me *XsdGoPkgHasElems_Ttytdd) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Ttytdd; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Ttytdds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Use struct {
	Uses []TcontactMethodUsePatternExtensionType `xml:"Use"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Use function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Use instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Use instance.
func (me *XsdGoPkgHasElems_Use) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Use; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	HR-XML Technical Steering Committee endorsed extension element.
type XsdGoPkgHasElems_UserArea struct {
	//	HR-XML Technical Steering Committee endorsed extension element.
	UserAreas []*TUserAreaType `xml:"UserArea"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_UserArea function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_UserArea instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_UserArea instance.
func (me *XsdGoPkgHasElems_UserArea) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_UserArea; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.UserAreas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_WhenAvailable struct {
	WhenAvailables []TcontactMethodWhenAvailableType `xml:"WhenAvailable"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_WhenAvailable function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_WhenAvailable instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_WhenAvailable instance.
func (me *XsdGoPkgHasElems_WhenAvailable) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_WhenAvailable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ReadsequenceLanguageschema_Read_XsdtBoolean_ struct {
	Reads []xsdt.Boolean `xml:"Read"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ReadsequenceLanguageschema_Read_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ReadsequenceLanguageschema_Read_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ReadsequenceLanguageschema_Read_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElems_ReadsequenceLanguageschema_Read_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ReadsequenceLanguageschema_Read_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DeliverablesequenceRolesequenceAssociationTypeschema_Deliverable_XsdtString_ struct {
	Deliverable xsdt.String `xml:"Deliverable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DeliverablesequenceRolesequenceAssociationTypeschema_Deliverable_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DeliverablesequenceRolesequenceAssociationTypeschema_Deliverable_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DeliverablesequenceRolesequenceAssociationTypeschema_Deliverable_XsdtString_ instance.
func (me *XsdGoPkgHasElem_DeliverablesequenceRolesequenceAssociationTypeschema_Deliverable_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DeliverablesequenceRolesequenceAssociationTypeschema_Deliverable_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DistributeTosequenceDistributionGuidelinesTypeschema_DistributeTo_TxsdDistributionGuidelinesTypeSequenceDistributeTo_ struct {
	DistributeTo *TxsdDistributionGuidelinesTypeSequenceDistributeTo `xml:"DistributeTo"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DistributeTosequenceDistributionGuidelinesTypeschema_DistributeTo_TxsdDistributionGuidelinesTypeSequenceDistributeTo_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DistributeTosequenceDistributionGuidelinesTypeschema_DistributeTo_TxsdDistributionGuidelinesTypeSequenceDistributeTo_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DistributeTosequenceDistributionGuidelinesTypeschema_DistributeTo_TxsdDistributionGuidelinesTypeSequenceDistributeTo_ instance.
func (me *XsdGoPkgHasElem_DistributeTosequenceDistributionGuidelinesTypeschema_DistributeTo_TxsdDistributionGuidelinesTypeSequenceDistributeTo_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DistributeTosequenceDistributionGuidelinesTypeschema_DistributeTo_TxsdDistributionGuidelinesTypeSequenceDistributeTo_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DistributeTo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAnyLocalDateYearMonthDayType xsdt.Date

//	Since TAnyLocalDateYearMonthDayType is just a simple String type, this merely sets the current value from the specified string.
func (me *TAnyLocalDateYearMonthDayType) Set(s string) { (*xsdt.Date)(me).Set(s) }

//	Since TAnyLocalDateYearMonthDayType is just a simple String type, this merely returns the current string value.
func (me TAnyLocalDateYearMonthDayType) String() string { return xsdt.Date(me).String() }

//	This convenience method just performs a simple type conversion to TAnyLocalDateYearMonthDayType's alias type xsdt.Date.
func (me TAnyLocalDateYearMonthDayType) ToXsdtDate() xsdt.Date { return xsdt.Date(me) }

type XsdGoPkgHasElems_ISSNsequenceextensioncomplexContentBookTypeschema_Issn_TissnType_ struct {
	Issns []TissnType `xml:"ISSN"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ISSNsequenceextensioncomplexContentBookTypeschema_Issn_TissnType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ISSNsequenceextensioncomplexContentBookTypeschema_Issn_TissnType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ISSNsequenceextensioncomplexContentBookTypeschema_Issn_TissnType_ instance.
func (me *XsdGoPkgHasElems_ISSNsequenceextensioncomplexContentBookTypeschema_Issn_TissnType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ISSNsequenceextensioncomplexContentBookTypeschema_Issn_TissnType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RegionsequencePostalAddressTypeschema_Region_XsdtString_ struct {
	Region xsdt.String `xml:"Region"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RegionsequencePostalAddressTypeschema_Region_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RegionsequencePostalAddressTypeschema_Region_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_RegionsequencePostalAddressTypeschema_Region_XsdtString_ instance.
func (me *XsdGoPkgHasElem_RegionsequencePostalAddressTypeschema_Region_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RegionsequencePostalAddressTypeschema_Region_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_StringValuechoiceRatingTypeschema_StringValue_TxsdRatingTypeChoiceStringValue_ struct {
	StringValues []*TxsdStringValue `xml:"StringValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_StringValuechoiceRatingTypeschema_StringValue_TxsdRatingTypeChoiceStringValue_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_StringValuechoiceRatingTypeschema_StringValue_TxsdRatingTypeChoiceStringValue_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_StringValuechoiceRatingTypeschema_StringValue_TxsdRatingTypeChoiceStringValue_ instance.
func (me *XsdGoPkgHasElems_StringValuechoiceRatingTypeschema_StringValue_TxsdRatingTypeChoiceStringValue_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_StringValuechoiceRatingTypeschema_StringValue_TxsdRatingTypeChoiceStringValue_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.StringValues {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PageNumbersequenceextensioncomplexContentArticleTypeschema_PageNumber_XsdtString_ struct {
	PageNumbers []xsdt.String `xml:"PageNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PageNumbersequenceextensioncomplexContentArticleTypeschema_PageNumber_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PageNumbersequenceextensioncomplexContentArticleTypeschema_PageNumber_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PageNumbersequenceextensioncomplexContentArticleTypeschema_PageNumber_XsdtString_ instance.
func (me *XsdGoPkgHasElems_PageNumbersequenceextensioncomplexContentArticleTypeschema_PageNumber_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PageNumbersequenceextensioncomplexContentArticleTypeschema_PageNumber_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AdditionalTextsequenceRecipientsequencePostalAddressTypeschema_AdditionalText_XsdtString_ struct {
	AdditionalText xsdt.String `xml:"AdditionalText"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AdditionalTextsequenceRecipientsequencePostalAddressTypeschema_AdditionalText_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AdditionalTextsequenceRecipientsequencePostalAddressTypeschema_AdditionalText_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AdditionalTextsequenceRecipientsequencePostalAddressTypeschema_AdditionalText_XsdtString_ instance.
func (me *XsdGoPkgHasElem_AdditionalTextsequenceRecipientsequencePostalAddressTypeschema_AdditionalText_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AdditionalTextsequenceRecipientsequencePostalAddressTypeschema_AdditionalText_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ContactMethodsequenceContactInfosequenceVerificationTypeschema_ContactMethod_TContactMethodType_ struct {
	ContactMethod *TContactMethodType `xml:"ContactMethod"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ContactMethodsequenceContactInfosequenceVerificationTypeschema_ContactMethod_TContactMethodType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ContactMethodsequenceContactInfosequenceVerificationTypeschema_ContactMethod_TContactMethodType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ContactMethodsequenceContactInfosequenceVerificationTypeschema_ContactMethod_TContactMethodType_ instance.
func (me *XsdGoPkgHasElem_ContactMethodsequenceContactInfosequenceVerificationTypeschema_ContactMethod_TContactMethodType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ContactMethodsequenceContactInfosequenceVerificationTypeschema_ContactMethod_TContactMethodType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ContactMethod.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CommentssequenceTxsdLanguageLanguageschema_Comments_XsdtString_ struct {
	Commentses []xsdt.String `xml:"Comments"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CommentssequenceTxsdLanguageLanguageschema_Comments_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CommentssequenceTxsdLanguageLanguageschema_Comments_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CommentssequenceTxsdLanguageLanguageschema_Comments_XsdtString_ instance.
func (me *XsdGoPkgHasElems_CommentssequenceTxsdLanguageLanguageschema_Comments_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CommentssequenceTxsdLanguageLanguageschema_Comments_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PostOfficeBoxsequenceDeliveryAddresssequencePostalAddressTypeschema_PostOfficeBox_XsdtString_ struct {
	PostOfficeBoxs []xsdt.String `xml:"PostOfficeBox"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PostOfficeBoxsequenceDeliveryAddresssequencePostalAddressTypeschema_PostOfficeBox_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PostOfficeBoxsequenceDeliveryAddresssequencePostalAddressTypeschema_PostOfficeBox_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PostOfficeBoxsequenceDeliveryAddresssequencePostalAddressTypeschema_PostOfficeBox_XsdtString_ instance.
func (me *XsdGoPkgHasElems_PostOfficeBoxsequenceDeliveryAddresssequencePostalAddressTypeschema_PostOfficeBox_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PostOfficeBoxsequenceDeliveryAddresssequencePostalAddressTypeschema_PostOfficeBox_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CompensationsequencePositionHistoryTypeschema_Compensation_TPositionCompensationType_ struct {
	Compensations []*TPositionCompensationType `xml:"Compensation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CompensationsequencePositionHistoryTypeschema_Compensation_TPositionCompensationType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CompensationsequencePositionHistoryTypeschema_Compensation_TPositionCompensationType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CompensationsequencePositionHistoryTypeschema_Compensation_TPositionCompensationType_ instance.
func (me *XsdGoPkgHasElems_CompensationsequencePositionHistoryTypeschema_Compensation_TPositionCompensationType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CompensationsequencePositionHistoryTypeschema_Compensation_TPositionCompensationType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Compensations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PublicationDatesequenceBasicBibliographicRecordTypeschema_PublicationDate_TFlexibleDatesType_ struct {
	PublicationDates []*TFlexibleDatesType `xml:"PublicationDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PublicationDatesequenceBasicBibliographicRecordTypeschema_PublicationDate_TFlexibleDatesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PublicationDatesequenceBasicBibliographicRecordTypeschema_PublicationDate_TFlexibleDatesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PublicationDatesequenceBasicBibliographicRecordTypeschema_PublicationDate_TFlexibleDatesType_ instance.
func (me *XsdGoPkgHasElems_PublicationDatesequenceBasicBibliographicRecordTypeschema_PublicationDate_TFlexibleDatesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PublicationDatesequenceBasicBibliographicRecordTypeschema_PublicationDate_TFlexibleDatesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PublicationDates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	This is the total number of credits (credit hours) attemptedand earned and included in this summary.
type XsdGoPkgHasElems_AcademicCreditHoursEarnedsequenceEducationalMeasureTypeschema_AcademicCreditHoursEarned_XsdtDecimal_ struct {
	//	This is the total number of credits (credit hours) attemptedand earned and included in this summary.
	AcademicCreditHoursEarneds []xsdt.Decimal `xml:"AcademicCreditHoursEarned"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AcademicCreditHoursEarnedsequenceEducationalMeasureTypeschema_AcademicCreditHoursEarned_XsdtDecimal_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AcademicCreditHoursEarnedsequenceEducationalMeasureTypeschema_AcademicCreditHoursEarned_XsdtDecimal_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AcademicCreditHoursEarnedsequenceEducationalMeasureTypeschema_AcademicCreditHoursEarned_XsdtDecimal_ instance.
func (me *XsdGoPkgHasElems_AcademicCreditHoursEarnedsequenceEducationalMeasureTypeschema_AcademicCreditHoursEarned_XsdtDecimal_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AcademicCreditHoursEarnedsequenceEducationalMeasureTypeschema_AcademicCreditHoursEarned_XsdtDecimal_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DischargeStatussequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DischargeStatus_XsdtString_ struct {
	DischargeStatuses []xsdt.String `xml:"DischargeStatus"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DischargeStatussequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DischargeStatus_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DischargeStatussequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DischargeStatus_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DischargeStatussequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DischargeStatus_XsdtString_ instance.
func (me *XsdGoPkgHasElems_DischargeStatussequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DischargeStatus_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DischargeStatussequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DischargeStatus_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MonthDaychoiceFlexibleDatesTypeschema_MonthDay_XsdtGMonthDay_ struct {
	MonthDays []xsdt.GMonthDay `xml:"MonthDay"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MonthDaychoiceFlexibleDatesTypeschema_MonthDay_XsdtGMonthDay_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MonthDaychoiceFlexibleDatesTypeschema_MonthDay_XsdtGMonthDay_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MonthDaychoiceFlexibleDatesTypeschema_MonthDay_XsdtGMonthDay_ instance.
func (me *XsdGoPkgHasElems_MonthDaychoiceFlexibleDatesTypeschema_MonthDay_XsdtGMonthDay_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MonthDaychoiceFlexibleDatesTypeschema_MonthDay_XsdtGMonthDay_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EffectiveDatesequenceAdditionalItemTypeschema_EffectiveDate_TxsdAdditionalItemTypeSequenceEffectiveDate_ struct {
	EffectiveDates []*TxsdAdditionalItemTypeSequenceEffectiveDate `xml:"EffectiveDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EffectiveDatesequenceAdditionalItemTypeschema_EffectiveDate_TxsdAdditionalItemTypeSequenceEffectiveDate_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EffectiveDatesequenceAdditionalItemTypeschema_EffectiveDate_TxsdAdditionalItemTypeSequenceEffectiveDate_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EffectiveDatesequenceAdditionalItemTypeschema_EffectiveDate_TxsdAdditionalItemTypeSequenceEffectiveDate_ instance.
func (me *XsdGoPkgHasElems_EffectiveDatesequenceAdditionalItemTypeschema_EffectiveDate_TxsdAdditionalItemTypeSequenceEffectiveDate_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EffectiveDatesequenceAdditionalItemTypeschema_EffectiveDate_TxsdAdditionalItemTypeSequenceEffectiveDate_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EffectiveDates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EmployerOrgNamesequenceEmployerOrgDataTypeschema_EmployerOrgName_XsdtString_ struct {
	EmployerOrgNames []xsdt.String `xml:"EmployerOrgName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EmployerOrgNamesequenceEmployerOrgDataTypeschema_EmployerOrgName_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EmployerOrgNamesequenceEmployerOrgDataTypeschema_EmployerOrgName_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EmployerOrgNamesequenceEmployerOrgDataTypeschema_EmployerOrgName_XsdtString_ instance.
func (me *XsdGoPkgHasElems_EmployerOrgNamesequenceEmployerOrgDataTypeschema_EmployerOrgName_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EmployerOrgNamesequenceEmployerOrgDataTypeschema_EmployerOrgName_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SupportingMaterialssequenceStructuredXMLResumeTypeschema_SupportingMaterials_TStaffingSupportingMaterialsType_ struct {
	SupportingMaterials *TStaffingSupportingMaterialsType `xml:"SupportingMaterials"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SupportingMaterialssequenceStructuredXMLResumeTypeschema_SupportingMaterials_TStaffingSupportingMaterialsType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SupportingMaterialssequenceStructuredXMLResumeTypeschema_SupportingMaterials_TStaffingSupportingMaterialsType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SupportingMaterialssequenceStructuredXMLResumeTypeschema_SupportingMaterials_TStaffingSupportingMaterialsType_ instance.
func (me *XsdGoPkgHasElem_SupportingMaterialssequenceStructuredXMLResumeTypeschema_SupportingMaterials_TStaffingSupportingMaterialsType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SupportingMaterialssequenceStructuredXMLResumeTypeschema_SupportingMaterials_TStaffingSupportingMaterialsType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SupportingMaterials.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The grade point average of a student.
type XsdGoPkgHasElems_MeasureValuesequenceEducationMeasureTypeschema_MeasureValue_TMeasureValueType_ struct {
	//	The grade point average of a student.
	MeasureValues []*TMeasureValueType `xml:"MeasureValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MeasureValuesequenceEducationMeasureTypeschema_MeasureValue_TMeasureValueType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MeasureValuesequenceEducationMeasureTypeschema_MeasureValue_TMeasureValueType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MeasureValuesequenceEducationMeasureTypeschema_MeasureValue_TMeasureValueType_ instance.
func (me *XsdGoPkgHasElems_MeasureValuesequenceEducationMeasureTypeschema_MeasureValue_TMeasureValueType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MeasureValuesequenceEducationMeasureTypeschema_MeasureValue_TMeasureValueType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MeasureValues {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_NumberOfPagessequenceextensioncomplexContentBookTypeschema_NumberOfPages_XsdtPositiveInteger_ struct {
	NumberOfPageses []xsdt.PositiveInteger `xml:"NumberOfPages"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NumberOfPagessequenceextensioncomplexContentBookTypeschema_NumberOfPages_XsdtPositiveInteger_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NumberOfPagessequenceextensioncomplexContentBookTypeschema_NumberOfPages_XsdtPositiveInteger_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NumberOfPagessequenceextensioncomplexContentBookTypeschema_NumberOfPages_XsdtPositiveInteger_ instance.
func (me *XsdGoPkgHasElems_NumberOfPagessequenceextensioncomplexContentBookTypeschema_NumberOfPages_XsdtPositiveInteger_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NumberOfPagessequenceextensioncomplexContentBookTypeschema_NumberOfPages_XsdtPositiveInteger_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RevisionDatesequenceStructuredXMLResumeTypeschema_RevisionDate_TAnyDateTimeNkType_ struct {
	RevisionDates []TAnyDateTimeNkType `xml:"RevisionDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RevisionDatesequenceStructuredXMLResumeTypeschema_RevisionDate_TAnyDateTimeNkType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RevisionDatesequenceStructuredXMLResumeTypeschema_RevisionDate_TAnyDateTimeNkType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RevisionDatesequenceStructuredXMLResumeTypeschema_RevisionDate_TAnyDateTimeNkType_ instance.
func (me *XsdGoPkgHasElems_RevisionDatesequenceStructuredXMLResumeTypeschema_RevisionDate_TAnyDateTimeNkType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RevisionDatesequenceStructuredXMLResumeTypeschema_RevisionDate_TAnyDateTimeNkType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AttendanceRatingsequenceVerificationTypeschema_AttendanceRating_TRatingType_ struct {
	AttendanceRatings []*TRatingType `xml:"AttendanceRating"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AttendanceRatingsequenceVerificationTypeschema_AttendanceRating_TRatingType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AttendanceRatingsequenceVerificationTypeschema_AttendanceRating_TRatingType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AttendanceRatingsequenceVerificationTypeschema_AttendanceRating_TRatingType_ instance.
func (me *XsdGoPkgHasElems_AttendanceRatingsequenceVerificationTypeschema_AttendanceRating_TRatingType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AttendanceRatingsequenceVerificationTypeschema_AttendanceRating_TRatingType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AttendanceRatings {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_BuildingNumbersequenceDeliveryAddresssequencePostalAddressTypeschema_BuildingNumber_XsdtString_ struct {
	BuildingNumbers []xsdt.String `xml:"BuildingNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_BuildingNumbersequenceDeliveryAddresssequencePostalAddressTypeschema_BuildingNumber_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BuildingNumbersequenceDeliveryAddresssequencePostalAddressTypeschema_BuildingNumber_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BuildingNumbersequenceDeliveryAddresssequencePostalAddressTypeschema_BuildingNumber_XsdtString_ instance.
func (me *XsdGoPkgHasElems_BuildingNumbersequenceDeliveryAddresssequencePostalAddressTypeschema_BuildingNumber_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_BuildingNumbersequenceDeliveryAddresssequencePostalAddressTypeschema_BuildingNumber_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ReasonForLeavingsequenceVerificationTypeschema_ReasonForLeaving_XsdtString_ struct {
	ReasonForLeavings []xsdt.String `xml:"ReasonForLeaving"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ReasonForLeavingsequenceVerificationTypeschema_ReasonForLeaving_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ReasonForLeavingsequenceVerificationTypeschema_ReasonForLeaving_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ReasonForLeavingsequenceVerificationTypeschema_ReasonForLeaving_XsdtString_ instance.
func (me *XsdGoPkgHasElems_ReasonForLeavingsequenceVerificationTypeschema_ReasonForLeaving_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ReasonForLeavingsequenceVerificationTypeschema_ReasonForLeaving_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AbstractsequenceBasicBibliographicRecordTypeschema_Abstract_XsdtString_ struct {
	Abstracts []xsdt.String `xml:"Abstract"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AbstractsequenceBasicBibliographicRecordTypeschema_Abstract_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AbstractsequenceBasicBibliographicRecordTypeschema_Abstract_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AbstractsequenceBasicBibliographicRecordTypeschema_Abstract_XsdtString_ instance.
func (me *XsdGoPkgHasElems_AbstractsequenceBasicBibliographicRecordTypeschema_Abstract_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AbstractsequenceBasicBibliographicRecordTypeschema_Abstract_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SpeaksequenceTxsdLanguageLanguageschema_Speak_XsdtBoolean_ struct {
	Speaks []xsdt.Boolean `xml:"Speak"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SpeaksequenceTxsdLanguageLanguageschema_Speak_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SpeaksequenceTxsdLanguageLanguageschema_Speak_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SpeaksequenceTxsdLanguageLanguageschema_Speak_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElems_SpeaksequenceTxsdLanguageLanguageschema_Speak_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SpeaksequenceTxsdLanguageLanguageschema_Speak_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ValidFromsequenceEffectiveDatesequenceCredentialTypeschema_ValidFrom_TFlexibleDatesType_ struct {
	ValidFroms []*TFlexibleDatesType `xml:"ValidFrom"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ValidFromsequenceEffectiveDatesequenceCredentialTypeschema_ValidFrom_TFlexibleDatesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ValidFromsequenceEffectiveDatesequenceCredentialTypeschema_ValidFrom_TFlexibleDatesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ValidFromsequenceEffectiveDatesequenceCredentialTypeschema_ValidFrom_TFlexibleDatesType_ instance.
func (me *XsdGoPkgHasElems_ValidFromsequenceEffectiveDatesequenceCredentialTypeschema_ValidFrom_TFlexibleDatesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ValidFromsequenceEffectiveDatesequenceCredentialTypeschema_ValidFrom_TFlexibleDatesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ValidFroms {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AffiliatedOrganizationsequenceSpeakingEventTypeschema_AffiliatedOrganization_XsdtString_ struct {
	AffiliatedOrganization xsdt.String `xml:"AffiliatedOrganization"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AffiliatedOrganizationsequenceSpeakingEventTypeschema_AffiliatedOrganization_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AffiliatedOrganizationsequenceSpeakingEventTypeschema_AffiliatedOrganization_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AffiliatedOrganizationsequenceSpeakingEventTypeschema_AffiliatedOrganization_XsdtString_ instance.
func (me *XsdGoPkgHasElem_AffiliatedOrganizationsequenceSpeakingEventTypeschema_AffiliatedOrganization_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AffiliatedOrganizationsequenceSpeakingEventTypeschema_AffiliatedOrganization_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PatentDetailsequencePatentDescriptionTypeschema_PatentDetail_TxsdPatentDescriptionTypeSequencePatentDetail_ struct {
	PatentDetail *TxsdPatentDescriptionTypeSequencePatentDetail `xml:"PatentDetail"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PatentDetailsequencePatentDescriptionTypeschema_PatentDetail_TxsdPatentDescriptionTypeSequencePatentDetail_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PatentDetailsequencePatentDescriptionTypeschema_PatentDetail_TxsdPatentDescriptionTypeSequencePatentDetail_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PatentDetailsequencePatentDescriptionTypeschema_PatentDetail_TxsdPatentDescriptionTypeSequencePatentDetail_ instance.
func (me *XsdGoPkgHasElem_PatentDetailsequencePatentDescriptionTypeschema_PatentDetail_TxsdPatentDescriptionTypeSequencePatentDetail_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PatentDetailsequencePatentDescriptionTypeschema_PatentDetail_TxsdPatentDescriptionTypeSequencePatentDetail_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PatentDetail.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FormattedNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_FormattedName_XsdtString_ struct {
	FormattedNames []xsdt.String `xml:"FormattedName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FormattedNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_FormattedName_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FormattedNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_FormattedName_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FormattedNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_FormattedName_XsdtString_ instance.
func (me *XsdGoPkgHasElems_FormattedNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_FormattedName_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FormattedNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_FormattedName_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SchoolOrInstitutionsequenceEducationHistoryTypeschema_SchoolOrInstitution_TSchoolOrInstitutionType_ struct {
	SchoolOrInstitution *TSchoolOrInstitutionType `xml:"SchoolOrInstitution"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SchoolOrInstitutionsequenceEducationHistoryTypeschema_SchoolOrInstitution_TSchoolOrInstitutionType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SchoolOrInstitutionsequenceEducationHistoryTypeschema_SchoolOrInstitution_TSchoolOrInstitutionType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SchoolOrInstitutionsequenceEducationHistoryTypeschema_SchoolOrInstitution_TSchoolOrInstitutionType_ instance.
func (me *XsdGoPkgHasElem_SchoolOrInstitutionsequenceEducationHistoryTypeschema_SchoolOrInstitution_TSchoolOrInstitutionType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SchoolOrInstitutionsequenceEducationHistoryTypeschema_SchoolOrInstitution_TSchoolOrInstitutionType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SchoolOrInstitution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAnyLocalDateYearType xsdt.GYear

//	Since TAnyLocalDateYearType is just a simple String type, this merely returns the current string value.
func (me TAnyLocalDateYearType) String() string { return xsdt.GYear(me).String() }

//	This convenience method just performs a simple type conversion to TAnyLocalDateYearType's alias type xsdt.GYear.
func (me TAnyLocalDateYearType) ToXsdtGYear() xsdt.GYear { return xsdt.GYear(me) }

//	Since TAnyLocalDateYearType is just a simple String type, this merely sets the current value from the specified string.
func (me *TAnyLocalDateYearType) Set(s string) { (*xsdt.GYear)(me).Set(s) }

type XsdGoPkgHasElems_QualificationssequenceStructuredXMLResumeTypeschema_Qualifications_TxsdStructuredXMLResumeTypeSequenceQualifications_ struct {
	Qualificationses []*TxsdStructuredXMLResumeTypeSequenceQualifications `xml:"Qualifications"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_QualificationssequenceStructuredXMLResumeTypeschema_Qualifications_TxsdStructuredXMLResumeTypeSequenceQualifications_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_QualificationssequenceStructuredXMLResumeTypeschema_Qualifications_TxsdStructuredXMLResumeTypeSequenceQualifications_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_QualificationssequenceStructuredXMLResumeTypeschema_Qualifications_TxsdStructuredXMLResumeTypeSequenceQualifications_ instance.
func (me *XsdGoPkgHasElems_QualificationssequenceStructuredXMLResumeTypeschema_Qualifications_TxsdStructuredXMLResumeTypeSequenceQualifications_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_QualificationssequenceStructuredXMLResumeTypeschema_Qualifications_TxsdStructuredXMLResumeTypeSequenceQualifications_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Qualificationses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AffixsequencePersonNameTypeschema_Affix_TxsdPersonNameTypeSequenceAffix_ struct {
	Affix *TxsdPersonNameTypeSequenceAffix `xml:"Affix"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AffixsequencePersonNameTypeschema_Affix_TxsdPersonNameTypeSequenceAffix_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AffixsequencePersonNameTypeschema_Affix_TxsdPersonNameTypeSequenceAffix_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AffixsequencePersonNameTypeschema_Affix_TxsdPersonNameTypeSequenceAffix_ instance.
func (me *XsdGoPkgHasElem_AffixsequencePersonNameTypeschema_Affix_TxsdPersonNameTypeSequenceAffix_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AffixsequencePersonNameTypeschema_Affix_TxsdPersonNameTypeSequenceAffix_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Affix.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_NonStandardValuechoiceSourceTypeTypeschema_NonStandardValue_XsdtString_ struct {
	NonStandardValues []xsdt.String `xml:"NonStandardValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NonStandardValuechoiceSourceTypeTypeschema_NonStandardValue_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NonStandardValuechoiceSourceTypeTypeschema_NonStandardValue_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NonStandardValuechoiceSourceTypeTypeschema_NonStandardValue_XsdtString_ instance.
func (me *XsdGoPkgHasElems_NonStandardValuechoiceSourceTypeTypeschema_NonStandardValue_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NonStandardValuechoiceSourceTypeTypeschema_NonStandardValue_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EventNamesequenceextensioncomplexContentConferencePaperTypeschema_EventName_XsdtString_ struct {
	EventNames []xsdt.String `xml:"EventName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EventNamesequenceextensioncomplexContentConferencePaperTypeschema_EventName_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EventNamesequenceextensioncomplexContentConferencePaperTypeschema_EventName_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EventNamesequenceextensioncomplexContentConferencePaperTypeschema_EventName_XsdtString_ instance.
func (me *XsdGoPkgHasElems_EventNamesequenceextensioncomplexContentConferencePaperTypeschema_EventName_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EventNamesequenceextensioncomplexContentConferencePaperTypeschema_EventName_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_OriginalDatesequenceTxsdCopyrightTypeSequenceCopyrightDatesCopyrightDatessequenceCopyrightTypeschema_OriginalDate_TFlexibleDatesType_ struct {
	OriginalDates []*TFlexibleDatesType `xml:"OriginalDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OriginalDatesequenceTxsdCopyrightTypeSequenceCopyrightDatesCopyrightDatessequenceCopyrightTypeschema_OriginalDate_TFlexibleDatesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OriginalDatesequenceTxsdCopyrightTypeSequenceCopyrightDatesCopyrightDatessequenceCopyrightTypeschema_OriginalDate_TFlexibleDatesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OriginalDatesequenceTxsdCopyrightTypeSequenceCopyrightDatesCopyrightDatessequenceCopyrightTypeschema_OriginalDate_TFlexibleDatesType_ instance.
func (me *XsdGoPkgHasElems_OriginalDatesequenceTxsdCopyrightTypeSequenceCopyrightDatesCopyrightDatessequenceCopyrightTypeschema_OriginalDate_TFlexibleDatesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OriginalDatesequenceTxsdCopyrightTypeSequenceCopyrightDatesCopyrightDatessequenceCopyrightTypeschema_OriginalDate_TFlexibleDatesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.OriginalDates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Reflects the official names of any and all major options associated with the student's degree title. For example, a particular institution may require their Engineering majors to select either a Mechanical Engineering option or a Structural Engineering option.
type XsdGoPkgHasElem_OptionsequenceMajorTypeschema_Option_XsdtString_ struct {
	//	Reflects the official names of any and all major options associated with the student's degree title. For example, a particular institution may require their Engineering majors to select either a Mechanical Engineering option or a Structural Engineering option.
	Option xsdt.String `xml:"Option"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OptionsequenceMajorTypeschema_Option_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OptionsequenceMajorTypeschema_Option_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_OptionsequenceMajorTypeschema_Option_XsdtString_ instance.
func (me *XsdGoPkgHasElem_OptionsequenceMajorTypeschema_Option_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OptionsequenceMajorTypeschema_Option_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CategoryCodesequenceOccupationalCategoryTypeschema_CategoryCode_XsdtString_ struct {
	CategoryCodes []xsdt.String `xml:"CategoryCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CategoryCodesequenceOccupationalCategoryTypeschema_CategoryCode_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CategoryCodesequenceOccupationalCategoryTypeschema_CategoryCode_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CategoryCodesequenceOccupationalCategoryTypeschema_CategoryCode_XsdtString_ instance.
func (me *XsdGoPkgHasElems_CategoryCodesequenceOccupationalCategoryTypeschema_CategoryCode_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CategoryCodesequenceOccupationalCategoryTypeschema_CategoryCode_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PostalCodesequenceLocationSummarysequenceSchoolOrInstitutionTypeschema_PostalCode_XsdtString_ struct {
	PostalCodes []xsdt.String `xml:"PostalCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PostalCodesequenceLocationSummarysequenceSchoolOrInstitutionTypeschema_PostalCode_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PostalCodesequenceLocationSummarysequenceSchoolOrInstitutionTypeschema_PostalCode_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PostalCodesequenceLocationSummarysequenceSchoolOrInstitutionTypeschema_PostalCode_XsdtString_ instance.
func (me *XsdGoPkgHasElems_PostalCodesequenceLocationSummarysequenceSchoolOrInstitutionTypeschema_PostalCode_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PostalCodesequenceLocationSummarysequenceSchoolOrInstitutionTypeschema_PostalCode_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RecipientsequencePostalAddressTypeschema_Recipient_TxsdPostalAddressTypeSequenceRecipient_ struct {
	Recipient *TxsdPostalAddressTypeSequenceRecipient `xml:"Recipient"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RecipientsequencePostalAddressTypeschema_Recipient_TxsdPostalAddressTypeSequenceRecipient_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RecipientsequencePostalAddressTypeschema_Recipient_TxsdPostalAddressTypeSequenceRecipient_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RecipientsequencePostalAddressTypeschema_Recipient_TxsdPostalAddressTypeSequenceRecipient_ instance.
func (me *XsdGoPkgHasElem_RecipientsequencePostalAddressTypeschema_Recipient_TxsdPostalAddressTypeSequenceRecipient_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RecipientsequencePostalAddressTypeschema_Recipient_TxsdPostalAddressTypeSequenceRecipient_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Recipient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FamilyNamesequencePersonNameTypeschema_FamilyName_TxsdPersonNameTypeSequenceFamilyName_ struct {
	FamilyName *TxsdPersonNameTypeSequenceFamilyName `xml:"FamilyName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FamilyNamesequencePersonNameTypeschema_FamilyName_TxsdPersonNameTypeSequenceFamilyName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FamilyNamesequencePersonNameTypeschema_FamilyName_TxsdPersonNameTypeSequenceFamilyName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FamilyNamesequencePersonNameTypeschema_FamilyName_TxsdPersonNameTypeSequenceFamilyName_ instance.
func (me *XsdGoPkgHasElem_FamilyNamesequencePersonNameTypeschema_FamilyName_TxsdPersonNameTypeSequenceFamilyName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FamilyNamesequencePersonNameTypeschema_FamilyName_TxsdPersonNameTypeSequenceFamilyName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FamilyName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GivenNamesequencePersonNameTypeschema_GivenName_XsdtString_ struct {
	GivenName xsdt.String `xml:"GivenName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GivenNamesequencePersonNameTypeschema_GivenName_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GivenNamesequencePersonNameTypeschema_GivenName_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_GivenNamesequencePersonNameTypeschema_GivenName_XsdtString_ instance.
func (me *XsdGoPkgHasElem_GivenNamesequencePersonNameTypeschema_GivenName_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GivenNamesequencePersonNameTypeschema_GivenName_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_UnitsequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_Unit_XsdtString_ struct {
	Units []xsdt.String `xml:"Unit"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_UnitsequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_Unit_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_UnitsequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_Unit_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_UnitsequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_Unit_XsdtString_ instance.
func (me *XsdGoPkgHasElems_UnitsequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_Unit_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_UnitsequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_Unit_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_StartingCompensationsequencePositionCompensationTypeschema_StartingCompensation_TxsdPositionCompensationTypeSequenceStartingCompensation_ struct {
	StartingCompensations []*TxsdPositionCompensationTypeSequenceStartingCompensation `xml:"StartingCompensation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_StartingCompensationsequencePositionCompensationTypeschema_StartingCompensation_TxsdPositionCompensationTypeSequenceStartingCompensation_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_StartingCompensationsequencePositionCompensationTypeschema_StartingCompensation_TxsdPositionCompensationTypeSequenceStartingCompensation_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_StartingCompensationsequencePositionCompensationTypeschema_StartingCompensation_TxsdPositionCompensationTypeSequenceStartingCompensation_ instance.
func (me *XsdGoPkgHasElems_StartingCompensationsequencePositionCompensationTypeschema_StartingCompensation_TxsdPositionCompensationTypeSequenceStartingCompensation_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_StartingCompensationsequencePositionCompensationTypeschema_StartingCompensation_TxsdPositionCompensationTypeSequenceStartingCompensation_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.StartingCompensations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PublisherLocationsequenceextensioncomplexContentBookTypeschema_PublisherLocation_XsdtString_ struct {
	PublisherLocations []xsdt.String `xml:"PublisherLocation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PublisherLocationsequenceextensioncomplexContentBookTypeschema_PublisherLocation_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PublisherLocationsequenceextensioncomplexContentBookTypeschema_PublisherLocation_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PublisherLocationsequenceextensioncomplexContentBookTypeschema_PublisherLocation_XsdtString_ instance.
func (me *XsdGoPkgHasElems_PublisherLocationsequenceextensioncomplexContentBookTypeschema_PublisherLocation_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PublisherLocationsequenceextensioncomplexContentBookTypeschema_PublisherLocation_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The value specifying the minimum of the measurement range
type XsdGoPkgHasElems_LowestPossibleValuesequenceEducationMeasureTypeschema_LowestPossibleValue_TMeasureValueType_ struct {
	//	The value specifying the minimum of the measurement range
	LowestPossibleValues []*TMeasureValueType `xml:"LowestPossibleValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LowestPossibleValuesequenceEducationMeasureTypeschema_LowestPossibleValue_TMeasureValueType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LowestPossibleValuesequenceEducationMeasureTypeschema_LowestPossibleValue_TMeasureValueType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LowestPossibleValuesequenceEducationMeasureTypeschema_LowestPossibleValue_TMeasureValueType_ instance.
func (me *XsdGoPkgHasElems_LowestPossibleValuesequenceEducationMeasureTypeschema_LowestPossibleValue_TMeasureValueType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LowestPossibleValuesequenceEducationMeasureTypeschema_LowestPossibleValue_TMeasureValueType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.LowestPossibleValues {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_WritesequenceTxsdLanguageLanguageschema_Write_XsdtBoolean_ struct {
	Writes []xsdt.Boolean `xml:"Write"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_WritesequenceTxsdLanguageLanguageschema_Write_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_WritesequenceTxsdLanguageLanguageschema_Write_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_WritesequenceTxsdLanguageLanguageschema_Write_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElems_WritesequenceTxsdLanguageLanguageschema_Write_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_WritesequenceTxsdLanguageLanguageschema_Write_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LocationSummarysequenceEmpContactInfoTypeschema_LocationSummary_TEmploymentLocationSummaryType_ struct {
	LocationSummaries []*TEmploymentLocationSummaryType `xml:"LocationSummary"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LocationSummarysequenceEmpContactInfoTypeschema_LocationSummary_TEmploymentLocationSummaryType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LocationSummarysequenceEmpContactInfoTypeschema_LocationSummary_TEmploymentLocationSummaryType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LocationSummarysequenceEmpContactInfoTypeschema_LocationSummary_TEmploymentLocationSummaryType_ instance.
func (me *XsdGoPkgHasElems_LocationSummarysequenceEmpContactInfoTypeschema_LocationSummary_TEmploymentLocationSummaryType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LocationSummarysequenceEmpContactInfoTypeschema_LocationSummary_TEmploymentLocationSummaryType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.LocationSummaries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FamilyNamesequenceAlternateScriptsequencePersonNameTypeschema_FamilyName_TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyName_ struct {
	FamilyName *TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyName `xml:"FamilyName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FamilyNamesequenceAlternateScriptsequencePersonNameTypeschema_FamilyName_TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FamilyNamesequenceAlternateScriptsequencePersonNameTypeschema_FamilyName_TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FamilyNamesequenceAlternateScriptsequencePersonNameTypeschema_FamilyName_TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyName_ instance.
func (me *XsdGoPkgHasElem_FamilyNamesequenceAlternateScriptsequencePersonNameTypeschema_FamilyName_TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FamilyNamesequenceAlternateScriptsequencePersonNameTypeschema_FamilyName_TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FamilyName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ArticlesequencePublicationHistoryTypeschema_Article_TArticleType_ struct {
	Article *TArticleType `xml:"Article"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ArticlesequencePublicationHistoryTypeschema_Article_TArticleType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ArticlesequencePublicationHistoryTypeschema_Article_TArticleType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ArticlesequencePublicationHistoryTypeschema_Article_TArticleType_ instance.
func (me *XsdGoPkgHasElem_ArticlesequencePublicationHistoryTypeschema_Article_TArticleType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ArticlesequencePublicationHistoryTypeschema_Article_TArticleType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Article.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_OtherCompensationsequencePositionCompensationTypeschema_OtherCompensation_TxsdPositionCompensationTypeSequenceOtherCompensation_ struct {
	OtherCompensation *TxsdPositionCompensationTypeSequenceOtherCompensation `xml:"OtherCompensation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OtherCompensationsequencePositionCompensationTypeschema_OtherCompensation_TxsdPositionCompensationTypeSequenceOtherCompensation_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OtherCompensationsequencePositionCompensationTypeschema_OtherCompensation_TxsdPositionCompensationTypeSequenceOtherCompensation_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_OtherCompensationsequencePositionCompensationTypeschema_OtherCompensation_TxsdPositionCompensationTypeSequenceOtherCompensation_ instance.
func (me *XsdGoPkgHasElem_OtherCompensationsequencePositionCompensationTypeschema_OtherCompensation_TxsdPositionCompensationTypeSequenceOtherCompensation_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OtherCompensationsequencePositionCompensationTypeschema_OtherCompensation_TxsdPositionCompensationTypeSequenceOtherCompensation_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.OtherCompensation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PositionLocationsequencePositionOrgInfoTypeschema_PositionLocation_TPostalAddressType_ struct {
	PositionLocations []*TPostalAddressType `xml:"PositionLocation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PositionLocationsequencePositionOrgInfoTypeschema_PositionLocation_TPostalAddressType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PositionLocationsequencePositionOrgInfoTypeschema_PositionLocation_TPostalAddressType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PositionLocationsequencePositionOrgInfoTypeschema_PositionLocation_TPostalAddressType_ instance.
func (me *XsdGoPkgHasElems_PositionLocationsequencePositionOrgInfoTypeschema_PositionLocation_TPostalAddressType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PositionLocationsequencePositionOrgInfoTypeschema_PositionLocation_TPostalAddressType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PositionLocations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	School, College or institution attended.  Associated type attribute further qualifies the name as current, prior,  degree or joint.
type XsdGoPkgHasElems_SchoolNamesequenceSchoolDataTypeschema_SchoolName_XsdtString_ struct {
	//	School, College or institution attended.  Associated type attribute further qualifies the name as current, prior,  degree or joint.
	SchoolNames []xsdt.String `xml:"SchoolName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SchoolNamesequenceSchoolDataTypeschema_SchoolName_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SchoolNamesequenceSchoolDataTypeschema_SchoolName_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SchoolNamesequenceSchoolDataTypeschema_SchoolName_XsdtString_ instance.
func (me *XsdGoPkgHasElems_SchoolNamesequenceSchoolDataTypeschema_SchoolName_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SchoolNamesequenceSchoolDataTypeschema_SchoolName_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The subject studied, as expressed on the diploma.
type XsdGoPkgHasElems_DegreeNamesequenceEduDegreeTypeschema_DegreeName_TxsdEduDegreeTypeSequenceDegreeName_ struct {
	//	The subject studied, as expressed on the diploma.
	DegreeNames []*TxsdEduDegreeTypeSequenceDegreeName `xml:"DegreeName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DegreeNamesequenceEduDegreeTypeschema_DegreeName_TxsdEduDegreeTypeSequenceDegreeName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DegreeNamesequenceEduDegreeTypeschema_DegreeName_TxsdEduDegreeTypeSequenceDegreeName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DegreeNamesequenceEduDegreeTypeschema_DegreeName_TxsdEduDegreeTypeSequenceDegreeName_ instance.
func (me *XsdGoPkgHasElems_DegreeNamesequenceEduDegreeTypeschema_DegreeName_TxsdEduDegreeTypeSequenceDegreeName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DegreeNamesequenceEduDegreeTypeschema_DegreeName_TxsdEduDegreeTypeSequenceDegreeName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DegreeNames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PermissionToContactsequenceVerificationTypeschema_PermissionToContact_XsdtBoolean_ struct {
	PermissionToContacts []xsdt.Boolean `xml:"PermissionToContact"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PermissionToContactsequenceVerificationTypeschema_PermissionToContact_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PermissionToContactsequenceVerificationTypeschema_PermissionToContact_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PermissionToContactsequenceVerificationTypeschema_PermissionToContact_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElems_PermissionToContactsequenceVerificationTypeschema_PermissionToContact_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PermissionToContactsequenceVerificationTypeschema_PermissionToContact_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CopyrightDatessequenceCopyrightTypeschema_CopyrightDates_TxsdCopyrightTypeSequenceCopyrightDates_ struct {
	CopyrightDateses []*TxsdCopyrightTypeSequenceCopyrightDates `xml:"CopyrightDates"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CopyrightDatessequenceCopyrightTypeschema_CopyrightDates_TxsdCopyrightTypeSequenceCopyrightDates_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CopyrightDatessequenceCopyrightTypeschema_CopyrightDates_TxsdCopyrightTypeSequenceCopyrightDates_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CopyrightDatessequenceCopyrightTypeschema_CopyrightDates_TxsdCopyrightTypeSequenceCopyrightDates_ instance.
func (me *XsdGoPkgHasElems_CopyrightDatessequenceCopyrightTypeschema_CopyrightDates_TxsdCopyrightTypeSequenceCopyrightDates_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CopyrightDatessequenceCopyrightTypeschema_CopyrightDates_TxsdCopyrightTypeSequenceCopyrightDates_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CopyrightDateses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Deprecated in favor of Degree construct.
type XsdGoPkgHasElem_MajorsequenceSchoolOrInstitutionTypeschema_Major_XsdtString_ struct {
	//	Deprecated in favor of Degree construct.
	Major xsdt.String `xml:"Major"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MajorsequenceSchoolOrInstitutionTypeschema_Major_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MajorsequenceSchoolOrInstitutionTypeschema_Major_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_MajorsequenceSchoolOrInstitutionTypeschema_Major_XsdtString_ instance.
func (me *XsdGoPkgHasElem_MajorsequenceSchoolOrInstitutionTypeschema_Major_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MajorsequenceSchoolOrInstitutionTypeschema_Major_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MunicipalitysequenceEmploymentLocationSummaryTypeschema_Municipality_XsdtString_ struct {
	Municipalities []xsdt.String `xml:"Municipality"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MunicipalitysequenceEmploymentLocationSummaryTypeschema_Municipality_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MunicipalitysequenceEmploymentLocationSummaryTypeschema_Municipality_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MunicipalitysequenceEmploymentLocationSummaryTypeschema_Municipality_XsdtString_ instance.
func (me *XsdGoPkgHasElems_MunicipalitysequenceEmploymentLocationSummaryTypeschema_Municipality_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MunicipalitysequenceEmploymentLocationSummaryTypeschema_Municipality_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FormattedPublicationDescriptionsequencePublicationHistoryTypeschema_FormattedPublicationDescription_TxsdPublicationHistoryTypeSequenceFormattedPublicationDescription_ struct {
	FormattedPublicationDescription *TxsdPublicationHistoryTypeSequenceFormattedPublicationDescription `xml:"FormattedPublicationDescription"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FormattedPublicationDescriptionsequencePublicationHistoryTypeschema_FormattedPublicationDescription_TxsdPublicationHistoryTypeSequenceFormattedPublicationDescription_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FormattedPublicationDescriptionsequencePublicationHistoryTypeschema_FormattedPublicationDescription_TxsdPublicationHistoryTypeSequenceFormattedPublicationDescription_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FormattedPublicationDescriptionsequencePublicationHistoryTypeschema_FormattedPublicationDescription_TxsdPublicationHistoryTypeSequenceFormattedPublicationDescription_ instance.
func (me *XsdGoPkgHasElem_FormattedPublicationDescriptionsequencePublicationHistoryTypeschema_FormattedPublicationDescription_TxsdPublicationHistoryTypeSequenceFormattedPublicationDescription_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FormattedPublicationDescriptionsequencePublicationHistoryTypeschema_FormattedPublicationDescription_TxsdPublicationHistoryTypeSequenceFormattedPublicationDescription_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FormattedPublicationDescription.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AddressLinesequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_AddressLine_XsdtString_ struct {
	AddressLine xsdt.String `xml:"AddressLine"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AddressLinesequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_AddressLine_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AddressLinesequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_AddressLine_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AddressLinesequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_AddressLine_XsdtString_ instance.
func (me *XsdGoPkgHasElem_AddressLinesequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_AddressLine_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AddressLinesequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_AddressLine_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CurrentOrEndRanksequenceRankAchievedTypeschema_CurrentOrEndRank_XsdtString_ struct {
	CurrentOrEndRanks []xsdt.String `xml:"CurrentOrEndRank"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CurrentOrEndRanksequenceRankAchievedTypeschema_CurrentOrEndRank_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CurrentOrEndRanksequenceRankAchievedTypeschema_CurrentOrEndRank_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CurrentOrEndRanksequenceRankAchievedTypeschema_CurrentOrEndRank_XsdtString_ instance.
func (me *XsdGoPkgHasElems_CurrentOrEndRanksequenceRankAchievedTypeschema_CurrentOrEndRank_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CurrentOrEndRanksequenceRankAchievedTypeschema_CurrentOrEndRank_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AreaOfExpertisesequenceServiceDetailsequenceMilitaryHistoryTypeschema_AreaOfExpertise_XsdtString_ struct {
	AreaOfExpertise xsdt.String `xml:"AreaOfExpertise"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AreaOfExpertisesequenceServiceDetailsequenceMilitaryHistoryTypeschema_AreaOfExpertise_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AreaOfExpertisesequenceServiceDetailsequenceMilitaryHistoryTypeschema_AreaOfExpertise_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AreaOfExpertisesequenceServiceDetailsequenceMilitaryHistoryTypeschema_AreaOfExpertise_XsdtString_ instance.
func (me *XsdGoPkgHasElem_AreaOfExpertisesequenceServiceDetailsequenceMilitaryHistoryTypeschema_AreaOfExpertise_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AreaOfExpertisesequenceServiceDetailsequenceMilitaryHistoryTypeschema_AreaOfExpertise_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LinkToResumesequenceNonXMLResumeTypeschema_LinkToResume_XsdtString_ struct {
	LinkToResumes []xsdt.String `xml:"LinkToResume"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LinkToResumesequenceNonXMLResumeTypeschema_LinkToResume_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LinkToResumesequenceNonXMLResumeTypeschema_LinkToResume_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LinkToResumesequenceNonXMLResumeTypeschema_LinkToResume_XsdtString_ instance.
func (me *XsdGoPkgHasElems_LinkToResumesequenceNonXMLResumeTypeschema_LinkToResume_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LinkToResumesequenceNonXMLResumeTypeschema_LinkToResume_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_NamesequenceBasicBibliographicRecordTypeschema_Name_TxsdBasicBibliographicRecordTypeSequenceName_ struct {
	Name *TxsdBasicBibliographicRecordTypeSequenceName `xml:"Name"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NamesequenceBasicBibliographicRecordTypeschema_Name_TxsdBasicBibliographicRecordTypeSequenceName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NamesequenceBasicBibliographicRecordTypeschema_Name_TxsdBasicBibliographicRecordTypeSequenceName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_NamesequenceBasicBibliographicRecordTypeschema_Name_TxsdBasicBibliographicRecordTypeSequenceName_ instance.
func (me *XsdGoPkgHasElem_NamesequenceBasicBibliographicRecordTypeschema_Name_TxsdBasicBibliographicRecordTypeSequenceName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NamesequenceBasicBibliographicRecordTypeschema_Name_TxsdBasicBibliographicRecordTypeSequenceName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Name.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_StringDatechoiceFlexibleDatesTypeschema_StringDate_XsdtString_ struct {
	StringDates []xsdt.String `xml:"StringDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_StringDatechoiceFlexibleDatesTypeschema_StringDate_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_StringDatechoiceFlexibleDatesTypeschema_StringDate_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_StringDatechoiceFlexibleDatesTypeschema_StringDate_XsdtString_ instance.
func (me *XsdGoPkgHasElems_StringDatechoiceFlexibleDatesTypeschema_StringDate_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_StringDatechoiceFlexibleDatesTypeschema_StringDate_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ConferenceDatesequenceextensioncomplexContentConferencePaperTypeschema_ConferenceDate_TFlexibleDatesType_ struct {
	ConferenceDates []*TFlexibleDatesType `xml:"ConferenceDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ConferenceDatesequenceextensioncomplexContentConferencePaperTypeschema_ConferenceDate_TFlexibleDatesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ConferenceDatesequenceextensioncomplexContentConferencePaperTypeschema_ConferenceDate_TFlexibleDatesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ConferenceDatesequenceextensioncomplexContentConferencePaperTypeschema_ConferenceDate_TFlexibleDatesType_ instance.
func (me *XsdGoPkgHasElems_ConferenceDatesequenceextensioncomplexContentConferencePaperTypeschema_ConferenceDate_TFlexibleDatesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ConferenceDatesequenceextensioncomplexContentConferencePaperTypeschema_ConferenceDate_TFlexibleDatesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ConferenceDates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	This is the total number of credits (credit hours) included on the record for this particular summary. This would normally be all credits for which the student paid, whether or not the credits were used to calculate the grade point average. Examples of credit hours to be included, if available, are credits for which non-punitive grades such as "I" or "W" or "Audit" were awarded.
type XsdGoPkgHasElems_AcademicCreditHoursAttemptedsequenceEducationalMeasureTypeschema_AcademicCreditHoursAttempted_XsdtDecimal_ struct {
	//	This is the total number of credits (credit hours) included on the record for this particular summary. This would normally be all credits for which the student paid, whether or not the credits were used to calculate the grade point average. Examples of credit hours to be included, if available, are credits for which non-punitive grades such as "I" or "W" or "Audit" were awarded.
	AcademicCreditHoursAttempteds []xsdt.Decimal `xml:"AcademicCreditHoursAttempted"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AcademicCreditHoursAttemptedsequenceEducationalMeasureTypeschema_AcademicCreditHoursAttempted_XsdtDecimal_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AcademicCreditHoursAttemptedsequenceEducationalMeasureTypeschema_AcademicCreditHoursAttempted_XsdtDecimal_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AcademicCreditHoursAttemptedsequenceEducationalMeasureTypeschema_AcademicCreditHoursAttempted_XsdtDecimal_ instance.
func (me *XsdGoPkgHasElems_AcademicCreditHoursAttemptedsequenceEducationalMeasureTypeschema_AcademicCreditHoursAttempted_XsdtDecimal_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AcademicCreditHoursAttemptedsequenceEducationalMeasureTypeschema_AcademicCreditHoursAttempted_XsdtDecimal_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Identifier of the School, College or institution attended.  Associated type attribute further qualifies the name as current, prior,  degree or joint.
type XsdGoPkgHasElem_SchoolIdsequenceSchoolDataTypeschema_SchoolId_TEntityIdType_ struct {
	//	Identifier of the School, College or institution attended.  Associated type attribute further qualifies the name as current, prior,  degree or joint.
	SchoolId *TEntityIdType `xml:"SchoolId"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SchoolIdsequenceSchoolDataTypeschema_SchoolId_TEntityIdType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SchoolIdsequenceSchoolDataTypeschema_SchoolId_TEntityIdType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SchoolIdsequenceSchoolDataTypeschema_SchoolId_TEntityIdType_ instance.
func (me *XsdGoPkgHasElem_SchoolIdsequenceSchoolDataTypeschema_SchoolId_TEntityIdType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SchoolIdsequenceSchoolDataTypeschema_SchoolId_TEntityIdType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SchoolId.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LanguagessequenceStructuredXMLResumeTypeschema_Languages_TxsdStructuredXMLResumeTypeSequenceLanguages_ struct {
	Languageses []*TxsdStructuredXMLResumeTypeSequenceLanguages `xml:"Languages"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LanguagessequenceStructuredXMLResumeTypeschema_Languages_TxsdStructuredXMLResumeTypeSequenceLanguages_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LanguagessequenceStructuredXMLResumeTypeschema_Languages_TxsdStructuredXMLResumeTypeSequenceLanguages_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LanguagessequenceStructuredXMLResumeTypeschema_Languages_TxsdStructuredXMLResumeTypeSequenceLanguages_ instance.
func (me *XsdGoPkgHasElems_LanguagessequenceStructuredXMLResumeTypeschema_Languages_TxsdStructuredXMLResumeTypeSequenceLanguages_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LanguagessequenceStructuredXMLResumeTypeschema_Languages_TxsdStructuredXMLResumeTypeSequenceLanguages_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Languageses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ServiceDetailsequenceMilitaryHistoryTypeschema_ServiceDetail_TxsdMilitaryHistoryTypeSequenceServiceDetail_ struct {
	ServiceDetail *TxsdMilitaryHistoryTypeSequenceServiceDetail `xml:"ServiceDetail"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ServiceDetailsequenceMilitaryHistoryTypeschema_ServiceDetail_TxsdMilitaryHistoryTypeSequenceServiceDetail_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ServiceDetailsequenceMilitaryHistoryTypeschema_ServiceDetail_TxsdMilitaryHistoryTypeSequenceServiceDetail_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ServiceDetailsequenceMilitaryHistoryTypeschema_ServiceDetail_TxsdMilitaryHistoryTypeSequenceServiceDetail_ instance.
func (me *XsdGoPkgHasElem_ServiceDetailsequenceMilitaryHistoryTypeschema_ServiceDetail_TxsdMilitaryHistoryTypeSequenceServiceDetail_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ServiceDetailsequenceMilitaryHistoryTypeschema_ServiceDetail_TxsdMilitaryHistoryTypeSequenceServiceDetail_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ServiceDetail.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PreferredGivenNamesequencePersonNameTypeschema_PreferredGivenName_XsdtString_ struct {
	PreferredGivenNames []xsdt.String `xml:"PreferredGivenName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PreferredGivenNamesequencePersonNameTypeschema_PreferredGivenName_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PreferredGivenNamesequencePersonNameTypeschema_PreferredGivenName_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PreferredGivenNamesequencePersonNameTypeschema_PreferredGivenName_XsdtString_ instance.
func (me *XsdGoPkgHasElems_PreferredGivenNamesequencePersonNameTypeschema_PreferredGivenName_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PreferredGivenNamesequencePersonNameTypeschema_PreferredGivenName_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TBasicStatusType xsdt.String

//	Since TBasicStatusType is just a simple String type, this merely returns the current string value.
func (me TBasicStatusType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TBasicStatusType's alias type xsdt.String.
func (me TBasicStatusType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TBasicStatusType is "Active".
func (me TBasicStatusType) IsActive() bool { return me.String() == "Active" }

//	Returns true if the value of this enumerated TBasicStatusType is "Inactive".
func (me TBasicStatusType) IsInactive() bool { return me.String() == "Inactive" }

//	Returns true if the value of this enumerated TBasicStatusType is "Pending".
func (me TBasicStatusType) IsPending() bool { return me.String() == "Pending" }

//	Since TBasicStatusType is just a simple String type, this merely sets the current value from the specified string.
func (me *TBasicStatusType) Set(s string) { (*xsdt.String)(me).Set(s) }

type TExtendedBasicStatusType xsdt.String

//	Since TExtendedBasicStatusType is just a simple String type, this merely sets the current value from the specified string.
func (me *TExtendedBasicStatusType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TExtendedBasicStatusType is just a simple String type, this merely returns the current string value.
func (me TExtendedBasicStatusType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TExtendedBasicStatusType's alias type xsdt.String.
func (me TExtendedBasicStatusType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	TExtendedBasicStatusType is an XSD union-type of several types. This is a simple type conversion to TBasicStatusType, but keep in mind the actual value may or may not be a valid TBasicStatusType value.
func (me TExtendedBasicStatusType) ToTBasicStatusType() TBasicStatusType { return TBasicStatusType(me) }

//	TExtendedBasicStatusType is an XSD union-type of several types. This is a simple type conversion to TxStringPatternExtensionType, but keep in mind the actual value may or may not be a valid TxStringPatternExtensionType value.
func (me TExtendedBasicStatusType) ToTxStringPatternExtensionType() TxStringPatternExtensionType {
	return TxStringPatternExtensionType(me)
}

type XsdGoPkgHasElem_DatesOfAttendancesequenceEduDegreeTypeschema_DatesOfAttendance_TDatesOfAttendanceType_ struct {
	DatesOfAttendance *TDatesOfAttendanceType `xml:"DatesOfAttendance"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DatesOfAttendancesequenceEduDegreeTypeschema_DatesOfAttendance_TDatesOfAttendanceType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DatesOfAttendancesequenceEduDegreeTypeschema_DatesOfAttendance_TDatesOfAttendanceType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DatesOfAttendancesequenceEduDegreeTypeschema_DatesOfAttendance_TDatesOfAttendanceType_ instance.
func (me *XsdGoPkgHasElem_DatesOfAttendancesequenceEduDegreeTypeschema_DatesOfAttendance_TDatesOfAttendanceType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DatesOfAttendancesequenceEduDegreeTypeschema_DatesOfAttendance_TDatesOfAttendanceType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DatesOfAttendance.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DatesequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Date_TAnyDateTimeNkNaType_ struct {
	Dates []TAnyDateTimeNkNaType `xml:"Date"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DatesequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Date_TAnyDateTimeNkNaType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DatesequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Date_TAnyDateTimeNkNaType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DatesequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Date_TAnyDateTimeNkNaType_ instance.
func (me *XsdGoPkgHasElems_DatesequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Date_TAnyDateTimeNkNaType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DatesequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Date_TAnyDateTimeNkNaType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ResumeAdditionalItemssequenceStructuredXMLResumeTypeschema_ResumeAdditionalItems_TxsdStructuredXMLResumeTypeSequenceResumeAdditionalItems_ struct {
	ResumeAdditionalItemses []*TxsdStructuredXMLResumeTypeSequenceResumeAdditionalItems `xml:"ResumeAdditionalItems"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ResumeAdditionalItemssequenceStructuredXMLResumeTypeschema_ResumeAdditionalItems_TxsdStructuredXMLResumeTypeSequenceResumeAdditionalItems_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ResumeAdditionalItemssequenceStructuredXMLResumeTypeschema_ResumeAdditionalItems_TxsdStructuredXMLResumeTypeSequenceResumeAdditionalItems_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ResumeAdditionalItemssequenceStructuredXMLResumeTypeschema_ResumeAdditionalItems_TxsdStructuredXMLResumeTypeSequenceResumeAdditionalItems_ instance.
func (me *XsdGoPkgHasElems_ResumeAdditionalItemssequenceStructuredXMLResumeTypeschema_ResumeAdditionalItems_TxsdStructuredXMLResumeTypeSequenceResumeAdditionalItems_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ResumeAdditionalItemssequenceStructuredXMLResumeTypeschema_ResumeAdditionalItems_TxsdStructuredXMLResumeTypeSequenceResumeAdditionalItems_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ResumeAdditionalItemses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CampaignsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_Campaign_XsdtString_ struct {
	Campaign xsdt.String `xml:"Campaign"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CampaignsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_Campaign_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CampaignsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_Campaign_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CampaignsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_Campaign_XsdtString_ instance.
func (me *XsdGoPkgHasElem_CampaignsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_Campaign_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CampaignsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_Campaign_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	If True, this is a summary of all work included in the record.
type XsdGoPkgHasElems_CumulativeSummaryIndicatorsequenceEducationalMeasureTypeschema_CumulativeSummaryIndicator_XsdtBoolean_ struct {
	//	If True, this is a summary of all work included in the record.
	CumulativeSummaryIndicators []xsdt.Boolean `xml:"CumulativeSummaryIndicator"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CumulativeSummaryIndicatorsequenceEducationalMeasureTypeschema_CumulativeSummaryIndicator_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CumulativeSummaryIndicatorsequenceEducationalMeasureTypeschema_CumulativeSummaryIndicator_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CumulativeSummaryIndicatorsequenceEducationalMeasureTypeschema_CumulativeSummaryIndicator_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElems_CumulativeSummaryIndicatorsequenceEducationalMeasureTypeschema_CumulativeSummaryIndicator_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CumulativeSummaryIndicatorsequenceEducationalMeasureTypeschema_CumulativeSummaryIndicator_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RankAchievedsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_RankAchieved_TRankAchievedType_ struct {
	RankAchieveds []*TRankAchievedType `xml:"RankAchieved"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RankAchievedsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_RankAchieved_TRankAchievedType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RankAchievedsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_RankAchieved_TRankAchievedType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RankAchievedsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_RankAchieved_TRankAchievedType_ instance.
func (me *XsdGoPkgHasElems_RankAchievedsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_RankAchieved_TRankAchievedType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RankAchievedsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_RankAchieved_TRankAchievedType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RankAchieveds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ISBNsequenceextensioncomplexContentOtherPublicationTypeschema_Isbn_TisbnType_ struct {
	Isbns []TisbnType `xml:"ISBN"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ISBNsequenceextensioncomplexContentOtherPublicationTypeschema_Isbn_TisbnType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ISBNsequenceextensioncomplexContentOtherPublicationTypeschema_Isbn_TisbnType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ISBNsequenceextensioncomplexContentOtherPublicationTypeschema_Isbn_TisbnType_ instance.
func (me *XsdGoPkgHasElems_ISBNsequenceextensioncomplexContentOtherPublicationTypeschema_Isbn_TisbnType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ISBNsequenceextensioncomplexContentOtherPublicationTypeschema_Isbn_TisbnType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MiddleNamesequencePersonNameTypeschema_MiddleName_XsdtString_ struct {
	MiddleNames []xsdt.String `xml:"MiddleName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MiddleNamesequencePersonNameTypeschema_MiddleName_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MiddleNamesequencePersonNameTypeschema_MiddleName_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MiddleNamesequencePersonNameTypeschema_MiddleName_XsdtString_ instance.
func (me *XsdGoPkgHasElems_MiddleNamesequencePersonNameTypeschema_MiddleName_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MiddleNamesequencePersonNameTypeschema_MiddleName_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TRelationshipType xsdt.String

//	Since TRelationshipType is just a simple String type, this merely returns the current string value.
func (me TRelationshipType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TRelationshipType's alias type xsdt.String.
func (me TRelationshipType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TRelationshipType is "agent".
func (me TRelationshipType) IsAgent() bool { return me.String() == "agent" }

//	Returns true if the value of this enumerated TRelationshipType is "broker".
func (me TRelationshipType) IsBroker() bool { return me.String() == "broker" }

//	Returns true if the value of this enumerated TRelationshipType is "self".
func (me TRelationshipType) IsSelf() bool { return me.String() == "self" }

//	Returns true if the value of this enumerated TRelationshipType is "referrer".
func (me TRelationshipType) IsReferrer() bool { return me.String() == "referrer" }

//	Since TRelationshipType is just a simple String type, this merely sets the current value from the specified string.
func (me *TRelationshipType) Set(s string) { (*xsdt.String)(me).Set(s) }

type XsdGoPkgHasElems_IssuingAuthoritysequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_IssuingAuthority_TxsdPatentDescriptionTypeSequencePatentDetailSequenceIssuingAuthority_ struct {
	IssuingAuthorities []*TIssuingAuthorityType `xml:"IssuingAuthority"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IssuingAuthoritysequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_IssuingAuthority_TxsdPatentDescriptionTypeSequencePatentDetailSequenceIssuingAuthority_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IssuingAuthoritysequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_IssuingAuthority_TxsdPatentDescriptionTypeSequencePatentDetailSequenceIssuingAuthority_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IssuingAuthoritysequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_IssuingAuthority_TxsdPatentDescriptionTypeSequencePatentDetailSequenceIssuingAuthority_ instance.
func (me *XsdGoPkgHasElems_IssuingAuthoritysequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_IssuingAuthority_TxsdPatentDescriptionTypeSequencePatentDetailSequenceIssuingAuthority_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IssuingAuthoritysequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_IssuingAuthority_TxsdPatentDescriptionTypeSequencePatentDetailSequenceIssuingAuthority_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.IssuingAuthorities {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_OrgSizesequencePositionHistoryTypeschema_OrgSize_XsdtString_ struct {
	OrgSizes []xsdt.String `xml:"OrgSize"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OrgSizesequencePositionHistoryTypeschema_OrgSize_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OrgSizesequencePositionHistoryTypeschema_OrgSize_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OrgSizesequencePositionHistoryTypeschema_OrgSize_XsdtString_ instance.
func (me *XsdGoPkgHasElems_OrgSizesequencePositionHistoryTypeschema_OrgSize_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OrgSizesequencePositionHistoryTypeschema_OrgSize_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TitlesequenceBasicBibliographicRecordTypeschema_Title_XsdtString_ struct {
	Titles []xsdt.String `xml:"Title"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TitlesequenceBasicBibliographicRecordTypeschema_Title_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TitlesequenceBasicBibliographicRecordTypeschema_Title_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TitlesequenceBasicBibliographicRecordTypeschema_Title_XsdtString_ instance.
func (me *XsdGoPkgHasElems_TitlesequenceBasicBibliographicRecordTypeschema_Title_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TitlesequenceBasicBibliographicRecordTypeschema_Title_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Summarized location of the entity.
type XsdGoPkgHasElems_LocationSummarysequenceSchoolOrInstitutionTypeschema_LocationSummary_TxsdSchoolOrInstitutionTypeSequenceLocationSummary_ struct {
	//	Summarized location of the entity.
	LocationSummaries []*TxsdSchoolOrInstitutionTypeSequenceLocationSummary `xml:"LocationSummary"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LocationSummarysequenceSchoolOrInstitutionTypeschema_LocationSummary_TxsdSchoolOrInstitutionTypeSequenceLocationSummary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LocationSummarysequenceSchoolOrInstitutionTypeschema_LocationSummary_TxsdSchoolOrInstitutionTypeSequenceLocationSummary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LocationSummarysequenceSchoolOrInstitutionTypeschema_LocationSummary_TxsdSchoolOrInstitutionTypeSequenceLocationSummary_ instance.
func (me *XsdGoPkgHasElems_LocationSummarysequenceSchoolOrInstitutionTypeschema_LocationSummary_TxsdSchoolOrInstitutionTypeSequenceLocationSummary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LocationSummarysequenceSchoolOrInstitutionTypeschema_LocationSummary_TxsdSchoolOrInstitutionTypeSequenceLocationSummary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.LocationSummaries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_IdValuesequenceEntityIdTypeschema_IdValue_TxsdEntityIdTypeSequenceIdValue_ struct {
	IdValue *TxsdEntityIdTypeSequenceIdValue `xml:"IdValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IdValuesequenceEntityIdTypeschema_IdValue_TxsdEntityIdTypeSequenceIdValue_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IdValuesequenceEntityIdTypeschema_IdValue_TxsdEntityIdTypeSequenceIdValue_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_IdValuesequenceEntityIdTypeschema_IdValue_TxsdEntityIdTypeSequenceIdValue_ instance.
func (me *XsdGoPkgHasElem_IdValuesequenceEntityIdTypeschema_IdValue_TxsdEntityIdTypeSequenceIdValue_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IdValuesequenceEntityIdTypeschema_IdValue_TxsdEntityIdTypeSequenceIdValue_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.IdValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PatentTitlesequencePatentDescriptionTypeschema_PatentTitle_XsdtString_ struct {
	PatentTitles []xsdt.String `xml:"PatentTitle"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PatentTitlesequencePatentDescriptionTypeschema_PatentTitle_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PatentTitlesequencePatentDescriptionTypeschema_PatentTitle_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PatentTitlesequencePatentDescriptionTypeschema_PatentTitle_XsdtString_ instance.
func (me *XsdGoPkgHasElems_PatentTitlesequencePatentDescriptionTypeschema_PatentTitle_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PatentTitlesequencePatentDescriptionTypeschema_PatentTitle_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PublisherNamesequenceextensioncomplexContentBookTypeschema_PublisherName_XsdtString_ struct {
	PublisherNames []xsdt.String `xml:"PublisherName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PublisherNamesequenceextensioncomplexContentBookTypeschema_PublisherName_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PublisherNamesequenceextensioncomplexContentBookTypeschema_PublisherName_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PublisherNamesequenceextensioncomplexContentBookTypeschema_PublisherName_XsdtString_ instance.
func (me *XsdGoPkgHasElems_PublisherNamesequenceextensioncomplexContentBookTypeschema_PublisherName_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PublisherNamesequenceextensioncomplexContentBookTypeschema_PublisherName_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	This is a student's numerical class rank with the highest student in the class having a rank or position of 1
type XsdGoPkgHasElems_ClassRanksequenceEducationalMeasureTypeschema_ClassRank_TxsdEducationalMeasureTypeSequenceClassRank_ struct {
	//	This is a student's numerical class rank with the highest student in the class having a rank or position of 1
	ClassRanks []*TxsdEducationalMeasureTypeSequenceClassRank `xml:"ClassRank"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ClassRanksequenceEducationalMeasureTypeschema_ClassRank_TxsdEducationalMeasureTypeSequenceClassRank_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ClassRanksequenceEducationalMeasureTypeschema_ClassRank_TxsdEducationalMeasureTypeSequenceClassRank_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ClassRanksequenceEducationalMeasureTypeschema_ClassRank_TxsdEducationalMeasureTypeSequenceClassRank_ instance.
func (me *XsdGoPkgHasElems_ClassRanksequenceEducationalMeasureTypeschema_ClassRank_TxsdEducationalMeasureTypeSequenceClassRank_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ClassRanksequenceEducationalMeasureTypeschema_ClassRank_TxsdEducationalMeasureTypeSequenceClassRank_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ClassRanks {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GoodStudentIndicatorsequenceEducationMeasureTypeschema_GoodStudentIndicator_XsdtBoolean_ struct {
	GoodStudentIndicators []xsdt.Boolean `xml:"GoodStudentIndicator"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GoodStudentIndicatorsequenceEducationMeasureTypeschema_GoodStudentIndicator_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GoodStudentIndicatorsequenceEducationMeasureTypeschema_GoodStudentIndicator_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GoodStudentIndicatorsequenceEducationMeasureTypeschema_GoodStudentIndicator_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElems_GoodStudentIndicatorsequenceEducationMeasureTypeschema_GoodStudentIndicator_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GoodStudentIndicatorsequenceEducationMeasureTypeschema_GoodStudentIndicator_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_WebSitesequencePositionOrgInfoTypeschema_WebSite_TInternetWebAddressType_ struct {
	WebSites []TInternetWebAddressType `xml:"WebSite"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_WebSitesequencePositionOrgInfoTypeschema_WebSite_TInternetWebAddressType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_WebSitesequencePositionOrgInfoTypeschema_WebSite_TInternetWebAddressType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_WebSitesequencePositionOrgInfoTypeschema_WebSite_TInternetWebAddressType_ instance.
func (me *XsdGoPkgHasElems_WebSitesequencePositionOrgInfoTypeschema_WebSite_TInternetWebAddressType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_WebSitesequencePositionOrgInfoTypeschema_WebSite_TInternetWebAddressType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LegalNamesequenceAlternateScriptsequencePersonNameTypeschema_LegalName_XsdtString_ struct {
	LegalNames []xsdt.String `xml:"LegalName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LegalNamesequenceAlternateScriptsequencePersonNameTypeschema_LegalName_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LegalNamesequenceAlternateScriptsequencePersonNameTypeschema_LegalName_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LegalNamesequenceAlternateScriptsequencePersonNameTypeschema_LegalName_XsdtString_ instance.
func (me *XsdGoPkgHasElems_LegalNamesequenceAlternateScriptsequencePersonNameTypeschema_LegalName_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LegalNamesequenceAlternateScriptsequencePersonNameTypeschema_LegalName_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CopyrightTextsequenceCopyrightTypeschema_CopyrightText_XsdtString_ struct {
	CopyrightTexts []xsdt.String `xml:"CopyrightText"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CopyrightTextsequenceCopyrightTypeschema_CopyrightText_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CopyrightTextsequenceCopyrightTypeschema_CopyrightText_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CopyrightTextsequenceCopyrightTypeschema_CopyrightText_XsdtString_ instance.
func (me *XsdGoPkgHasElems_CopyrightTextsequenceCopyrightTypeschema_CopyrightText_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CopyrightTextsequenceCopyrightTypeschema_CopyrightText_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Identifier reflecting the program code(s) associated with any Minor course of Study.
type XsdGoPkgHasElem_ProgramIdsequenceMinorTypeschema_ProgramId_TEntityIdType_ struct {
	//	Identifier reflecting the program code(s) associated with any Minor course of Study.
	ProgramId *TEntityIdType `xml:"ProgramId"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ProgramIdsequenceMinorTypeschema_ProgramId_TEntityIdType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ProgramIdsequenceMinorTypeschema_ProgramId_TEntityIdType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ProgramIdsequenceMinorTypeschema_ProgramId_TEntityIdType_ instance.
func (me *XsdGoPkgHasElem_ProgramIdsequenceMinorTypeschema_ProgramId_TEntityIdType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ProgramIdsequenceMinorTypeschema_ProgramId_TEntityIdType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ProgramId.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ResumeIdsequenceTxsdResumeResumeschema_ResumeId_TEntityIdType_ struct {
	ResumeIds []*TEntityIdType `xml:"ResumeId"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ResumeIdsequenceTxsdResumeResumeschema_ResumeId_TEntityIdType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ResumeIdsequenceTxsdResumeResumeschema_ResumeId_TEntityIdType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ResumeIdsequenceTxsdResumeResumeschema_ResumeId_TEntityIdType_ instance.
func (me *XsdGoPkgHasElems_ResumeIdsequenceTxsdResumeResumeschema_ResumeId_TEntityIdType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ResumeIdsequenceTxsdResumeResumeschema_ResumeId_TEntityIdType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ResumeIds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DistributionGuidelinessequenceTxsdResumeResumeschema_DistributionGuidelines_TDistributionGuidelinesType_ struct {
	DistributionGuidelineses []*TDistributionGuidelinesType `xml:"DistributionGuidelines"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DistributionGuidelinessequenceTxsdResumeResumeschema_DistributionGuidelines_TDistributionGuidelinesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DistributionGuidelinessequenceTxsdResumeResumeschema_DistributionGuidelines_TDistributionGuidelinesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DistributionGuidelinessequenceTxsdResumeResumeschema_DistributionGuidelines_TDistributionGuidelinesType_ instance.
func (me *XsdGoPkgHasElems_DistributionGuidelinessequenceTxsdResumeResumeschema_DistributionGuidelines_TDistributionGuidelinesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DistributionGuidelinessequenceTxsdResumeResumeschema_DistributionGuidelines_TDistributionGuidelinesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DistributionGuidelineses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DatesequenceAchievementTypeschema_Date_TFlexibleDatesType_ struct {
	Dates []*TFlexibleDatesType `xml:"Date"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DatesequenceAchievementTypeschema_Date_TFlexibleDatesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DatesequenceAchievementTypeschema_Date_TFlexibleDatesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DatesequenceAchievementTypeschema_Date_TFlexibleDatesType_ instance.
func (me *XsdGoPkgHasElems_DatesequenceAchievementTypeschema_Date_TFlexibleDatesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DatesequenceAchievementTypeschema_Date_TFlexibleDatesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Dates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_OrgNamesequencePositionHistoryTypeschema_OrgName_TPositionOrgNameType_ struct {
	OrgNames []*TPositionOrgNameType `xml:"OrgName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OrgNamesequencePositionHistoryTypeschema_OrgName_TPositionOrgNameType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OrgNamesequencePositionHistoryTypeschema_OrgName_TPositionOrgNameType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OrgNamesequencePositionHistoryTypeschema_OrgName_TPositionOrgNameType_ instance.
func (me *XsdGoPkgHasElems_OrgNamesequencePositionHistoryTypeschema_OrgName_TPositionOrgNameType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OrgNamesequencePositionHistoryTypeschema_OrgName_TPositionOrgNameType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.OrgNames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAnyLocalDateYearMonthType xsdt.GYearMonth

//	Since TAnyLocalDateYearMonthType is just a simple String type, this merely sets the current value from the specified string.
func (me *TAnyLocalDateYearMonthType) Set(s string) { (*xsdt.GYearMonth)(me).Set(s) }

//	Since TAnyLocalDateYearMonthType is just a simple String type, this merely returns the current string value.
func (me TAnyLocalDateYearMonthType) String() string { return xsdt.GYearMonth(me).String() }

//	This convenience method just performs a simple type conversion to TAnyLocalDateYearMonthType's alias type xsdt.GYearMonth.
func (me TAnyLocalDateYearMonthType) ToXsdtGYearMonth() xsdt.GYearMonth { return xsdt.GYearMonth(me) }

type XsdGoPkgHasElems_YearchoiceFlexibleDatesTypeschema_Year_XsdtGYear_ struct {
	Years []xsdt.GYear `xml:"Year"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_YearchoiceFlexibleDatesTypeschema_Year_XsdtGYear_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_YearchoiceFlexibleDatesTypeschema_Year_XsdtGYear_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_YearchoiceFlexibleDatesTypeschema_Year_XsdtGYear_ instance.
func (me *XsdGoPkgHasElems_YearchoiceFlexibleDatesTypeschema_Year_XsdtGYear_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_YearchoiceFlexibleDatesTypeschema_Year_XsdtGYear_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_InventorNamesequenceTxsdPatentDescriptionTypeSequenceInventorsInventorssequencePatentDescriptionTypeschema_InventorName_XsdtString_ struct {
	InventorName xsdt.String `xml:"InventorName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InventorNamesequenceTxsdPatentDescriptionTypeSequenceInventorsInventorssequencePatentDescriptionTypeschema_InventorName_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InventorNamesequenceTxsdPatentDescriptionTypeSequenceInventorsInventorssequencePatentDescriptionTypeschema_InventorName_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_InventorNamesequenceTxsdPatentDescriptionTypeSequenceInventorsInventorssequencePatentDescriptionTypeschema_InventorName_XsdtString_ instance.
func (me *XsdGoPkgHasElem_InventorNamesequenceTxsdPatentDescriptionTypeSequenceInventorsInventorssequencePatentDescriptionTypeschema_InventorName_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InventorNamesequenceTxsdPatentDescriptionTypeSequenceInventorsInventorssequencePatentDescriptionTypeschema_InventorName_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CategoryDescriptionsequenceOccupationalCategoryTypeschema_CategoryDescription_XsdtString_ struct {
	CategoryDescriptions []xsdt.String `xml:"CategoryDescription"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CategoryDescriptionsequenceOccupationalCategoryTypeschema_CategoryDescription_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CategoryDescriptionsequenceOccupationalCategoryTypeschema_CategoryDescription_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CategoryDescriptionsequenceOccupationalCategoryTypeschema_CategoryDescription_XsdtString_ instance.
func (me *XsdGoPkgHasElems_CategoryDescriptionsequenceOccupationalCategoryTypeschema_CategoryDescription_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CategoryDescriptionsequenceOccupationalCategoryTypeschema_CategoryDescription_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TaxonomyIdsequenceCompetencyTypeschema_TaxonomyId_TxsdCompetencyTypeSequenceTaxonomyId_ struct {
	TaxonomyId *TxsdCompetencyTypeSequenceCompetencyId `xml:"TaxonomyId"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TaxonomyIdsequenceCompetencyTypeschema_TaxonomyId_TxsdCompetencyTypeSequenceTaxonomyId_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TaxonomyIdsequenceCompetencyTypeschema_TaxonomyId_TxsdCompetencyTypeSequenceTaxonomyId_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_TaxonomyIdsequenceCompetencyTypeschema_TaxonomyId_TxsdCompetencyTypeSequenceTaxonomyId_ instance.
func (me *XsdGoPkgHasElem_TaxonomyIdsequenceCompetencyTypeschema_TaxonomyId_TxsdCompetencyTypeSequenceTaxonomyId_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TaxonomyIdsequenceCompetencyTypeschema_TaxonomyId_TxsdCompetencyTypeSequenceTaxonomyId_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TaxonomyId.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The date the person received their degree.
type XsdGoPkgHasElems_DegreeDatesequenceEduDegreeTypeschema_DegreeDate_TFlexibleDatesType_ struct {
	//	The date the person received their degree.
	DegreeDates []*TFlexibleDatesType `xml:"DegreeDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DegreeDatesequenceEduDegreeTypeschema_DegreeDate_TFlexibleDatesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DegreeDatesequenceEduDegreeTypeschema_DegreeDate_TFlexibleDatesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DegreeDatesequenceEduDegreeTypeschema_DegreeDate_TFlexibleDatesType_ instance.
func (me *XsdGoPkgHasElems_DegreeDatesequenceEduDegreeTypeschema_DegreeDate_TFlexibleDatesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DegreeDatesequenceEduDegreeTypeschema_DegreeDate_TFlexibleDatesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DegreeDates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AnswersequenceEmploymentQuestionAnswerPairTypeschema_Answer_XsdtString_ struct {
	Answers []xsdt.String `xml:"Answer"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AnswersequenceEmploymentQuestionAnswerPairTypeschema_Answer_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AnswersequenceEmploymentQuestionAnswerPairTypeschema_Answer_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AnswersequenceEmploymentQuestionAnswerPairTypeschema_Answer_XsdtString_ instance.
func (me *XsdGoPkgHasElems_AnswersequenceEmploymentQuestionAnswerPairTypeschema_Answer_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AnswersequenceEmploymentQuestionAnswerPairTypeschema_Answer_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Contains details about papers or presentations prepared for delivery at a conference.
type XsdGoPkgHasElem_ConferencePapersequencePublicationHistoryTypeschema_ConferencePaper_TConferencePaperType_ struct {
	//	Contains details about papers or presentations prepared for delivery at a conference.
	ConferencePaper *TConferencePaperType `xml:"ConferencePaper"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ConferencePapersequencePublicationHistoryTypeschema_ConferencePaper_TConferencePaperType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ConferencePapersequencePublicationHistoryTypeschema_ConferencePaper_TConferencePaperType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ConferencePapersequencePublicationHistoryTypeschema_ConferencePaper_TConferencePaperType_ instance.
func (me *XsdGoPkgHasElem_ConferencePapersequencePublicationHistoryTypeschema_ConferencePaper_TConferencePaperType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ConferencePapersequencePublicationHistoryTypeschema_ConferencePaper_TConferencePaperType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ConferencePaper.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ContactInfosequenceStructuredXMLResumeTypeschema_ContactInfo_TSEPContactInfoType_ struct {
	ContactInfos []*TSEPContactInfoType `xml:"ContactInfo"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ContactInfosequenceStructuredXMLResumeTypeschema_ContactInfo_TSEPContactInfoType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ContactInfosequenceStructuredXMLResumeTypeschema_ContactInfo_TSEPContactInfoType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ContactInfosequenceStructuredXMLResumeTypeschema_ContactInfo_TSEPContactInfoType_ instance.
func (me *XsdGoPkgHasElems_ContactInfosequenceStructuredXMLResumeTypeschema_ContactInfo_TSEPContactInfoType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ContactInfosequenceStructuredXMLResumeTypeschema_ContactInfo_TSEPContactInfoType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ContactInfos {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CompetencyEvidencesequenceCompetencyTypeschema_CompetencyEvidence_TxsdCompetencyTypeSequenceCompetencyEvidence_ struct {
	CompetencyEvidence *TxsdCompetencyTypeSequenceCompetencyEvidence `xml:"CompetencyEvidence"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CompetencyEvidencesequenceCompetencyTypeschema_CompetencyEvidence_TxsdCompetencyTypeSequenceCompetencyEvidence_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CompetencyEvidencesequenceCompetencyTypeschema_CompetencyEvidence_TxsdCompetencyTypeSequenceCompetencyEvidence_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CompetencyEvidencesequenceCompetencyTypeschema_CompetencyEvidence_TxsdCompetencyTypeSequenceCompetencyEvidence_ instance.
func (me *XsdGoPkgHasElem_CompetencyEvidencesequenceCompetencyTypeschema_CompetencyEvidence_TxsdCompetencyTypeSequenceCompetencyEvidence_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CompetencyEvidencesequenceCompetencyTypeschema_CompetencyEvidence_TxsdCompetencyTypeSequenceCompetencyEvidence_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CompetencyEvidence.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_OrgIndustrysequencePositionHistoryTypeschema_OrgIndustry_TPositionOrgIndustryType_ struct {
	OrgIndustry *TPositionOrgIndustryType `xml:"OrgIndustry"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OrgIndustrysequencePositionHistoryTypeschema_OrgIndustry_TPositionOrgIndustryType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OrgIndustrysequencePositionHistoryTypeschema_OrgIndustry_TPositionOrgIndustryType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_OrgIndustrysequencePositionHistoryTypeschema_OrgIndustry_TPositionOrgIndustryType_ instance.
func (me *XsdGoPkgHasElem_OrgIndustrysequencePositionHistoryTypeschema_OrgIndustry_TPositionOrgIndustryType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OrgIndustrysequencePositionHistoryTypeschema_OrgIndustry_TPositionOrgIndustryType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.OrgIndustry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Deprecated in favor of OrganizationName element.
type XsdGoPkgHasElems_OrganizationsequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_Organization_XsdtString_ struct {
	//	Deprecated in favor of OrganizationName element.
	Organizations []xsdt.String `xml:"Organization"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OrganizationsequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_Organization_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OrganizationsequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_Organization_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OrganizationsequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_Organization_XsdtString_ instance.
func (me *XsdGoPkgHasElems_OrganizationsequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_Organization_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OrganizationsequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_Organization_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CopyrightsequenceBasicBibliographicRecordTypeschema_Copyright_TCopyrightType_ struct {
	Copyrights []*TCopyrightType `xml:"Copyright"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CopyrightsequenceBasicBibliographicRecordTypeschema_Copyright_TCopyrightType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CopyrightsequenceBasicBibliographicRecordTypeschema_Copyright_TCopyrightType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CopyrightsequenceBasicBibliographicRecordTypeschema_Copyright_TCopyrightType_ instance.
func (me *XsdGoPkgHasElems_CopyrightsequenceBasicBibliographicRecordTypeschema_Copyright_TCopyrightType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CopyrightsequenceBasicBibliographicRecordTypeschema_Copyright_TCopyrightType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Copyrights {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Reflects the official names of any and all major concentrations associated with the student's degree title. For example, a Math major may have an Applied Math concentration even though this area of concentration is not required to pursue a Math major.
type XsdGoPkgHasElem_DegreeConcentrationsequenceMajorTypeschema_DegreeConcentration_XsdtString_ struct {
	//	Reflects the official names of any and all major concentrations associated with the student's degree title. For example, a Math major may have an Applied Math concentration even though this area of concentration is not required to pursue a Math major.
	DegreeConcentration xsdt.String `xml:"DegreeConcentration"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DegreeConcentrationsequenceMajorTypeschema_DegreeConcentration_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DegreeConcentrationsequenceMajorTypeschema_DegreeConcentration_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DegreeConcentrationsequenceMajorTypeschema_DegreeConcentration_XsdtString_ instance.
func (me *XsdGoPkgHasElem_DegreeConcentrationsequenceMajorTypeschema_DegreeConcentration_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DegreeConcentrationsequenceMajorTypeschema_DegreeConcentration_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_UnitOrDivisionsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_UnitOrDivision_XsdtString_ struct {
	UnitOrDivisions []xsdt.String `xml:"UnitOrDivision"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_UnitOrDivisionsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_UnitOrDivision_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_UnitOrDivisionsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_UnitOrDivision_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_UnitOrDivisionsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_UnitOrDivision_XsdtString_ instance.
func (me *XsdGoPkgHasElems_UnitOrDivisionsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_UnitOrDivision_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_UnitOrDivisionsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_UnitOrDivision_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Code indicating the type of credit used (awarded) by the institution.
type XsdGoPkgHasElems_AcademicCreditCodesequenceEducationalMeasureTypeschema_AcademicCreditCode_TAcademicCreditCodeType_ struct {
	//	Code indicating the type of credit used (awarded) by the institution.
	AcademicCreditCodes []TAcademicCreditCodeType `xml:"AcademicCreditCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AcademicCreditCodesequenceEducationalMeasureTypeschema_AcademicCreditCode_TAcademicCreditCodeType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AcademicCreditCodesequenceEducationalMeasureTypeschema_AcademicCreditCode_TAcademicCreditCodeType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AcademicCreditCodesequenceEducationalMeasureTypeschema_AcademicCreditCode_TAcademicCreditCodeType_ instance.
func (me *XsdGoPkgHasElems_AcademicCreditCodesequenceEducationalMeasureTypeschema_AcademicCreditCode_TAcademicCreditCodeType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AcademicCreditCodesequenceEducationalMeasureTypeschema_AcademicCreditCode_TAcademicCreditCodeType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ObjectivesequenceStructuredXMLResumeTypeschema_Objective_XsdtString_ struct {
	Objectives []xsdt.String `xml:"Objective"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ObjectivesequenceStructuredXMLResumeTypeschema_Objective_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ObjectivesequenceStructuredXMLResumeTypeschema_Objective_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ObjectivesequenceStructuredXMLResumeTypeschema_Objective_XsdtString_ instance.
func (me *XsdGoPkgHasElems_ObjectivesequenceStructuredXMLResumeTypeschema_Objective_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ObjectivesequenceStructuredXMLResumeTypeschema_Objective_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TaxonomyNamesequenceOccupationalCategoryTypeschema_TaxonomyName_TxsdOccupationalCategoryTypeSequenceTaxonomyName_ struct {
	TaxonomyNames []*TxsdOccupationalCategoryTypeSequenceTaxonomyName `xml:"TaxonomyName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TaxonomyNamesequenceOccupationalCategoryTypeschema_TaxonomyName_TxsdOccupationalCategoryTypeSequenceTaxonomyName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TaxonomyNamesequenceOccupationalCategoryTypeschema_TaxonomyName_TxsdOccupationalCategoryTypeSequenceTaxonomyName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TaxonomyNamesequenceOccupationalCategoryTypeschema_TaxonomyName_TxsdOccupationalCategoryTypeSequenceTaxonomyName_ instance.
func (me *XsdGoPkgHasElems_TaxonomyNamesequenceOccupationalCategoryTypeschema_TaxonomyName_TxsdOccupationalCategoryTypeSequenceTaxonomyName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TaxonomyNamesequenceOccupationalCategoryTypeschema_TaxonomyName_TxsdOccupationalCategoryTypeSequenceTaxonomyName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.TaxonomyNames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_JobPlansequenceJobLevelInfoTypeschema_JobPlan_XsdtString_ struct {
	JobPlans []xsdt.String `xml:"JobPlan"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_JobPlansequenceJobLevelInfoTypeschema_JobPlan_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_JobPlansequenceJobLevelInfoTypeschema_JobPlan_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_JobPlansequenceJobLevelInfoTypeschema_JobPlan_XsdtString_ instance.
func (me *XsdGoPkgHasElems_JobPlansequenceJobLevelInfoTypeschema_JobPlan_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_JobPlansequenceJobLevelInfoTypeschema_JobPlan_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DatesOfServicesequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DatesOfService_TDatesOfServiceType_ struct {
	DatesOfServices []*TDatesOfServiceType `xml:"DatesOfService"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DatesOfServicesequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DatesOfService_TDatesOfServiceType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DatesOfServicesequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DatesOfService_TDatesOfServiceType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DatesOfServicesequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DatesOfService_TDatesOfServiceType_ instance.
func (me *XsdGoPkgHasElems_DatesOfServicesequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DatesOfService_TDatesOfServiceType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DatesOfServicesequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DatesOfService_TDatesOfServiceType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DatesOfServices {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EndingCompensationsequencePositionCompensationTypeschema_EndingCompensation_TxsdPositionCompensationTypeSequenceEndingCompensation_ struct {
	EndingCompensations []*TxsdPositionCompensationTypeSequenceStartingCompensation `xml:"EndingCompensation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EndingCompensationsequencePositionCompensationTypeschema_EndingCompensation_TxsdPositionCompensationTypeSequenceEndingCompensation_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EndingCompensationsequencePositionCompensationTypeschema_EndingCompensation_TxsdPositionCompensationTypeSequenceEndingCompensation_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EndingCompensationsequencePositionCompensationTypeschema_EndingCompensation_TxsdPositionCompensationTypeSequenceEndingCompensation_ instance.
func (me *XsdGoPkgHasElems_EndingCompensationsequencePositionCompensationTypeschema_EndingCompensation_TxsdPositionCompensationTypeSequenceEndingCompensation_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EndingCompensationsequencePositionCompensationTypeschema_EndingCompensation_TxsdPositionCompensationTypeSequenceEndingCompensation_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EndingCompensations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Deprecated in favor of Degree construct.
type XsdGoPkgHasElems_DatesOfAttendancesequenceSchoolOrInstitutionTypeschema_DatesOfAttendance_TDeprecatedDatesOfAttendanceType_ struct {
	//	Deprecated in favor of Degree construct.
	DatesOfAttendances []*TDeprecatedDatesOfAttendanceType `xml:"DatesOfAttendance"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DatesOfAttendancesequenceSchoolOrInstitutionTypeschema_DatesOfAttendance_TDeprecatedDatesOfAttendanceType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DatesOfAttendancesequenceSchoolOrInstitutionTypeschema_DatesOfAttendance_TDeprecatedDatesOfAttendanceType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DatesOfAttendancesequenceSchoolOrInstitutionTypeschema_DatesOfAttendance_TDeprecatedDatesOfAttendanceType_ instance.
func (me *XsdGoPkgHasElems_DatesOfAttendancesequenceSchoolOrInstitutionTypeschema_DatesOfAttendance_TDeprecatedDatesOfAttendanceType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DatesOfAttendancesequenceSchoolOrInstitutionTypeschema_DatesOfAttendance_TDeprecatedDatesOfAttendanceType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DatesOfAttendances {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DisciplinaryActionsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DisciplinaryAction_XsdtString_ struct {
	DisciplinaryAction xsdt.String `xml:"DisciplinaryAction"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DisciplinaryActionsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DisciplinaryAction_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DisciplinaryActionsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DisciplinaryAction_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DisciplinaryActionsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DisciplinaryAction_XsdtString_ instance.
func (me *XsdGoPkgHasElem_DisciplinaryActionsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DisciplinaryAction_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DisciplinaryActionsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DisciplinaryAction_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Code indicating the level or type or both, of work which is reflected in the grade average and the credit hours
type XsdGoPkgHasElems_CourseLevelCodesequenceEducationalMeasureTypeschema_CourseLevelCode_TCourseLevelCodeType_ struct {
	//	Code indicating the level or type or both, of work which is reflected in the grade average and the credit hours
	CourseLevelCodes []TCourseLevelCodeType `xml:"CourseLevelCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CourseLevelCodesequenceEducationalMeasureTypeschema_CourseLevelCode_TCourseLevelCodeType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CourseLevelCodesequenceEducationalMeasureTypeschema_CourseLevelCode_TCourseLevelCodeType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CourseLevelCodesequenceEducationalMeasureTypeschema_CourseLevelCode_TCourseLevelCodeType_ instance.
func (me *XsdGoPkgHasElems_CourseLevelCodesequenceEducationalMeasureTypeschema_CourseLevelCode_TCourseLevelCodeType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CourseLevelCodesequenceEducationalMeasureTypeschema_CourseLevelCode_TCourseLevelCodeType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	This is the total number of credits (or credit hours) included in the grade point average for this particular summary. Inclusion or exclusion of certain credits depends on the policy of the sending institution.
type XsdGoPkgHasElems_AcademicCreditHoursIncludedsequenceEducationalMeasureTypeschema_AcademicCreditHoursIncluded_XsdtDecimal_ struct {
	//	This is the total number of credits (or credit hours) included in the grade point average for this particular summary. Inclusion or exclusion of certain credits depends on the policy of the sending institution.
	AcademicCreditHoursIncludeds []xsdt.Decimal `xml:"AcademicCreditHoursIncluded"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AcademicCreditHoursIncludedsequenceEducationalMeasureTypeschema_AcademicCreditHoursIncluded_XsdtDecimal_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AcademicCreditHoursIncludedsequenceEducationalMeasureTypeschema_AcademicCreditHoursIncluded_XsdtDecimal_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AcademicCreditHoursIncludedsequenceEducationalMeasureTypeschema_AcademicCreditHoursIncluded_XsdtDecimal_ instance.
func (me *XsdGoPkgHasElems_AcademicCreditHoursIncludedsequenceEducationalMeasureTypeschema_AcademicCreditHoursIncluded_XsdtDecimal_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AcademicCreditHoursIncludedsequenceEducationalMeasureTypeschema_AcademicCreditHoursIncluded_XsdtDecimal_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_JobGradesequenceJobLevelInfoTypeschema_JobGrade_XsdtString_ struct {
	JobGrades []xsdt.String `xml:"JobGrade"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_JobGradesequenceJobLevelInfoTypeschema_JobGrade_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_JobGradesequenceJobLevelInfoTypeschema_JobGrade_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_JobGradesequenceJobLevelInfoTypeschema_JobGrade_XsdtString_ instance.
func (me *XsdGoPkgHasElems_JobGradesequenceJobLevelInfoTypeschema_JobGrade_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_JobGradesequenceJobLevelInfoTypeschema_JobGrade_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_JobLevelInfosequencePositionHistoryTypeschema_JobLevelInfo_TJobLevelInfoType_ struct {
	JobLevelInfo *TJobLevelInfoType `xml:"JobLevelInfo"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_JobLevelInfosequencePositionHistoryTypeschema_JobLevelInfo_TJobLevelInfoType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_JobLevelInfosequencePositionHistoryTypeschema_JobLevelInfo_TJobLevelInfoType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_JobLevelInfosequencePositionHistoryTypeschema_JobLevelInfo_TJobLevelInfoType_ instance.
func (me *XsdGoPkgHasElem_JobLevelInfosequencePositionHistoryTypeschema_JobLevelInfo_TJobLevelInfoType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_JobLevelInfosequencePositionHistoryTypeschema_JobLevelInfo_TJobLevelInfoType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.JobLevelInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_StreetNamesequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_StreetName_XsdtString_ struct {
	StreetNames []xsdt.String `xml:"StreetName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_StreetNamesequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_StreetName_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_StreetNamesequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_StreetName_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_StreetNamesequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_StreetName_XsdtString_ instance.
func (me *XsdGoPkgHasElems_StreetNamesequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_StreetName_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_StreetNamesequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_StreetName_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Deprecated in favor of Degree construct.
type XsdGoPkgHasElems_MeasuresequenceSchoolOrInstitutionTypeschema_Measure_TEduMeasureType_ struct {
	//	Deprecated in favor of Degree construct.
	Measures []*TEduMeasureType `xml:"Measure"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MeasuresequenceSchoolOrInstitutionTypeschema_Measure_TEduMeasureType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MeasuresequenceSchoolOrInstitutionTypeschema_Measure_TEduMeasureType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MeasuresequenceSchoolOrInstitutionTypeschema_Measure_TEduMeasureType_ instance.
func (me *XsdGoPkgHasElems_MeasuresequenceSchoolOrInstitutionTypeschema_Measure_TEduMeasureType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MeasuresequenceSchoolOrInstitutionTypeschema_Measure_TEduMeasureType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Measures {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_QualificationSummarysequenceQualificationssequenceStructuredXMLResumeTypeschema_QualificationSummary_XsdtString_ struct {
	QualificationSummaries []xsdt.String `xml:"QualificationSummary"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_QualificationSummarysequenceQualificationssequenceStructuredXMLResumeTypeschema_QualificationSummary_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_QualificationSummarysequenceQualificationssequenceStructuredXMLResumeTypeschema_QualificationSummary_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_QualificationSummarysequenceQualificationssequenceStructuredXMLResumeTypeschema_QualificationSummary_XsdtString_ instance.
func (me *XsdGoPkgHasElems_QualificationSummarysequenceQualificationssequenceStructuredXMLResumeTypeschema_QualificationSummary_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_QualificationSummarysequenceQualificationssequenceStructuredXMLResumeTypeschema_QualificationSummary_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Identifies the measurement system.  i.e. GPA
type XsdGoPkgHasElems_EducationalMeasuresequenceEducationalMeasureTypeschema_EducationalMeasure_TEducationMeasureType_ struct {
	//	Identifies the measurement system.  i.e. GPA
	EducationalMeasures []*TEducationMeasureType `xml:"EducationalMeasure"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EducationalMeasuresequenceEducationalMeasureTypeschema_EducationalMeasure_TEducationMeasureType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EducationalMeasuresequenceEducationalMeasureTypeschema_EducationalMeasure_TEducationMeasureType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EducationalMeasuresequenceEducationalMeasureTypeschema_EducationalMeasure_TEducationMeasureType_ instance.
func (me *XsdGoPkgHasElems_EducationalMeasuresequenceEducationalMeasureTypeschema_EducationalMeasure_TEducationMeasureType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EducationalMeasuresequenceEducationalMeasureTypeschema_EducationalMeasure_TEducationMeasureType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EducationalMeasures {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RolesequenceAssociationTypeschema_Role_TxsdAssociationTypeSequenceRole_ struct {
	Role *TxsdAssociationTypeSequenceRole `xml:"Role"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RolesequenceAssociationTypeschema_Role_TxsdAssociationTypeSequenceRole_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RolesequenceAssociationTypeschema_Role_TxsdAssociationTypeSequenceRole_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RolesequenceAssociationTypeschema_Role_TxsdAssociationTypeSequenceRole_ instance.
func (me *XsdGoPkgHasElem_RolesequenceAssociationTypeschema_Role_TxsdAssociationTypeSequenceRole_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RolesequenceAssociationTypeschema_Role_TxsdAssociationTypeSequenceRole_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Role.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_IdsequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Id_XsdtString_ struct {
	Ids []xsdt.String `xml:"Id"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IdsequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Id_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IdsequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Id_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IdsequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Id_XsdtString_ instance.
func (me *XsdGoPkgHasElems_IdsequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Id_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IdsequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Id_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSourceEnumType xsdt.String

//	This convenience method just performs a simple type conversion to TSourceEnumType's alias type xsdt.String.
func (me TSourceEnumType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TSourceEnumType is "Job Board".
func (me TSourceEnumType) IsJobBoard() bool { return me.String() == "Job Board" }

//	Returns true if the value of this enumerated TSourceEnumType is "Staffing Agency".
func (me TSourceEnumType) IsStaffingAgency() bool { return me.String() == "Staffing Agency" }

//	Returns true if the value of this enumerated TSourceEnumType is "Intermediary".
func (me TSourceEnumType) IsIntermediary() bool { return me.String() == "Intermediary" }

//	Returns true if the value of this enumerated TSourceEnumType is "Referrer".
func (me TSourceEnumType) IsReferrer() bool { return me.String() == "Referrer" }

//	Since TSourceEnumType is just a simple String type, this merely sets the current value from the specified string.
func (me *TSourceEnumType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TSourceEnumType is just a simple String type, this merely returns the current string value.
func (me TSourceEnumType) String() string { return xsdt.String(me).String() }

type XsdGoPkgHasElems_StandardValuechoiceSourceTypeTypeschema_StandardValue_TSourceEnumType_ struct {
	StandardValues []TSourceEnumType `xml:"StandardValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_StandardValuechoiceSourceTypeTypeschema_StandardValue_TSourceEnumType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_StandardValuechoiceSourceTypeTypeschema_StandardValue_TSourceEnumType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_StandardValuechoiceSourceTypeTypeschema_StandardValue_TSourceEnumType_ instance.
func (me *XsdGoPkgHasElems_StandardValuechoiceSourceTypeTypeschema_StandardValue_TSourceEnumType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_StandardValuechoiceSourceTypeTypeschema_StandardValue_TSourceEnumType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MeasureSystemsequenceEduMeasureTypeschema_MeasureSystem_XsdtString_ struct {
	MeasureSystems []xsdt.String `xml:"MeasureSystem"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MeasureSystemsequenceEduMeasureTypeschema_MeasureSystem_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MeasureSystemsequenceEduMeasureTypeschema_MeasureSystem_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MeasureSystemsequenceEduMeasureTypeschema_MeasureSystem_XsdtString_ instance.
func (me *XsdGoPkgHasElems_MeasureSystemsequenceEduMeasureTypeschema_MeasureSystem_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MeasureSystemsequenceEduMeasureTypeschema_MeasureSystem_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EffectiveDatesequenceCredentialTypeschema_EffectiveDate_TxsdCredentialTypeSequenceEffectiveDate_ struct {
	EffectiveDates []*TxsdCredentialTypeSequenceEffectiveDate `xml:"EffectiveDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EffectiveDatesequenceCredentialTypeschema_EffectiveDate_TxsdCredentialTypeSequenceEffectiveDate_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EffectiveDatesequenceCredentialTypeschema_EffectiveDate_TxsdCredentialTypeSequenceEffectiveDate_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EffectiveDatesequenceCredentialTypeschema_EffectiveDate_TxsdCredentialTypeSequenceEffectiveDate_ instance.
func (me *XsdGoPkgHasElems_EffectiveDatesequenceCredentialTypeschema_EffectiveDate_TxsdCredentialTypeSequenceEffectiveDate_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EffectiveDatesequenceCredentialTypeschema_EffectiveDate_TxsdCredentialTypeSequenceEffectiveDate_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EffectiveDates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AffixsequenceAlternateScriptsequencePersonNameTypeschema_Affix_TxsdPersonNameTypeSequenceAlternateScriptSequenceAffix_ struct {
	Affix *TxsdPersonNameTypeSequenceAlternateScriptSequenceAffix `xml:"Affix"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AffixsequenceAlternateScriptsequencePersonNameTypeschema_Affix_TxsdPersonNameTypeSequenceAlternateScriptSequenceAffix_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AffixsequenceAlternateScriptsequencePersonNameTypeschema_Affix_TxsdPersonNameTypeSequenceAlternateScriptSequenceAffix_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AffixsequenceAlternateScriptsequencePersonNameTypeschema_Affix_TxsdPersonNameTypeSequenceAlternateScriptSequenceAffix_ instance.
func (me *XsdGoPkgHasElem_AffixsequenceAlternateScriptsequencePersonNameTypeschema_Affix_TxsdPersonNameTypeSequenceAlternateScriptSequenceAffix_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AffixsequenceAlternateScriptsequencePersonNameTypeschema_Affix_TxsdPersonNameTypeSequenceAlternateScriptSequenceAffix_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Affix.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_QuestionsequenceEmploymentQuestionAnswerPairTypeschema_Question_XsdtString_ struct {
	Questions []xsdt.String `xml:"Question"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_QuestionsequenceEmploymentQuestionAnswerPairTypeschema_Question_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_QuestionsequenceEmploymentQuestionAnswerPairTypeschema_Question_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_QuestionsequenceEmploymentQuestionAnswerPairTypeschema_Question_XsdtString_ instance.
func (me *XsdGoPkgHasElems_QuestionsequenceEmploymentQuestionAnswerPairTypeschema_Question_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_QuestionsequenceEmploymentQuestionAnswerPairTypeschema_Question_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MostRecentDatesequenceTxsdCopyrightTypeSequenceCopyrightDatesCopyrightDatessequenceCopyrightTypeschema_MostRecentDate_TFlexibleDatesType_ struct {
	MostRecentDates []*TFlexibleDatesType `xml:"MostRecentDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MostRecentDatesequenceTxsdCopyrightTypeSequenceCopyrightDatesCopyrightDatessequenceCopyrightTypeschema_MostRecentDate_TFlexibleDatesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MostRecentDatesequenceTxsdCopyrightTypeSequenceCopyrightDatesCopyrightDatessequenceCopyrightTypeschema_MostRecentDate_TFlexibleDatesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MostRecentDatesequenceTxsdCopyrightTypeSequenceCopyrightDatesCopyrightDatessequenceCopyrightTypeschema_MostRecentDate_TFlexibleDatesType_ instance.
func (me *XsdGoPkgHasElems_MostRecentDatesequenceTxsdCopyrightTypeSequenceCopyrightDatesCopyrightDatessequenceCopyrightTypeschema_MostRecentDate_TFlexibleDatesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MostRecentDatesequenceTxsdCopyrightTypeSequenceCopyrightDatesCopyrightDatessequenceCopyrightTypeschema_MostRecentDate_TFlexibleDatesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MostRecentDates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CompetencyWeightsequenceCompetencyTypeschema_CompetencyWeight_TxsdCompetencyTypeSequenceCompetencyWeight_ struct {
	CompetencyWeight *TxsdCompetencyTypeSequenceCompetencyWeight `xml:"CompetencyWeight"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CompetencyWeightsequenceCompetencyTypeschema_CompetencyWeight_TxsdCompetencyTypeSequenceCompetencyWeight_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CompetencyWeightsequenceCompetencyTypeschema_CompetencyWeight_TxsdCompetencyTypeSequenceCompetencyWeight_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CompetencyWeightsequenceCompetencyTypeschema_CompetencyWeight_TxsdCompetencyTypeSequenceCompetencyWeight_ instance.
func (me *XsdGoPkgHasElem_CompetencyWeightsequenceCompetencyTypeschema_CompetencyWeight_TxsdCompetencyTypeSequenceCompetencyWeight_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CompetencyWeightsequenceCompetencyTypeschema_CompetencyWeight_TxsdCompetencyTypeSequenceCompetencyWeight_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CompetencyWeight.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AlternateScriptsequencePersonNameTypeschema_AlternateScript_TxsdPersonNameTypeSequenceAlternateScript_ struct {
	AlternateScript *TxsdPersonNameTypeSequenceAlternateScript `xml:"AlternateScript"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AlternateScriptsequencePersonNameTypeschema_AlternateScript_TxsdPersonNameTypeSequenceAlternateScript_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AlternateScriptsequencePersonNameTypeschema_AlternateScript_TxsdPersonNameTypeSequenceAlternateScript_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AlternateScriptsequencePersonNameTypeschema_AlternateScript_TxsdPersonNameTypeSequenceAlternateScript_ instance.
func (me *XsdGoPkgHasElem_AlternateScriptsequencePersonNameTypeschema_AlternateScript_TxsdPersonNameTypeSequenceAlternateScript_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AlternateScriptsequencePersonNameTypeschema_AlternateScript_TxsdPersonNameTypeSequenceAlternateScript_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AlternateScript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RecognitionAchievedsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_RecognitionAchieved_XsdtString_ struct {
	RecognitionAchieved xsdt.String `xml:"RecognitionAchieved"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RecognitionAchievedsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_RecognitionAchieved_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RecognitionAchievedsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_RecognitionAchieved_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_RecognitionAchievedsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_RecognitionAchieved_XsdtString_ instance.
func (me *XsdGoPkgHasElem_RecognitionAchievedsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_RecognitionAchieved_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RecognitionAchievedsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_RecognitionAchieved_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_IssuesequenceextensioncomplexContentArticleTypeschema_Issue_XsdtString_ struct {
	Issues []xsdt.String `xml:"Issue"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IssuesequenceextensioncomplexContentArticleTypeschema_Issue_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IssuesequenceextensioncomplexContentArticleTypeschema_Issue_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IssuesequenceextensioncomplexContentArticleTypeschema_Issue_XsdtString_ instance.
func (me *XsdGoPkgHasElems_IssuesequenceextensioncomplexContentArticleTypeschema_Issue_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IssuesequenceextensioncomplexContentArticleTypeschema_Issue_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ValidTosequenceEffectiveDatesequenceCredentialTypeschema_ValidTo_TFlexibleDatesType_ struct {
	ValidTos []*TFlexibleDatesType `xml:"ValidTo"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ValidTosequenceEffectiveDatesequenceCredentialTypeschema_ValidTo_TFlexibleDatesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ValidTosequenceEffectiveDatesequenceCredentialTypeschema_ValidTo_TFlexibleDatesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ValidTosequenceEffectiveDatesequenceCredentialTypeschema_ValidTo_TFlexibleDatesType_ instance.
func (me *XsdGoPkgHasElems_ValidTosequenceEffectiveDatesequenceCredentialTypeschema_ValidTo_TFlexibleDatesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ValidTosequenceEffectiveDatesequenceCredentialTypeschema_ValidTo_TFlexibleDatesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ValidTos {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_JobStepsequenceJobLevelInfoTypeschema_JobStep_XsdtString_ struct {
	JobSteps []xsdt.String `xml:"JobStep"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_JobStepsequenceJobLevelInfoTypeschema_JobStep_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_JobStepsequenceJobLevelInfoTypeschema_JobStep_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_JobStepsequenceJobLevelInfoTypeschema_JobStep_XsdtString_ instance.
func (me *XsdGoPkgHasElems_JobStepsequenceJobLevelInfoTypeschema_JobStep_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_JobStepsequenceJobLevelInfoTypeschema_JobStep_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ContactInfosequenceVerificationTypeschema_ContactInfo_TxsdVerificationTypeSequenceContactInfo_ struct {
	ContactInfos []*TxsdVerificationTypeSequenceContactInfo `xml:"ContactInfo"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ContactInfosequenceVerificationTypeschema_ContactInfo_TxsdVerificationTypeSequenceContactInfo_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ContactInfosequenceVerificationTypeschema_ContactInfo_TxsdVerificationTypeSequenceContactInfo_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ContactInfosequenceVerificationTypeschema_ContactInfo_TxsdVerificationTypeSequenceContactInfo_ instance.
func (me *XsdGoPkgHasElems_ContactInfosequenceVerificationTypeschema_ContactInfo_TxsdVerificationTypeSequenceContactInfo_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ContactInfosequenceVerificationTypeschema_ContactInfo_TxsdVerificationTypeSequenceContactInfo_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ContactInfos {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_VerifyEmploymentsequenceVerificationTypeschema_VerifyEmployment_XsdtBoolean_ struct {
	VerifyEmployments []xsdt.Boolean `xml:"VerifyEmployment"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_VerifyEmploymentsequenceVerificationTypeschema_VerifyEmployment_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_VerifyEmploymentsequenceVerificationTypeschema_VerifyEmployment_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_VerifyEmploymentsequenceVerificationTypeschema_VerifyEmployment_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElems_VerifyEmploymentsequenceVerificationTypeschema_VerifyEmployment_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_VerifyEmploymentsequenceVerificationTypeschema_VerifyEmployment_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ServiceStatussequenceMilitaryHistoryTypeschema_ServiceStatus_XsdtString_ struct {
	ServiceStatuses []xsdt.String `xml:"ServiceStatus"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ServiceStatussequenceMilitaryHistoryTypeschema_ServiceStatus_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ServiceStatussequenceMilitaryHistoryTypeschema_ServiceStatus_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ServiceStatussequenceMilitaryHistoryTypeschema_ServiceStatus_XsdtString_ instance.
func (me *XsdGoPkgHasElems_ServiceStatussequenceMilitaryHistoryTypeschema_ServiceStatus_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ServiceStatussequenceMilitaryHistoryTypeschema_ServiceStatus_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_PatentMilestone_TxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestone_ struct {
	PatentMilestone *TxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestone `xml:"PatentMilestone"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_PatentMilestone_TxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestone_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_PatentMilestone_TxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestone_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_PatentMilestone_TxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestone_ instance.
func (me *XsdGoPkgHasElem_PatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_PatentMilestone_TxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestone_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_PatentMilestone_TxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestone_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PatentMilestone.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PositionTitlesequenceReferenceTypeschema_PositionTitle_XsdtString_ struct {
	PositionTitles []xsdt.String `xml:"PositionTitle"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PositionTitlesequenceReferenceTypeschema_PositionTitle_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PositionTitlesequenceReferenceTypeschema_PositionTitle_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PositionTitlesequenceReferenceTypeschema_PositionTitle_XsdtString_ instance.
func (me *XsdGoPkgHasElems_PositionTitlesequenceReferenceTypeschema_PositionTitle_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PositionTitlesequenceReferenceTypeschema_PositionTitle_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	This is a code indicating that an A+ grade has a value higher than the highest possible GPA.  False - It is not possible to have a higher GPA than indicated in Range Maximum.  True - It is possible to have a higher GPA than indicated in Range Maximum.
type XsdGoPkgHasElems_ExcessiveValueIndicatorsequenceEducationMeasureTypeschema_ExcessiveValueIndicator_XsdtBoolean_ struct {
	//	This is a code indicating that an A+ grade has a value higher than the highest possible GPA.  False - It is not possible to have a higher GPA than indicated in Range Maximum.  True - It is possible to have a higher GPA than indicated in Range Maximum.
	ExcessiveValueIndicators []xsdt.Boolean `xml:"ExcessiveValueIndicator"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ExcessiveValueIndicatorsequenceEducationMeasureTypeschema_ExcessiveValueIndicator_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ExcessiveValueIndicatorsequenceEducationMeasureTypeschema_ExcessiveValueIndicator_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ExcessiveValueIndicatorsequenceEducationMeasureTypeschema_ExcessiveValueIndicator_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElems_ExcessiveValueIndicatorsequenceEducationMeasureTypeschema_ExcessiveValueIndicator_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ExcessiveValueIndicatorsequenceEducationMeasureTypeschema_ExcessiveValueIndicator_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CountryCodesequencePostalAddressTypeschema_CountryCode_TxsdPostalAddressTypeSequenceCountryCode_ struct {
	CountryCodes []TCurrencyCodeType `xml:"CountryCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CountryCodesequencePostalAddressTypeschema_CountryCode_TxsdPostalAddressTypeSequenceCountryCode_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CountryCodesequencePostalAddressTypeschema_CountryCode_TxsdPostalAddressTypeSequenceCountryCode_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CountryCodesequencePostalAddressTypeschema_CountryCode_TxsdPostalAddressTypeSequenceCountryCode_ instance.
func (me *XsdGoPkgHasElems_CountryCodesequencePostalAddressTypeschema_CountryCode_TxsdPostalAddressTypeSequenceCountryCode_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CountryCodesequencePostalAddressTypeschema_CountryCode_TxsdPostalAddressTypeSequenceCountryCode_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FirstIssuedDatesequenceEffectiveDatesequenceCredentialTypeschema_FirstIssuedDate_TFlexibleDatesType_ struct {
	FirstIssuedDates []*TFlexibleDatesType `xml:"FirstIssuedDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FirstIssuedDatesequenceEffectiveDatesequenceCredentialTypeschema_FirstIssuedDate_TFlexibleDatesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FirstIssuedDatesequenceEffectiveDatesequenceCredentialTypeschema_FirstIssuedDate_TFlexibleDatesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FirstIssuedDatesequenceEffectiveDatesequenceCredentialTypeschema_FirstIssuedDate_TFlexibleDatesType_ instance.
func (me *XsdGoPkgHasElems_FirstIssuedDatesequenceEffectiveDatesequenceCredentialTypeschema_FirstIssuedDate_TFlexibleDatesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FirstIssuedDatesequenceEffectiveDatesequenceCredentialTypeschema_FirstIssuedDate_TFlexibleDatesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FirstIssuedDates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The campus, department or other organizational unit for the educational institution.
type XsdGoPkgHasElem_OrganizationUnitsequenceSchoolOrInstitutionTypeschema_OrganizationUnit_TxsdSchoolOrInstitutionTypeSequenceOrganizationUnit_ struct {
	//	The campus, department or other organizational unit for the educational institution.
	OrganizationUnit *TxsdSchoolOrInstitutionTypeSequenceOrganizationUnit `xml:"OrganizationUnit"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OrganizationUnitsequenceSchoolOrInstitutionTypeschema_OrganizationUnit_TxsdSchoolOrInstitutionTypeSequenceOrganizationUnit_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OrganizationUnitsequenceSchoolOrInstitutionTypeschema_OrganizationUnit_TxsdSchoolOrInstitutionTypeSequenceOrganizationUnit_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_OrganizationUnitsequenceSchoolOrInstitutionTypeschema_OrganizationUnit_TxsdSchoolOrInstitutionTypeSequenceOrganizationUnit_ instance.
func (me *XsdGoPkgHasElem_OrganizationUnitsequenceSchoolOrInstitutionTypeschema_OrganizationUnit_TxsdSchoolOrInstitutionTypeSequenceOrganizationUnit_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OrganizationUnitsequenceSchoolOrInstitutionTypeschema_OrganizationUnit_TxsdSchoolOrInstitutionTypeSequenceOrganizationUnit_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.OrganizationUnit.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TLocalTimeType xsdt.Time

//	Since TLocalTimeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TLocalTimeType) Set(s string) { (*xsdt.Time)(me).Set(s) }

//	Since TLocalTimeType is just a simple String type, this merely returns the current string value.
func (me TLocalTimeType) String() string { return xsdt.Time(me).String() }

//	This convenience method just performs a simple type conversion to TLocalTimeType's alias type xsdt.Time.
func (me TLocalTimeType) ToXsdtTime() xsdt.Time { return xsdt.Time(me) }

type XsdGoPkgHasElems_MeasureValuesequenceEduMeasureTypeschema_MeasureValue_XsdtString_ struct {
	MeasureValues []xsdt.String `xml:"MeasureValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MeasureValuesequenceEduMeasureTypeschema_MeasureValue_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MeasureValuesequenceEduMeasureTypeschema_MeasureValue_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MeasureValuesequenceEduMeasureTypeschema_MeasureValue_XsdtString_ instance.
func (me *XsdGoPkgHasElems_MeasureValuesequenceEduMeasureTypeschema_MeasureValue_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MeasureValuesequenceEduMeasureTypeschema_MeasureValue_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_StatussequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Status_TPatentStatusTypes_ struct {
	Statuses []TPatentStatusTypes `xml:"Status"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_StatussequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Status_TPatentStatusTypes_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_StatussequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Status_TPatentStatusTypes_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_StatussequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Status_TPatentStatusTypes_ instance.
func (me *XsdGoPkgHasElems_StatussequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Status_TPatentStatusTypes_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_StatussequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Status_TPatentStatusTypes_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EmployerOrgsequenceEmploymentHistoryTypeschema_EmployerOrg_TEmployerOrgDataType_ struct {
	EmployerOrg *TEmployerOrgDataType `xml:"EmployerOrg"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EmployerOrgsequenceEmploymentHistoryTypeschema_EmployerOrg_TEmployerOrgDataType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EmployerOrgsequenceEmploymentHistoryTypeschema_EmployerOrg_TEmployerOrgDataType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_EmployerOrgsequenceEmploymentHistoryTypeschema_EmployerOrg_TEmployerOrgDataType_ instance.
func (me *XsdGoPkgHasElem_EmployerOrgsequenceEmploymentHistoryTypeschema_EmployerOrg_TEmployerOrgDataType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EmployerOrgsequenceEmploymentHistoryTypeschema_EmployerOrg_TEmployerOrgDataType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EmployerOrg.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EmployerContactInfosequenceEmployerOrgDataTypeschema_EmployerContactInfo_TEmpContactInfoType_ struct {
	EmployerContactInfos []*TEmpContactInfoType `xml:"EmployerContactInfo"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EmployerContactInfosequenceEmployerOrgDataTypeschema_EmployerContactInfo_TEmpContactInfoType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EmployerContactInfosequenceEmployerOrgDataTypeschema_EmployerContactInfo_TEmpContactInfoType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EmployerContactInfosequenceEmployerOrgDataTypeschema_EmployerContactInfo_TEmpContactInfoType_ instance.
func (me *XsdGoPkgHasElems_EmployerContactInfosequenceEmployerOrgDataTypeschema_EmployerContactInfo_TEmpContactInfoType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EmployerContactInfosequenceEmployerOrgDataTypeschema_EmployerContactInfo_TEmpContactInfoType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EmployerContactInfos {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_JournalOrSerialNamesequenceextensioncomplexContentArticleTypeschema_JournalOrSerialName_XsdtString_ struct {
	JournalOrSerialNames []xsdt.String `xml:"JournalOrSerialName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_JournalOrSerialNamesequenceextensioncomplexContentArticleTypeschema_JournalOrSerialName_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_JournalOrSerialNamesequenceextensioncomplexContentArticleTypeschema_JournalOrSerialName_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_JournalOrSerialNamesequenceextensioncomplexContentArticleTypeschema_JournalOrSerialName_XsdtString_ instance.
func (me *XsdGoPkgHasElems_JournalOrSerialNamesequenceextensioncomplexContentArticleTypeschema_JournalOrSerialName_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_JournalOrSerialNamesequenceextensioncomplexContentArticleTypeschema_JournalOrSerialName_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_IssuingAuthoritysequenceCredentialTypeschema_IssuingAuthority_TIssuingAuthorityType_ struct {
	IssuingAuthorities []*TIssuingAuthorityType `xml:"IssuingAuthority"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IssuingAuthoritysequenceCredentialTypeschema_IssuingAuthority_TIssuingAuthorityType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IssuingAuthoritysequenceCredentialTypeschema_IssuingAuthority_TIssuingAuthorityType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IssuingAuthoritysequenceCredentialTypeschema_IssuingAuthority_TIssuingAuthorityType_ instance.
func (me *XsdGoPkgHasElems_IssuingAuthoritysequenceCredentialTypeschema_IssuingAuthority_TIssuingAuthorityType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IssuingAuthoritysequenceCredentialTypeschema_IssuingAuthority_TIssuingAuthorityType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.IssuingAuthorities {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_StandardValuechoiceSourceTypeTypeschema_StandardValue_TSourceEnumType_ struct {
	StandardValue TSourceEnumType `xml:"StandardValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_StandardValuechoiceSourceTypeTypeschema_StandardValue_TSourceEnumType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_StandardValuechoiceSourceTypeTypeschema_StandardValue_TSourceEnumType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_StandardValuechoiceSourceTypeTypeschema_StandardValue_TSourceEnumType_ instance.
func (me *XsdGoPkgHasElem_StandardValuechoiceSourceTypeTypeschema_StandardValue_TSourceEnumType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_StandardValuechoiceSourceTypeTypeschema_StandardValue_TSourceEnumType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_NonStandardValuechoiceSourceTypeTypeschema_NonStandardValue_XsdtString_ struct {
	NonStandardValue xsdt.String `xml:"NonStandardValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NonStandardValuechoiceSourceTypeTypeschema_NonStandardValue_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NonStandardValuechoiceSourceTypeTypeschema_NonStandardValue_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_NonStandardValuechoiceSourceTypeTypeschema_NonStandardValue_XsdtString_ instance.
func (me *XsdGoPkgHasElem_NonStandardValuechoiceSourceTypeTypeschema_NonStandardValue_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NonStandardValuechoiceSourceTypeTypeschema_NonStandardValue_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSourceTypeType struct {
	XsdGoPkgHasElem_NonStandardValuechoiceSourceTypeTypeschema_NonStandardValue_XsdtString_

	XsdGoPkgHasElem_StandardValuechoiceSourceTypeTypeschema_StandardValue_TSourceEnumType_
}

//	If the WalkHandlers.TSourceTypeType function is not nil (ie. was set by outside code), calls it with this TSourceTypeType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TSourceTypeType instance.
func (me *TSourceTypeType) Walk() (err error) {
	if fn := WalkHandlers.TSourceTypeType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_StandardValuechoiceSourceTypeTypeschema_StandardValue_TSourceEnumType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_NonStandardValuechoiceSourceTypeTypeschema_NonStandardValue_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_IssuingAuthoritysequenceAchievementTypeschema_IssuingAuthority_XsdtString_ struct {
	IssuingAuthorities []xsdt.String `xml:"IssuingAuthority"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IssuingAuthoritysequenceAchievementTypeschema_IssuingAuthority_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IssuingAuthoritysequenceAchievementTypeschema_IssuingAuthority_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IssuingAuthoritysequenceAchievementTypeschema_IssuingAuthority_XsdtString_ instance.
func (me *XsdGoPkgHasElems_IssuingAuthoritysequenceAchievementTypeschema_IssuingAuthority_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IssuingAuthoritysequenceAchievementTypeschema_IssuingAuthority_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_OrganizationNamesequencePositionOrgNameTypeschema_OrganizationName_XsdtString_ struct {
	OrganizationNames []xsdt.String `xml:"OrganizationName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OrganizationNamesequencePositionOrgNameTypeschema_OrganizationName_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OrganizationNamesequencePositionOrgNameTypeschema_OrganizationName_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OrganizationNamesequencePositionOrgNameTypeschema_OrganizationName_XsdtString_ instance.
func (me *XsdGoPkgHasElems_OrganizationNamesequencePositionOrgNameTypeschema_OrganizationName_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OrganizationNamesequencePositionOrgNameTypeschema_OrganizationName_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RolesequenceSpeakingEventTypeschema_Role_XsdtString_ struct {
	Roles []xsdt.String `xml:"Role"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RolesequenceSpeakingEventTypeschema_Role_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RolesequenceSpeakingEventTypeschema_Role_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RolesequenceSpeakingEventTypeschema_Role_XsdtString_ instance.
func (me *XsdGoPkgHasElems_RolesequenceSpeakingEventTypeschema_Role_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RolesequenceSpeakingEventTypeschema_Role_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ExecutiveSummarysequenceStructuredXMLResumeTypeschema_ExecutiveSummary_XsdtString_ struct {
	ExecutiveSummaries []xsdt.String `xml:"ExecutiveSummary"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ExecutiveSummarysequenceStructuredXMLResumeTypeschema_ExecutiveSummary_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ExecutiveSummarysequenceStructuredXMLResumeTypeschema_ExecutiveSummary_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ExecutiveSummarysequenceStructuredXMLResumeTypeschema_ExecutiveSummary_XsdtString_ instance.
func (me *XsdGoPkgHasElems_ExecutiveSummarysequenceStructuredXMLResumeTypeschema_ExecutiveSummary_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ExecutiveSummarysequenceStructuredXMLResumeTypeschema_ExecutiveSummary_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AnyDatechoiceFlexibleDatesTypeschema_AnyDate_TAnyDateTimeNkNaType_ struct {
	AnyDates []TAnyDateTimeNkNaType `xml:"AnyDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AnyDatechoiceFlexibleDatesTypeschema_AnyDate_TAnyDateTimeNkNaType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AnyDatechoiceFlexibleDatesTypeschema_AnyDate_TAnyDateTimeNkNaType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AnyDatechoiceFlexibleDatesTypeschema_AnyDate_TAnyDateTimeNkNaType_ instance.
func (me *XsdGoPkgHasElems_AnyDatechoiceFlexibleDatesTypeschema_AnyDate_TAnyDateTimeNkNaType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AnyDatechoiceFlexibleDatesTypeschema_AnyDate_TAnyDateTimeNkNaType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TextResumesequenceNonXMLResumeTypeschema_TextResume_XsdtString_ struct {
	TextResumes []xsdt.String `xml:"TextResume"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TextResumesequenceNonXMLResumeTypeschema_TextResume_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TextResumesequenceNonXMLResumeTypeschema_TextResume_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TextResumesequenceNonXMLResumeTypeschema_TextResume_XsdtString_ instance.
func (me *XsdGoPkgHasElems_TextResumesequenceNonXMLResumeTypeschema_TextResume_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TextResumesequenceNonXMLResumeTypeschema_TextResume_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PatentsequencePatentHistoryTypeschema_Patent_TPatentDescriptionType_ struct {
	Patent *TPatentDescriptionType `xml:"Patent"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PatentsequencePatentHistoryTypeschema_Patent_TPatentDescriptionType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PatentsequencePatentHistoryTypeschema_Patent_TPatentDescriptionType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PatentsequencePatentHistoryTypeschema_Patent_TPatentDescriptionType_ instance.
func (me *XsdGoPkgHasElem_PatentsequencePatentHistoryTypeschema_Patent_TPatentDescriptionType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PatentsequencePatentHistoryTypeschema_Patent_TPatentDescriptionType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Patent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The name of any other honors, such as Phi Beta Kappa, etc. that the student may have received.
type XsdGoPkgHasElem_OtherHonorssequenceEduDegreeTypeschema_OtherHonors_TxsdEduDegreeTypeSequenceOtherHonors_ struct {
	//	The name of any other honors, such as Phi Beta Kappa, etc. that the student may have received.
	OtherHonors *TxsdEduDegreeTypeSequenceOtherHonors `xml:"OtherHonors"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OtherHonorssequenceEduDegreeTypeschema_OtherHonors_TxsdEduDegreeTypeSequenceOtherHonors_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OtherHonorssequenceEduDegreeTypeschema_OtherHonors_TxsdEduDegreeTypeSequenceOtherHonors_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_OtherHonorssequenceEduDegreeTypeschema_OtherHonors_TxsdEduDegreeTypeSequenceOtherHonors_ instance.
func (me *XsdGoPkgHasElem_OtherHonorssequenceEduDegreeTypeschema_OtherHonors_TxsdEduDegreeTypeSequenceOtherHonors_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OtherHonorssequenceEduDegreeTypeschema_OtherHonors_TxsdEduDegreeTypeSequenceOtherHonors_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.OtherHonors.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_VerificationsequencePositionHistoryTypeschema_Verification_TVerificationType_ struct {
	Verifications []*TVerificationType `xml:"Verification"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_VerificationsequencePositionHistoryTypeschema_Verification_TVerificationType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_VerificationsequencePositionHistoryTypeschema_Verification_TVerificationType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_VerificationsequencePositionHistoryTypeschema_Verification_TVerificationType_ instance.
func (me *XsdGoPkgHasElems_VerificationsequencePositionHistoryTypeschema_Verification_TVerificationType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_VerificationsequencePositionHistoryTypeschema_Verification_TVerificationType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Verifications {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The official names of any and all major courses of study associated with the student's degree title.
type XsdGoPkgHasElem_DegreeMajorsequenceEduDegreeTypeschema_DegreeMajor_TMajorType_ struct {
	//	The official names of any and all major courses of study associated with the student's degree title.
	DegreeMajor *TMajorType `xml:"DegreeMajor"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DegreeMajorsequenceEduDegreeTypeschema_DegreeMajor_TMajorType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DegreeMajorsequenceEduDegreeTypeschema_DegreeMajor_TMajorType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DegreeMajorsequenceEduDegreeTypeschema_DegreeMajor_TMajorType_ instance.
func (me *XsdGoPkgHasElem_DegreeMajorsequenceEduDegreeTypeschema_DegreeMajor_TMajorType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DegreeMajorsequenceEduDegreeTypeschema_DegreeMajor_TMajorType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DegreeMajor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EventTypesequenceSpeakingEventTypeschema_EventType_TExtendedEventTypeType_ struct {
	EventTypes []TExtendedEventTypeType `xml:"EventType"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EventTypesequenceSpeakingEventTypeschema_EventType_TExtendedEventTypeType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EventTypesequenceSpeakingEventTypeschema_EventType_TExtendedEventTypeType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EventTypesequenceSpeakingEventTypeschema_EventType_TExtendedEventTypeType_ instance.
func (me *XsdGoPkgHasElems_EventTypesequenceSpeakingEventTypeschema_EventType_TExtendedEventTypeType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EventTypesequenceSpeakingEventTypeschema_EventType_TExtendedEventTypeType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_BooksequencePublicationHistoryTypeschema_Book_TBookType_ struct {
	Book *TBookType `xml:"Book"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_BooksequencePublicationHistoryTypeschema_Book_TBookType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BooksequencePublicationHistoryTypeschema_Book_TBookType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_BooksequencePublicationHistoryTypeschema_Book_TBookType_ instance.
func (me *XsdGoPkgHasElem_BooksequencePublicationHistoryTypeschema_Book_TBookType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_BooksequencePublicationHistoryTypeschema_Book_TBookType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Book.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ConferenceLocationsequenceextensioncomplexContentConferencePaperTypeschema_ConferenceLocation_XsdtString_ struct {
	ConferenceLocations []xsdt.String `xml:"ConferenceLocation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ConferenceLocationsequenceextensioncomplexContentConferencePaperTypeschema_ConferenceLocation_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ConferenceLocationsequenceextensioncomplexContentConferencePaperTypeschema_ConferenceLocation_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ConferenceLocationsequenceextensioncomplexContentConferencePaperTypeschema_ConferenceLocation_XsdtString_ instance.
func (me *XsdGoPkgHasElems_ConferenceLocationsequenceextensioncomplexContentConferencePaperTypeschema_ConferenceLocation_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ConferenceLocationsequenceextensioncomplexContentConferencePaperTypeschema_ConferenceLocation_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`
}

//	If the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_IdsequenceDistributionTypeschema_Id_TEntityIdType_ struct {
	Ids []*TEntityIdType `xml:"Id"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IdsequenceDistributionTypeschema_Id_TEntityIdType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IdsequenceDistributionTypeschema_Id_TEntityIdType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IdsequenceDistributionTypeschema_Id_TEntityIdType_ instance.
func (me *XsdGoPkgHasElems_IdsequenceDistributionTypeschema_Id_TEntityIdType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IdsequenceDistributionTypeschema_Id_TEntityIdType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Ids {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_NumericValuechoiceRatingTypeschema_NumericValue_TxsdRatingTypeChoiceNumericValue_ struct {
	NumericValues []*TxsdRatingTypeChoiceNumericValue `xml:"NumericValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NumericValuechoiceRatingTypeschema_NumericValue_TxsdRatingTypeChoiceNumericValue_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NumericValuechoiceRatingTypeschema_NumericValue_TxsdRatingTypeChoiceNumericValue_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NumericValuechoiceRatingTypeschema_NumericValue_TxsdRatingTypeChoiceNumericValue_ instance.
func (me *XsdGoPkgHasElems_NumericValuechoiceRatingTypeschema_NumericValue_TxsdRatingTypeChoiceNumericValue_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NumericValuechoiceRatingTypeschema_NumericValue_TxsdRatingTypeChoiceNumericValue_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.NumericValues {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ChaptersequenceextensioncomplexContentBookTypeschema_Chapter_XsdtString_ struct {
	Chapters []xsdt.String `xml:"Chapter"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ChaptersequenceextensioncomplexContentBookTypeschema_Chapter_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ChaptersequenceextensioncomplexContentBookTypeschema_Chapter_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ChaptersequenceextensioncomplexContentBookTypeschema_Chapter_XsdtString_ instance.
func (me *XsdGoPkgHasElems_ChaptersequenceextensioncomplexContentBookTypeschema_Chapter_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ChaptersequenceextensioncomplexContentBookTypeschema_Chapter_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DeliveryAddresssequencePostalAddressTypeschema_DeliveryAddress_TxsdPostalAddressTypeSequenceDeliveryAddress_ struct {
	DeliveryAddresses []*TxsdPostalAddressTypeSequenceDeliveryAddress `xml:"DeliveryAddress"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DeliveryAddresssequencePostalAddressTypeschema_DeliveryAddress_TxsdPostalAddressTypeSequenceDeliveryAddress_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DeliveryAddresssequencePostalAddressTypeschema_DeliveryAddress_TxsdPostalAddressTypeSequenceDeliveryAddress_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DeliveryAddresssequencePostalAddressTypeschema_DeliveryAddress_TxsdPostalAddressTypeSequenceDeliveryAddress_ instance.
func (me *XsdGoPkgHasElems_DeliveryAddresssequencePostalAddressTypeschema_DeliveryAddress_TxsdPostalAddressTypeSequenceDeliveryAddress_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DeliveryAddresssequencePostalAddressTypeschema_DeliveryAddress_TxsdPostalAddressTypeSequenceDeliveryAddress_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DeliveryAddresses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Deprecated in favor of Degree construct.
type XsdGoPkgHasElem_MinorsequenceSchoolOrInstitutionTypeschema_Minor_XsdtString_ struct {
	//	Deprecated in favor of Degree construct.
	Minor xsdt.String `xml:"Minor"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MinorsequenceSchoolOrInstitutionTypeschema_Minor_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MinorsequenceSchoolOrInstitutionTypeschema_Minor_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_MinorsequenceSchoolOrInstitutionTypeschema_Minor_XsdtString_ instance.
func (me *XsdGoPkgHasElem_MinorsequenceSchoolOrInstitutionTypeschema_Minor_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MinorsequenceSchoolOrInstitutionTypeschema_Minor_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TRelationshipsType xsdt.String

//	Since TRelationshipsType is just a simple String type, this merely returns the current string value.
func (me TRelationshipsType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TRelationshipsType's alias type xsdt.String.
func (me TRelationshipsType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	TRelationshipsType is an XSD union-type of several types. This is a simple type conversion to TRelationshipType, but keep in mind the actual value may or may not be a valid TRelationshipType value.
func (me TRelationshipsType) ToTRelationshipType() TRelationshipType { return TRelationshipType(me) }

//	TRelationshipsType is an XSD union-type of several types. This is a simple type conversion to TxStringPatternExtensionType, but keep in mind the actual value may or may not be a valid TxStringPatternExtensionType value.
func (me TRelationshipsType) ToTxStringPatternExtensionType() TxStringPatternExtensionType {
	return TxStringPatternExtensionType(me)
}

//	Since TRelationshipsType is just a simple String type, this merely sets the current value from the specified string.
func (me *TRelationshipsType) Set(s string) { (*xsdt.String)(me).Set(s) }

type XsdGoPkgHasElems_AttachmentReferencechoicesequenceStaffingSupportingMaterialsTypeschema_AttachmentReference_TxsdStaffingSupportingMaterialsTypeSequenceChoiceAttachmentReference_ struct {
	AttachmentReferences []*TxsdStaffingSupportingMaterialsTypeSequenceChoiceAttachmentReference `xml:"AttachmentReference"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AttachmentReferencechoicesequenceStaffingSupportingMaterialsTypeschema_AttachmentReference_TxsdStaffingSupportingMaterialsTypeSequenceChoiceAttachmentReference_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AttachmentReferencechoicesequenceStaffingSupportingMaterialsTypeschema_AttachmentReference_TxsdStaffingSupportingMaterialsTypeSequenceChoiceAttachmentReference_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AttachmentReferencechoicesequenceStaffingSupportingMaterialsTypeschema_AttachmentReference_TxsdStaffingSupportingMaterialsTypeSequenceChoiceAttachmentReference_ instance.
func (me *XsdGoPkgHasElems_AttachmentReferencechoicesequenceStaffingSupportingMaterialsTypeschema_AttachmentReference_TxsdStaffingSupportingMaterialsTypeSequenceChoiceAttachmentReference_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AttachmentReferencechoicesequenceStaffingSupportingMaterialsTypeschema_AttachmentReference_TxsdStaffingSupportingMaterialsTypeSequenceChoiceAttachmentReference_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AttachmentReferences {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_IndustryDescriptionsequencePositionOrgIndustryTypeschema_IndustryDescription_XsdtString_ struct {
	IndustryDescriptions []xsdt.String `xml:"IndustryDescription"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IndustryDescriptionsequencePositionOrgIndustryTypeschema_IndustryDescription_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IndustryDescriptionsequencePositionOrgIndustryTypeschema_IndustryDescription_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IndustryDescriptionsequencePositionOrgIndustryTypeschema_IndustryDescription_XsdtString_ instance.
func (me *XsdGoPkgHasElems_IndustryDescriptionsequencePositionOrgIndustryTypeschema_IndustryDescription_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IndustryDescriptionsequencePositionOrgIndustryTypeschema_IndustryDescription_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_VolumesequenceextensioncomplexContentArticleTypeschema_Volume_XsdtString_ struct {
	Volumes []xsdt.String `xml:"Volume"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_VolumesequenceextensioncomplexContentArticleTypeschema_Volume_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_VolumesequenceextensioncomplexContentArticleTypeschema_Volume_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_VolumesequenceextensioncomplexContentArticleTypeschema_Volume_XsdtString_ instance.
func (me *XsdGoPkgHasElems_VolumesequenceextensioncomplexContentArticleTypeschema_Volume_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_VolumesequenceextensioncomplexContentArticleTypeschema_Volume_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CountryServedsequenceMilitaryHistoryTypeschema_CountryServed_TCountryCodeType_ struct {
	CountryServeds []TCountryCodeType `xml:"CountryServed"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CountryServedsequenceMilitaryHistoryTypeschema_CountryServed_TCountryCodeType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CountryServedsequenceMilitaryHistoryTypeschema_CountryServed_TCountryCodeType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CountryServedsequenceMilitaryHistoryTypeschema_CountryServed_TCountryCodeType_ instance.
func (me *XsdGoPkgHasElems_CountryServedsequenceMilitaryHistoryTypeschema_CountryServed_TCountryCodeType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CountryServedsequenceMilitaryHistoryTypeschema_CountryServed_TCountryCodeType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ProfessionalAssociationssequenceStructuredXMLResumeTypeschema_ProfessionalAssociations_TProfessionalAssociationType_ struct {
	ProfessionalAssociationses []*TProfessionalAssociationType `xml:"ProfessionalAssociations"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ProfessionalAssociationssequenceStructuredXMLResumeTypeschema_ProfessionalAssociations_TProfessionalAssociationType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ProfessionalAssociationssequenceStructuredXMLResumeTypeschema_ProfessionalAssociations_TProfessionalAssociationType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ProfessionalAssociationssequenceStructuredXMLResumeTypeschema_ProfessionalAssociations_TProfessionalAssociationType_ instance.
func (me *XsdGoPkgHasElems_ProfessionalAssociationssequenceStructuredXMLResumeTypeschema_ProfessionalAssociations_TProfessionalAssociationType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ProfessionalAssociationssequenceStructuredXMLResumeTypeschema_ProfessionalAssociations_TProfessionalAssociationType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ProfessionalAssociationses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AssociationsequenceProfessionalAssociationTypeschema_Association_XsdtString_ struct {
	Association xsdt.String `xml:"Association"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AssociationsequenceProfessionalAssociationTypeschema_Association_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AssociationsequenceProfessionalAssociationTypeschema_Association_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AssociationsequenceProfessionalAssociationTypeschema_Association_XsdtString_ instance.
func (me *XsdGoPkgHasElem_AssociationsequenceProfessionalAssociationTypeschema_Association_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AssociationsequenceProfessionalAssociationTypeschema_Association_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ServiceNumbersequenceMilitaryHistoryTypeschema_ServiceNumber_TEntityIdType_ struct {
	ServiceNumbers []*TEntityIdType `xml:"ServiceNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ServiceNumbersequenceMilitaryHistoryTypeschema_ServiceNumber_TEntityIdType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ServiceNumbersequenceMilitaryHistoryTypeschema_ServiceNumber_TEntityIdType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ServiceNumbersequenceMilitaryHistoryTypeschema_ServiceNumber_TEntityIdType_ instance.
func (me *XsdGoPkgHasElems_ServiceNumbersequenceMilitaryHistoryTypeschema_ServiceNumber_TEntityIdType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ServiceNumbersequenceMilitaryHistoryTypeschema_ServiceNumber_TEntityIdType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ServiceNumbers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CompetencyIdsequenceCompetencyTypeschema_CompetencyId_TxsdCompetencyTypeSequenceCompetencyId_ struct {
	CompetencyIds []*TxsdCompetencyTypeSequenceCompetencyId `xml:"CompetencyId"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CompetencyIdsequenceCompetencyTypeschema_CompetencyId_TxsdCompetencyTypeSequenceCompetencyId_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CompetencyIdsequenceCompetencyTypeschema_CompetencyId_TxsdCompetencyTypeSequenceCompetencyId_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CompetencyIdsequenceCompetencyTypeschema_CompetencyId_TxsdCompetencyTypeSequenceCompetencyId_ instance.
func (me *XsdGoPkgHasElems_CompetencyIdsequenceCompetencyTypeschema_CompetencyId_TxsdCompetencyTypeSequenceCompetencyId_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CompetencyIdsequenceCompetencyTypeschema_CompetencyId_TxsdCompetencyTypeSequenceCompetencyId_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CompetencyIds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The value specifying the maximum of the measurement range
type XsdGoPkgHasElems_HighestPossibleValuesequenceEducationMeasureTypeschema_HighestPossibleValue_TMeasureValueType_ struct {
	//	The value specifying the maximum of the measurement range
	HighestPossibleValues []*TMeasureValueType `xml:"HighestPossibleValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_HighestPossibleValuesequenceEducationMeasureTypeschema_HighestPossibleValue_TMeasureValueType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_HighestPossibleValuesequenceEducationMeasureTypeschema_HighestPossibleValue_TMeasureValueType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_HighestPossibleValuesequenceEducationMeasureTypeschema_HighestPossibleValue_TMeasureValueType_ instance.
func (me *XsdGoPkgHasElems_HighestPossibleValuesequenceEducationMeasureTypeschema_HighestPossibleValue_TMeasureValueType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_HighestPossibleValuesequenceEducationMeasureTypeschema_HighestPossibleValue_TMeasureValueType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.HighestPossibleValues {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DegreeMeasuresequenceEduDegreeTypeschema_DegreeMeasure_TEducationalMeasureType_ struct {
	DegreeMeasures []*TEducationalMeasureType `xml:"DegreeMeasure"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DegreeMeasuresequenceEduDegreeTypeschema_DegreeMeasure_TEducationalMeasureType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DegreeMeasuresequenceEduDegreeTypeschema_DegreeMeasure_TEducationalMeasureType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DegreeMeasuresequenceEduDegreeTypeschema_DegreeMeasure_TEducationalMeasureType_ instance.
func (me *XsdGoPkgHasElems_DegreeMeasuresequenceEduDegreeTypeschema_DegreeMeasure_TEducationalMeasureType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DegreeMeasuresequenceEduDegreeTypeschema_DegreeMeasure_TEducationalMeasureType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DegreeMeasures {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PositionHistorysequenceEmployerOrgDataTypeschema_PositionHistory_TxsdEmployerOrgDataTypeSequencePositionHistory_ struct {
	PositionHistory *TxsdEmployerOrgDataTypeSequencePositionHistory `xml:"PositionHistory"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PositionHistorysequenceEmployerOrgDataTypeschema_PositionHistory_TxsdEmployerOrgDataTypeSequencePositionHistory_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PositionHistorysequenceEmployerOrgDataTypeschema_PositionHistory_TxsdEmployerOrgDataTypeSequencePositionHistory_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PositionHistorysequenceEmployerOrgDataTypeschema_PositionHistory_TxsdEmployerOrgDataTypeSequencePositionHistory_ instance.
func (me *XsdGoPkgHasElem_PositionHistorysequenceEmployerOrgDataTypeschema_PositionHistory_TxsdEmployerOrgDataTypeSequencePositionHistory_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PositionHistorysequenceEmployerOrgDataTypeschema_PositionHistory_TxsdEmployerOrgDataTypeSequencePositionHistory_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PositionHistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_OtherPublicationsequencePublicationHistoryTypeschema_OtherPublication_TOtherPublicationType_ struct {
	OtherPublication *TOtherPublicationType `xml:"OtherPublication"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OtherPublicationsequencePublicationHistoryTypeschema_OtherPublication_TOtherPublicationType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OtherPublicationsequencePublicationHistoryTypeschema_OtherPublication_TOtherPublicationType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_OtherPublicationsequencePublicationHistoryTypeschema_OtherPublication_TOtherPublicationType_ instance.
func (me *XsdGoPkgHasElem_OtherPublicationsequencePublicationHistoryTypeschema_OtherPublication_TOtherPublicationType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OtherPublicationsequencePublicationHistoryTypeschema_OtherPublication_TOtherPublicationType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.OtherPublication.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PublicationLanguagesequenceextensioncomplexContentArticleTypeschema_PublicationLanguage_TLanguageCodeType_ struct {
	PublicationLanguages []TLanguageCodeType `xml:"PublicationLanguage"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PublicationLanguagesequenceextensioncomplexContentArticleTypeschema_PublicationLanguage_TLanguageCodeType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PublicationLanguagesequenceextensioncomplexContentArticleTypeschema_PublicationLanguage_TLanguageCodeType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PublicationLanguagesequenceextensioncomplexContentArticleTypeschema_PublicationLanguage_TLanguageCodeType_ instance.
func (me *XsdGoPkgHasElems_PublicationLanguagesequenceextensioncomplexContentArticleTypeschema_PublicationLanguage_TLanguageCodeType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PublicationLanguagesequenceextensioncomplexContentArticleTypeschema_PublicationLanguage_TLanguageCodeType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LocationsequenceSpeakingEventTypeschema_Location_XsdtString_ struct {
	Locations []xsdt.String `xml:"Location"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LocationsequenceSpeakingEventTypeschema_Location_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LocationsequenceSpeakingEventTypeschema_Location_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LocationsequenceSpeakingEventTypeschema_Location_XsdtString_ instance.
func (me *XsdGoPkgHasElems_LocationsequenceSpeakingEventTypeschema_Location_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LocationsequenceSpeakingEventTypeschema_Location_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Usage is primarily for the results of a screening, but is not limited to that purpose.
type XsdGoPkgHasElem_QuestionAnswerPairsequenceVerificationTypeschema_QuestionAnswerPair_TEmploymentQuestionAnswerPairType_ struct {
	//	Usage is primarily for the results of a screening, but is not limited to that purpose.
	QuestionAnswerPair *TEmploymentQuestionAnswerPairType `xml:"QuestionAnswerPair"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_QuestionAnswerPairsequenceVerificationTypeschema_QuestionAnswerPair_TEmploymentQuestionAnswerPairType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_QuestionAnswerPairsequenceVerificationTypeschema_QuestionAnswerPair_TEmploymentQuestionAnswerPairType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_QuestionAnswerPairsequenceVerificationTypeschema_QuestionAnswerPair_TEmploymentQuestionAnswerPairType_ instance.
func (me *XsdGoPkgHasElem_QuestionAnswerPairsequenceVerificationTypeschema_QuestionAnswerPair_TEmploymentQuestionAnswerPairType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_QuestionAnswerPairsequenceVerificationTypeschema_QuestionAnswerPair_TEmploymentQuestionAnswerPairType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.QuestionAnswerPair.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EvidenceIdsequenceCompetencyEvidencesequenceCompetencyTypeschema_EvidenceId_TxsdCompetencyTypeSequenceCompetencyEvidenceSequenceEvidenceId_ struct {
	EvidenceIds []*TxsdCompetencyTypeSequenceCompetencyId `xml:"EvidenceId"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EvidenceIdsequenceCompetencyEvidencesequenceCompetencyTypeschema_EvidenceId_TxsdCompetencyTypeSequenceCompetencyEvidenceSequenceEvidenceId_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EvidenceIdsequenceCompetencyEvidencesequenceCompetencyTypeschema_EvidenceId_TxsdCompetencyTypeSequenceCompetencyEvidenceSequenceEvidenceId_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EvidenceIdsequenceCompetencyEvidencesequenceCompetencyTypeschema_EvidenceId_TxsdCompetencyTypeSequenceCompetencyEvidenceSequenceEvidenceId_ instance.
func (me *XsdGoPkgHasElems_EvidenceIdsequenceCompetencyEvidencesequenceCompetencyTypeschema_EvidenceId_TxsdCompetencyTypeSequenceCompetencyEvidenceSequenceEvidenceId_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EvidenceIdsequenceCompetencyEvidencesequenceCompetencyTypeschema_EvidenceId_TxsdCompetencyTypeSequenceCompetencyEvidenceSequenceEvidenceId_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EvidenceIds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	If applicable, these fields should be used to reflect the official names of any and all minor courses of study associated with the student's degree title.
type XsdGoPkgHasElem_DegreeMinorsequenceEduDegreeTypeschema_DegreeMinor_TMinorType_ struct {
	//	If applicable, these fields should be used to reflect the official names of any and all minor courses of study associated with the student's degree title.
	DegreeMinor *TMinorType `xml:"DegreeMinor"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DegreeMinorsequenceEduDegreeTypeschema_DegreeMinor_TMinorType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DegreeMinorsequenceEduDegreeTypeschema_DegreeMinor_TMinorType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DegreeMinorsequenceEduDegreeTypeschema_DegreeMinor_TMinorType_ instance.
func (me *XsdGoPkgHasElem_DegreeMinorsequenceEduDegreeTypeschema_DegreeMinor_TMinorType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DegreeMinorsequenceEduDegreeTypeschema_DegreeMinor_TMinorType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DegreeMinor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_YearMonthchoiceFlexibleDatesTypeschema_YearMonth_XsdtGYearMonth_ struct {
	YearMonths []xsdt.GYearMonth `xml:"YearMonth"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_YearMonthchoiceFlexibleDatesTypeschema_YearMonth_XsdtGYearMonth_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_YearMonthchoiceFlexibleDatesTypeschema_YearMonth_XsdtGYearMonth_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_YearMonthchoiceFlexibleDatesTypeschema_YearMonth_XsdtGYearMonth_ instance.
func (me *XsdGoPkgHasElems_YearMonthchoiceFlexibleDatesTypeschema_YearMonth_XsdtGYearMonth_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_YearMonthchoiceFlexibleDatesTypeschema_YearMonth_XsdtGYearMonth_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_OrgInfosequencePositionHistoryTypeschema_OrgInfo_TPositionOrgInfoType_ struct {
	OrgInfo *TPositionOrgInfoType `xml:"OrgInfo"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OrgInfosequencePositionHistoryTypeschema_OrgInfo_TPositionOrgInfoType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OrgInfosequencePositionHistoryTypeschema_OrgInfo_TPositionOrgInfoType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_OrgInfosequencePositionHistoryTypeschema_OrgInfo_TPositionOrgInfoType_ instance.
func (me *XsdGoPkgHasElem_OrgInfosequencePositionHistoryTypeschema_OrgInfo_TPositionOrgInfoType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OrgInfosequencePositionHistoryTypeschema_OrgInfo_TPositionOrgInfoType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.OrgInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EligibleForRehiresequenceVerificationTypeschema_EligibleForRehire_XsdtBoolean_ struct {
	EligibleForRehires []xsdt.Boolean `xml:"EligibleForRehire"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EligibleForRehiresequenceVerificationTypeschema_EligibleForRehire_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EligibleForRehiresequenceVerificationTypeschema_EligibleForRehire_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EligibleForRehiresequenceVerificationTypeschema_EligibleForRehire_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElems_EligibleForRehiresequenceVerificationTypeschema_EligibleForRehire_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EligibleForRehiresequenceVerificationTypeschema_EligibleForRehire_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_OverallPerformanceRatingsequenceVerificationTypeschema_OverallPerformanceRating_TRatingType_ struct {
	OverallPerformanceRatings []*TRatingType `xml:"OverallPerformanceRating"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OverallPerformanceRatingsequenceVerificationTypeschema_OverallPerformanceRating_TRatingType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OverallPerformanceRatingsequenceVerificationTypeschema_OverallPerformanceRating_TRatingType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OverallPerformanceRatingsequenceVerificationTypeschema_OverallPerformanceRating_TRatingType_ instance.
func (me *XsdGoPkgHasElems_OverallPerformanceRatingsequenceVerificationTypeschema_OverallPerformanceRating_TRatingType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OverallPerformanceRatingsequenceVerificationTypeschema_OverallPerformanceRating_TRatingType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.OverallPerformanceRatings {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TimeType xsdt.Time

//	Since TimeType is just a simple String type, this merely returns the current string value.
func (me TimeType) String() string { return xsdt.Time(me).String() }

//	This convenience method just performs a simple type conversion to TimeType's alias type xsdt.Time.
func (me TimeType) ToXsdtTime() xsdt.Time { return xsdt.Time(me) }

//	Since TimeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TimeType) Set(s string) { (*xsdt.Time)(me).Set(s) }

//	A patent has one or more applicants. An applicant is the person or corporate body that applies for the patent and intends to 'work' the invention (to manufacture or license the technology).  Under US law the applicants must be the inventor(s) except in exceptional circumstances.  On a resume or CV listing patents held or submitted, an individual might use the "Applicants" component when the patent is held or was filed with others ("co-applicants").
type XsdGoPkgHasElems_InventorssequencePatentDescriptionTypeschema_Inventors_TxsdPatentDescriptionTypeSequenceInventors_ struct {
	//	A patent has one or more applicants. An applicant is the person or corporate body that applies for the patent and intends to 'work' the invention (to manufacture or license the technology).  Under US law the applicants must be the inventor(s) except in exceptional circumstances.  On a resume or CV listing patents held or submitted, an individual might use the "Applicants" component when the patent is held or was filed with others ("co-applicants").
	Inventorses []*TxsdPatentDescriptionTypeSequenceInventors `xml:"Inventors"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InventorssequencePatentDescriptionTypeschema_Inventors_TxsdPatentDescriptionTypeSequenceInventors_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InventorssequencePatentDescriptionTypeschema_Inventors_TxsdPatentDescriptionTypeSequenceInventors_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InventorssequencePatentDescriptionTypeschema_Inventors_TxsdPatentDescriptionTypeSequenceInventors_ instance.
func (me *XsdGoPkgHasElems_InventorssequencePatentDescriptionTypeschema_Inventors_TxsdPatentDescriptionTypeSequenceInventors_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InventorssequencePatentDescriptionTypeschema_Inventors_TxsdPatentDescriptionTypeSequenceInventors_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Inventorses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	School, College or institution attended.  Associated type attribute further qualifies the name as current, prior,  degree or joint.
type XsdGoPkgHasElem_SchoolsequenceSchoolOrInstitutionTypeschema_School_TSchoolDataType_ struct {
	//	School, College or institution attended.  Associated type attribute further qualifies the name as current, prior,  degree or joint.
	School *TSchoolDataType `xml:"School"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SchoolsequenceSchoolOrInstitutionTypeschema_School_TSchoolDataType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SchoolsequenceSchoolOrInstitutionTypeschema_School_TSchoolDataType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SchoolsequenceSchoolOrInstitutionTypeschema_School_TSchoolDataType_ instance.
func (me *XsdGoPkgHasElem_SchoolsequenceSchoolOrInstitutionTypeschema_School_TSchoolDataType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SchoolsequenceSchoolOrInstitutionTypeschema_School_TSchoolDataType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.School.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DoNotDistributeTosequenceDistributionGuidelinesTypeschema_DoNotDistributeTo_TDistributionType_ struct {
	DoNotDistributeTo *TDistributionType `xml:"DoNotDistributeTo"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DoNotDistributeTosequenceDistributionGuidelinesTypeschema_DoNotDistributeTo_TDistributionType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DoNotDistributeTosequenceDistributionGuidelinesTypeschema_DoNotDistributeTo_TDistributionType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DoNotDistributeTosequenceDistributionGuidelinesTypeschema_DoNotDistributeTo_TDistributionType_ instance.
func (me *XsdGoPkgHasElem_DoNotDistributeTosequenceDistributionGuidelinesTypeschema_DoNotDistributeTo_TDistributionType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DoNotDistributeTosequenceDistributionGuidelinesTypeschema_DoNotDistributeTo_TDistributionType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DoNotDistributeTo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_IndustryCodesequencePositionOrgIndustryTypeschema_IndustryCode_TxsdPositionOrgIndustryTypeSequenceIndustryCode_ struct {
	IndustryCodes []*TxsdPositionOrgIndustryTypeSequenceIndustryCode `xml:"IndustryCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IndustryCodesequencePositionOrgIndustryTypeschema_IndustryCode_TxsdPositionOrgIndustryTypeSequenceIndustryCode_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IndustryCodesequencePositionOrgIndustryTypeschema_IndustryCode_TxsdPositionOrgIndustryTypeSequenceIndustryCode_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IndustryCodesequencePositionOrgIndustryTypeschema_IndustryCode_TxsdPositionOrgIndustryTypeSequenceIndustryCode_ instance.
func (me *XsdGoPkgHasElems_IndustryCodesequencePositionOrgIndustryTypeschema_IndustryCode_TxsdPositionOrgIndustryTypeSequenceIndustryCode_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IndustryCodesequencePositionOrgIndustryTypeschema_IndustryCode_TxsdPositionOrgIndustryTypeSequenceIndustryCode_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.IndustryCodes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DegreesequenceSchoolOrInstitutionTypeschema_Degree_TEduDegreeType_ struct {
	Degree *TEduDegreeType `xml:"Degree"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DegreesequenceSchoolOrInstitutionTypeschema_Degree_TEduDegreeType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DegreesequenceSchoolOrInstitutionTypeschema_Degree_TEduDegreeType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DegreesequenceSchoolOrInstitutionTypeschema_Degree_TEduDegreeType_ instance.
func (me *XsdGoPkgHasElem_DegreesequenceSchoolOrInstitutionTypeschema_Degree_TEduDegreeType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DegreesequenceSchoolOrInstitutionTypeschema_Degree_TEduDegreeType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Degree.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_StartRanksequenceRankAchievedTypeschema_StartRank_XsdtString_ struct {
	StartRanks []xsdt.String `xml:"StartRank"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_StartRanksequenceRankAchievedTypeschema_StartRank_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_StartRanksequenceRankAchievedTypeschema_StartRank_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_StartRanksequenceRankAchievedTypeschema_StartRank_XsdtString_ instance.
func (me *XsdGoPkgHasElems_StartRanksequenceRankAchievedTypeschema_StartRank_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_StartRanksequenceRankAchievedTypeschema_StartRank_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EditionsequenceextensioncomplexContentBookTypeschema_Edition_XsdtString_ struct {
	Editions []xsdt.String `xml:"Edition"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EditionsequenceextensioncomplexContentBookTypeschema_Edition_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EditionsequenceextensioncomplexContentBookTypeschema_Edition_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EditionsequenceextensioncomplexContentBookTypeschema_Edition_XsdtString_ instance.
func (me *XsdGoPkgHasElems_EditionsequenceextensioncomplexContentBookTypeschema_Edition_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EditionsequenceextensioncomplexContentBookTypeschema_Edition_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	//	Set this to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	//	If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	//	Contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	//	Your custom error-handling function, if required.
	WalkOnError func(error)
	//	Provides 635 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

//	Provides 635 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	TxsdAssociationTypeSequenceRole                                                                                                                                                                                                                   func(*TxsdAssociationTypeSequenceRole, bool) error
	XsdGoPkgHasElems_CurrencyCode                                                                                                                                                                                                                     func(*XsdGoPkgHasElems_CurrencyCode, bool) error
	XsdGoPkgHasElem_LowestPossibleValuesequenceEducationMeasureTypeschema_LowestPossibleValue_TMeasureValueType_                                                                                                                                      func(*XsdGoPkgHasElem_LowestPossibleValuesequenceEducationMeasureTypeschema_LowestPossibleValue_TMeasureValueType_, bool) error
	XsdGoPkgHasElem_PersonNamesequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_PersonName_TPersonNameType_                                                                                                      func(*XsdGoPkgHasElem_PersonNamesequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_PersonName_TPersonNameType_, bool) error
	TMilitaryHistoryType                                                                                                                                                                                                                              func(*TMilitaryHistoryType, bool) error
	XsdGoPkgHasElems_PublicationHistory                                                                                                                                                                                                               func(*XsdGoPkgHasElems_PublicationHistory, bool) error
	XsdGoPkgHasElems_Use                                                                                                                                                                                                                              func(*XsdGoPkgHasElems_Use, bool) error
	XsdGoPkgHasElems_StartRanksequenceRankAchievedTypeschema_StartRank_XsdtString_                                                                                                                                                                    func(*XsdGoPkgHasElems_StartRanksequenceRankAchievedTypeschema_StartRank_XsdtString_, bool) error
	XsdGoPkgHasElems_CompetencyWeightsequenceCompetencyTypeschema_CompetencyWeight_TxsdCompetencyTypeSequenceCompetencyWeight_                                                                                                                        func(*XsdGoPkgHasElems_CompetencyWeightsequenceCompetencyTypeschema_CompetencyWeight_TxsdCompetencyTypeSequenceCompetencyWeight_, bool) error
	XsdGoPkgHasElems_SpeakingEventsHistory                                                                                                                                                                                                            func(*XsdGoPkgHasElems_SpeakingEventsHistory, bool) error
	XsdGoPkgHasElems_NumericValuechoiceRatingTypeschema_NumericValue_TxsdRatingTypeChoiceNumericValue_                                                                                                                                                func(*XsdGoPkgHasElems_NumericValuechoiceRatingTypeschema_NumericValue_TxsdRatingTypeChoiceNumericValue_, bool) error
	XsdGoPkgHasElems_EvidenceIdsequenceCompetencyEvidencesequenceCompetencyTypeschema_EvidenceId_TxsdCompetencyTypeSequenceCompetencyEvidenceSequenceEvidenceId_                                                                                      func(*XsdGoPkgHasElems_EvidenceIdsequenceCompetencyEvidencesequenceCompetencyTypeschema_EvidenceId_TxsdCompetencyTypeSequenceCompetencyEvidenceSequenceEvidenceId_, bool) error
	TEmpContactInfoType                                                                                                                                                                                                                               func(*TEmpContactInfoType, bool) error
	XsdGoPkgHasElem_IssuingAuthoritysequenceCredentialTypeschema_IssuingAuthority_TIssuingAuthorityType_                                                                                                                                              func(*XsdGoPkgHasElem_IssuingAuthoritysequenceCredentialTypeschema_IssuingAuthority_TIssuingAuthorityType_, bool) error
	XsdGoPkgHasElems_PatentsequencePatentHistoryTypeschema_Patent_TPatentDescriptionType_                                                                                                                                                             func(*XsdGoPkgHasElems_PatentsequencePatentHistoryTypeschema_Patent_TPatentDescriptionType_, bool) error
	XsdGoPkgHasElem_ISBNsequenceextensioncomplexContentBookTypeschema_Isbn_TisbnType_                                                                                                                                                                 func(*XsdGoPkgHasElem_ISBNsequenceextensioncomplexContentBookTypeschema_Isbn_TisbnType_, bool) error
	XsdGoPkgHasElem_EventNamesequenceextensioncomplexContentConferencePaperTypeschema_EventName_XsdtString_                                                                                                                                           func(*XsdGoPkgHasElem_EventNamesequenceextensioncomplexContentConferencePaperTypeschema_EventName_XsdtString_, bool) error
	XsdGoPkgHasElems_SecurityCredential                                                                                                                                                                                                               func(*XsdGoPkgHasElems_SecurityCredential, bool) error
	XsdGoPkgHasElems_QualificationssequenceStructuredXMLResumeTypeschema_Qualifications_TxsdStructuredXMLResumeTypeSequenceQualifications_                                                                                                            func(*XsdGoPkgHasElems_QualificationssequenceStructuredXMLResumeTypeschema_Qualifications_TxsdStructuredXMLResumeTypeSequenceQualifications_, bool) error
	XsdGoPkgHasElems_LanguagessequenceStructuredXMLResumeTypeschema_Languages_TxsdStructuredXMLResumeTypeSequenceLanguages_                                                                                                                           func(*XsdGoPkgHasElems_LanguagessequenceStructuredXMLResumeTypeschema_Languages_TxsdStructuredXMLResumeTypeSequenceLanguages_, bool) error
	XsdGoPkgHasElems_ResumeIdsequenceTxsdResumeResumeschema_ResumeId_TEntityIdType_                                                                                                                                                                   func(*XsdGoPkgHasElems_ResumeIdsequenceTxsdResumeResumeschema_ResumeId_TEntityIdType_, bool) error
	XsdGoPkgHasElems_CopyrightsequenceBasicBibliographicRecordTypeschema_Copyright_TCopyrightType_                                                                                                                                                    func(*XsdGoPkgHasElems_CopyrightsequenceBasicBibliographicRecordTypeschema_Copyright_TCopyrightType_, bool) error
	XsdGoPkgHasCdata                                                                                                                                                                                                                                  func(*XsdGoPkgHasCdata, bool) error
	XsdGoPkgHasElem_IssuingAuthoritysequenceAchievementTypeschema_IssuingAuthority_XsdtString_                                                                                                                                                        func(*XsdGoPkgHasElem_IssuingAuthoritysequenceAchievementTypeschema_IssuingAuthority_XsdtString_, bool) error
	XsdGoPkgHasElems_SpeakingEvent                                                                                                                                                                                                                    func(*XsdGoPkgHasElems_SpeakingEvent, bool) error
	XsdGoPkgHasElem_CompetencyIdsequenceCompetencyTypeschema_CompetencyId_TxsdCompetencyTypeSequenceCompetencyId_                                                                                                                                     func(*XsdGoPkgHasElem_CompetencyIdsequenceCompetencyTypeschema_CompetencyId_TxsdCompetencyTypeSequenceCompetencyId_, bool) error
	XsdGoPkgHasElems_InternationalCountryCode                                                                                                                                                                                                         func(*XsdGoPkgHasElems_InternationalCountryCode, bool) error
	XsdGoPkgHasElem_AdditionalTextsequenceRecipientsequencePostalAddressTypeschema_AdditionalText_XsdtString_                                                                                                                                         func(*XsdGoPkgHasElem_AdditionalTextsequenceRecipientsequencePostalAddressTypeschema_AdditionalText_XsdtString_, bool) error
	XsdGoPkgHasElems_SchoolsequenceSchoolOrInstitutionTypeschema_School_TSchoolDataType_                                                                                                                                                              func(*XsdGoPkgHasElems_SchoolsequenceSchoolOrInstitutionTypeschema_School_TSchoolDataType_, bool) error
	XsdGoPkgHasElem_VerifyEmploymentsequenceVerificationTypeschema_VerifyEmployment_XsdtBoolean_                                                                                                                                                      func(*XsdGoPkgHasElem_VerifyEmploymentsequenceVerificationTypeschema_VerifyEmployment_XsdtBoolean_, bool) error
	XsdGoPkgHasElem_EffectiveDatesequenceCredentialTypeschema_EffectiveDate_TxsdCredentialTypeSequenceEffectiveDate_                                                                                                                                  func(*XsdGoPkgHasElem_EffectiveDatesequenceCredentialTypeschema_EffectiveDate_TxsdCredentialTypeSequenceEffectiveDate_, bool) error
	XsdGoPkgHasElems_References                                                                                                                                                                                                                       func(*XsdGoPkgHasElems_References, bool) error
	XsdGoPkgHasElem_RegionsequencePostalAddressTypeschema_Region_XsdtString_                                                                                                                                                                          func(*XsdGoPkgHasElem_RegionsequencePostalAddressTypeschema_Region_XsdtString_, bool) error
	XsdGoPkgHasElem_ServiceDetailsequenceMilitaryHistoryTypeschema_ServiceDetail_TxsdMilitaryHistoryTypeSequenceServiceDetail_                                                                                                                        func(*XsdGoPkgHasElem_ServiceDetailsequenceMilitaryHistoryTypeschema_ServiceDetail_TxsdMilitaryHistoryTypeSequenceServiceDetail_, bool) error
	XsdGoPkgHasElem_DegreeMajorsequenceEduDegreeTypeschema_DegreeMajor_TMajorType_                                                                                                                                                                    func(*XsdGoPkgHasElem_DegreeMajorsequenceEduDegreeTypeschema_DegreeMajor_TMajorType_, bool) error
	XsdGoPkgHasElem_AreaCityCode                                                                                                                                                                                                                      func(*XsdGoPkgHasElem_AreaCityCode, bool) error
	XsdGoPkgHasElems_SchoolOrInstitutionsequenceEducationHistoryTypeschema_SchoolOrInstitution_TSchoolOrInstitutionType_                                                                                                                              func(*XsdGoPkgHasElems_SchoolOrInstitutionsequenceEducationHistoryTypeschema_SchoolOrInstitution_TSchoolOrInstitutionType_, bool) error
	XsdGoPkgHasElems_InventorssequencePatentDescriptionTypeschema_Inventors_TxsdPatentDescriptionTypeSequenceInventors_                                                                                                                               func(*XsdGoPkgHasElems_InventorssequencePatentDescriptionTypeschema_Inventors_TxsdPatentDescriptionTypeSequenceInventors_, bool) error
	XsdGoPkgHasElem_DunsNumber                                                                                                                                                                                                                        func(*XsdGoPkgHasElem_DunsNumber, bool) error
	XsdGoPkgHasElem_EvidenceIdsequenceTxsdCompetencyTypeSequenceCompetencyEvidenceCompetencyEvidencesequenceCompetencyTypeschema_EvidenceId_TxsdCompetencyTypeSequenceCompetencyEvidenceSequenceEvidenceId_                                           func(*XsdGoPkgHasElem_EvidenceIdsequenceTxsdCompetencyTypeSequenceCompetencyEvidenceCompetencyEvidencesequenceCompetencyTypeschema_EvidenceId_TxsdCompetencyTypeSequenceCompetencyEvidenceSequenceEvidenceId_, bool) error
	XsdGoPkgHasElem_CountryServedsequenceMilitaryHistoryTypeschema_CountryServed_TCountryCodeType_                                                                                                                                                    func(*XsdGoPkgHasElem_CountryServedsequenceMilitaryHistoryTypeschema_CountryServed_TCountryCodeType_, bool) error
	XsdGoPkgHasElems_NumericValue                                                                                                                                                                                                                     func(*XsdGoPkgHasElems_NumericValue, bool) error
	XsdGoPkgHasElem_JobLevelInfosequencePositionHistoryTypeschema_JobLevelInfo_TJobLevelInfoType_                                                                                                                                                     func(*XsdGoPkgHasElem_JobLevelInfosequencePositionHistoryTypeschema_JobLevelInfo_TJobLevelInfoType_, bool) error
	XsdGoPkgHasElems_QuestionsequenceEmploymentQuestionAnswerPairTypeschema_Question_XsdtString_                                                                                                                                                      func(*XsdGoPkgHasElems_QuestionsequenceEmploymentQuestionAnswerPairTypeschema_Question_XsdtString_, bool) error
	XsdGoPkgHasElems_IdValuesequenceEntityIdTypeschema_IdValue_TxsdEntityIdTypeSequenceIdValue_                                                                                                                                                       func(*XsdGoPkgHasElems_IdValuesequenceEntityIdTypeschema_IdValue_TxsdEntityIdTypeSequenceIdValue_, bool) error
	XsdGoPkgHasElem_LegalNamesequencePersonNameTypeschema_LegalName_XsdtString_                                                                                                                                                                       func(*XsdGoPkgHasElem_LegalNamesequencePersonNameTypeschema_LegalName_XsdtString_, bool) error
	TxsdEmployerOrgDataTypeSequencePositionHistory                                                                                                                                                                                                    func(*TxsdEmployerOrgDataTypeSequencePositionHistory, bool) error
	TPatentDescriptionType                                                                                                                                                                                                                            func(*TPatentDescriptionType, bool) error
	XsdGoPkgHasElem_PublicationLanguagesequenceextensioncomplexContentArticleTypeschema_PublicationLanguage_TLanguageCodeType_                                                                                                                        func(*XsdGoPkgHasElem_PublicationLanguagesequenceextensioncomplexContentArticleTypeschema_PublicationLanguage_TLanguageCodeType_, bool) error
	XsdGoPkgHasElem_ResumeAdditionalItem                                                                                                                                                                                                              func(*XsdGoPkgHasElem_ResumeAdditionalItem, bool) error
	XsdGoPkgHasElems_CategoryDescriptionsequenceOccupationalCategoryTypeschema_CategoryDescription_XsdtString_                                                                                                                                        func(*XsdGoPkgHasElems_CategoryDescriptionsequenceOccupationalCategoryTypeschema_CategoryDescription_XsdtString_, bool) error
	XsdGoPkgHasElems_PositionTitlesequenceReferenceTypeschema_PositionTitle_XsdtString_                                                                                                                                                               func(*XsdGoPkgHasElems_PositionTitlesequenceReferenceTypeschema_PositionTitle_XsdtString_, bool) error
	XsdGoPkgHasElems_Achievements                                                                                                                                                                                                                     func(*XsdGoPkgHasElems_Achievements, bool) error
	XsdGoPkgHasElems_AffixsequencePersonNameTypeschema_Affix_TxsdPersonNameTypeSequenceAffix_                                                                                                                                                         func(*XsdGoPkgHasElems_AffixsequencePersonNameTypeschema_Affix_TxsdPersonNameTypeSequenceAffix_, bool) error
	XsdGoPkgHasElem_LicensesAndCertifications                                                                                                                                                                                                         func(*XsdGoPkgHasElem_LicensesAndCertifications, bool) error
	XsdGoPkgHasElem_PublicationDatesequenceBasicBibliographicRecordTypeschema_PublicationDate_TFlexibleDatesType_                                                                                                                                     func(*XsdGoPkgHasElem_PublicationDatesequenceBasicBibliographicRecordTypeschema_PublicationDate_TFlexibleDatesType_, bool) error
	XsdGoPkgHasElems_LinksequenceBasicBibliographicRecordTypeschema_Link_TInternetWebAddressType_                                                                                                                                                     func(*XsdGoPkgHasElems_LinksequenceBasicBibliographicRecordTypeschema_Link_TInternetWebAddressType_, bool) error
	TxsdSecurityCredentials                                                                                                                                                                                                                           func(*TxsdSecurityCredentials, bool) error
	TxsdResume                                                                                                                                                                                                                                        func(*TxsdResume, bool) error
	TSourceTypeType                                                                                                                                                                                                                                   func(*TSourceTypeType, bool) error
	XsdGoPkgHasElem_MeasuresequenceSchoolOrInstitutionTypeschema_Measure_TEduMeasureType_                                                                                                                                                             func(*XsdGoPkgHasElem_MeasuresequenceSchoolOrInstitutionTypeschema_Measure_TEduMeasureType_, bool) error
	XsdGoPkgHasElem_StringValuechoiceRatingTypeschema_StringValue_TxsdRatingTypeChoiceStringValue_                                                                                                                                                    func(*XsdGoPkgHasElem_StringValuechoiceRatingTypeschema_StringValue_TxsdRatingTypeChoiceStringValue_, bool) error
	XsdGoPkgHasElems_PatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_PatentMilestone_TxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestone_                        func(*XsdGoPkgHasElems_PatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_PatentMilestone_TxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestone_, bool) error
	XsdGoPkgHasElems_PatentTitlesequencePatentDescriptionTypeschema_PatentTitle_XsdtString_                                                                                                                                                           func(*XsdGoPkgHasElems_PatentTitlesequencePatentDescriptionTypeschema_PatentTitle_XsdtString_, bool) error
	XsdGoPkgHasElem_InventorNamesequenceTxsdPatentDescriptionTypeSequenceInventorsInventorssequencePatentDescriptionTypeschema_InventorName_XsdtString_                                                                                               func(*XsdGoPkgHasElem_InventorNamesequenceTxsdPatentDescriptionTypeSequenceInventorsInventorssequencePatentDescriptionTypeschema_InventorName_XsdtString_, bool) error
	TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyName                                                                                                                                                                                       func(*TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyName, bool) error
	TxsdLanguage                                                                                                                                                                                                                                      func(*TxsdLanguage, bool) error
	XsdGoPkgHasElems_Location                                                                                                                                                                                                                         func(*XsdGoPkgHasElems_Location, bool) error
	XsdGoPkgHasElem_UnitOrDivisionsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_UnitOrDivision_XsdtString_                                                                                       func(*XsdGoPkgHasElem_UnitOrDivisionsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_UnitOrDivision_XsdtString_, bool) error
	XsdGoPkgHasElem_PatentTitlesequencePatentDescriptionTypeschema_PatentTitle_XsdtString_                                                                                                                                                            func(*XsdGoPkgHasElem_PatentTitlesequencePatentDescriptionTypeschema_PatentTitle_XsdtString_, bool) error
	TStructuredXMLResumeType                                                                                                                                                                                                                          func(*TStructuredXMLResumeType, bool) error
	XsdGoPkgHasElems_ContactMethodsequenceEmpContactInfoTypeschema_ContactMethod_TContactMethodType_                                                                                                                                                  func(*XsdGoPkgHasElems_ContactMethodsequenceEmpContactInfoTypeschema_ContactMethod_TContactMethodType_, bool) error
	XsdGoPkgHasElem_QualificationSummarysequenceTxsdStructuredXMLResumeTypeSequenceQualificationsQualificationssequenceStructuredXMLResumeTypeschema_QualificationSummary_XsdtString_                                                                 func(*XsdGoPkgHasElem_QualificationSummarysequenceTxsdStructuredXMLResumeTypeSequenceQualificationsQualificationssequenceStructuredXMLResumeTypeschema_QualificationSummary_XsdtString_, bool) error
	XsdGoPkgHasElem_EndDatesequenceAssociationTypeschema_EndDate_TFlexibleDatesType_                                                                                                                                                                  func(*XsdGoPkgHasElem_EndDatesequenceAssociationTypeschema_EndDate_TFlexibleDatesType_, bool) error
	XsdGoPkgHasElem_UserArea                                                                                                                                                                                                                          func(*XsdGoPkgHasElem_UserArea, bool) error
	XsdGoPkgHasElem_AttendanceRatingsequenceVerificationTypeschema_AttendanceRating_TRatingType_                                                                                                                                                      func(*XsdGoPkgHasElem_AttendanceRatingsequenceVerificationTypeschema_AttendanceRating_TRatingType_, bool) error
	XsdGoPkgHasElems_PositionHistorysequenceEmployerOrgDataTypeschema_PositionHistory_TxsdEmployerOrgDataTypeSequencePositionHistory_                                                                                                                 func(*XsdGoPkgHasElems_PositionHistorysequenceEmployerOrgDataTypeschema_PositionHistory_TxsdEmployerOrgDataTypeSequencePositionHistory_, bool) error
	XsdGoPkgHasElems_JobStepsequenceJobLevelInfoTypeschema_JobStep_XsdtString_                                                                                                                                                                        func(*XsdGoPkgHasElems_JobStepsequenceJobLevelInfoTypeschema_JobStep_XsdtString_, bool) error
	XsdGoPkgHasElems_ServiceStatussequenceMilitaryHistoryTypeschema_ServiceStatus_XsdtString_                                                                                                                                                         func(*XsdGoPkgHasElems_ServiceStatussequenceMilitaryHistoryTypeschema_ServiceStatus_XsdtString_, bool) error
	XsdGoPkgHasElems_DescriptionsequenceAdditionalItemTypeschema_Description_XsdtString_                                                                                                                                                              func(*XsdGoPkgHasElems_DescriptionsequenceAdditionalItemTypeschema_Description_XsdtString_, bool) error
	XsdGoPkgHasElems_ReasonForLeavingsequenceVerificationTypeschema_ReasonForLeaving_XsdtString_                                                                                                                                                      func(*XsdGoPkgHasElems_ReasonForLeavingsequenceVerificationTypeschema_ReasonForLeaving_XsdtString_, bool) error
	XsdGoPkgHasElem_MinorsequenceSchoolOrInstitutionTypeschema_Minor_XsdtString_                                                                                                                                                                      func(*XsdGoPkgHasElem_MinorsequenceSchoolOrInstitutionTypeschema_Minor_XsdtString_, bool) error
	TReferenceType                                                                                                                                                                                                                                    func(*TReferenceType, bool) error
	TxsdAdditionalItemTypeSequenceEffectiveDate                                                                                                                                                                                                       func(*TxsdAdditionalItemTypeSequenceEffectiveDate, bool) error
	XsdGoPkgHasElem_ConferencePapersequencePublicationHistoryTypeschema_ConferencePaper_TConferencePaperType_                                                                                                                                         func(*XsdGoPkgHasElem_ConferencePapersequencePublicationHistoryTypeschema_ConferencePaper_TConferencePaperType_, bool) error
	TxsdEntityIdTypeSequenceIdValue                                                                                                                                                                                                                   func(*TxsdEntityIdTypeSequenceIdValue, bool) error
	TxsdEduDegreeTypeSequenceDegreeName                                                                                                                                                                                                               func(*TxsdEduDegreeTypeSequenceDegreeName, bool) error
	TxsdPersonNameTypeSequenceFamilyName                                                                                                                                                                                                              func(*TxsdPersonNameTypeSequenceFamilyName, bool) error
	XsdGoPkgHasElems_DoNotDistributeTosequenceDistributionGuidelinesTypeschema_DoNotDistributeTo_TDistributionType_                                                                                                                                   func(*XsdGoPkgHasElems_DoNotDistributeTosequenceDistributionGuidelinesTypeschema_DoNotDistributeTo_TDistributionType_, bool) error
	XsdGoPkgHasElems_SubscriberNumber                                                                                                                                                                                                                 func(*XsdGoPkgHasElems_SubscriberNumber, bool) error
	XsdGoPkgHasElem_FamilyNamesequencePersonNameTypeschema_FamilyName_TxsdPersonNameTypeSequenceFamilyName_                                                                                                                                           func(*XsdGoPkgHasElem_FamilyNamesequencePersonNameTypeschema_FamilyName_TxsdPersonNameTypeSequenceFamilyName_, bool) error
	XsdGoPkgHasElems_AcademicCreditCodesequenceEducationalMeasureTypeschema_AcademicCreditCode_TAcademicCreditCodeType_                                                                                                                               func(*XsdGoPkgHasElems_AcademicCreditCodesequenceEducationalMeasureTypeschema_AcademicCreditCode_TAcademicCreditCodeType_, bool) error
	XsdGoPkgHasElems_OptionsequenceMajorTypeschema_Option_XsdtString_                                                                                                                                                                                 func(*XsdGoPkgHasElems_OptionsequenceMajorTypeschema_Option_XsdtString_, bool) error
	XsdGoPkgHasElem_PreferredGivenNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_PreferredGivenName_XsdtString_                                                                                     func(*XsdGoPkgHasElem_PreferredGivenNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_PreferredGivenName_XsdtString_, bool) error
	XsdGoPkgHasElem_IndustryCodesequencePositionOrgIndustryTypeschema_IndustryCode_TxsdPositionOrgIndustryTypeSequenceIndustryCode_                                                                                                                   func(*XsdGoPkgHasElem_IndustryCodesequencePositionOrgIndustryTypeschema_IndustryCode_TxsdPositionOrgIndustryTypeSequenceIndustryCode_, bool) error
	XsdGoPkgHasElem_DischargeStatussequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DischargeStatus_XsdtString_                                                                                     func(*XsdGoPkgHasElem_DischargeStatussequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DischargeStatus_XsdtString_, bool) error
	XsdGoPkgHasElems_PatentHistory                                                                                                                                                                                                                    func(*XsdGoPkgHasElems_PatentHistory, bool) error
	XsdGoPkgHasElem_MeasureValuesequenceEducationMeasureTypeschema_MeasureValue_TMeasureValueType_                                                                                                                                                    func(*XsdGoPkgHasElem_MeasureValuesequenceEducationMeasureTypeschema_MeasureValue_TMeasureValueType_, bool) error
	XsdGoPkgHasElem_PostalCodesequencePostalAddressTypeschema_PostalCode_XsdtString_                                                                                                                                                                  func(*XsdGoPkgHasElem_PostalCodesequencePostalAddressTypeschema_PostalCode_XsdtString_, bool) error
	XsdGoPkgHasElems_RecipientsequencePostalAddressTypeschema_Recipient_TxsdPostalAddressTypeSequenceRecipient_                                                                                                                                       func(*XsdGoPkgHasElems_RecipientsequencePostalAddressTypeschema_Recipient_TxsdPostalAddressTypeSequenceRecipient_, bool) error
	XsdGoPkgHasElems_CompensationsequencePositionHistoryTypeschema_Compensation_TPositionCompensationType_                                                                                                                                            func(*XsdGoPkgHasElems_CompensationsequencePositionHistoryTypeschema_Compensation_TPositionCompensationType_, bool) error
	XsdGoPkgHasElem_OrgInfosequencePositionHistoryTypeschema_OrgInfo_TPositionOrgInfoType_                                                                                                                                                            func(*XsdGoPkgHasElem_OrgInfosequencePositionHistoryTypeschema_OrgInfo_TPositionOrgInfoType_, bool) error
	XsdGoPkgHasElem_Competency                                                                                                                                                                                                                        func(*XsdGoPkgHasElem_Competency, bool) error
	XsdGoPkgHasElems_StringValue                                                                                                                                                                                                                      func(*XsdGoPkgHasElems_StringValue, bool) error
	XsdGoPkgHasElems_StructuredXMLResume                                                                                                                                                                                                              func(*XsdGoPkgHasElems_StructuredXMLResume, bool) error
	XsdGoPkgHasElems_ISSNsequenceextensioncomplexContentBookTypeschema_Issn_TissnType_                                                                                                                                                                func(*XsdGoPkgHasElems_ISSNsequenceextensioncomplexContentBookTypeschema_Issn_TissnType_, bool) error
	XsdGoPkgHasElems_LinkToResumesequenceNonXMLResumeTypeschema_LinkToResume_XsdtString_                                                                                                                                                              func(*XsdGoPkgHasElems_LinkToResumesequenceNonXMLResumeTypeschema_LinkToResume_XsdtString_, bool) error
	XsdGoPkgHasElems_IssuingAuthoritysequenceCredentialTypeschema_IssuingAuthority_TIssuingAuthorityType_                                                                                                                                             func(*XsdGoPkgHasElems_IssuingAuthoritysequenceCredentialTypeschema_IssuingAuthority_TIssuingAuthorityType_, bool) error
	XsdGoPkgHasElems_AreaCityCode                                                                                                                                                                                                                     func(*XsdGoPkgHasElems_AreaCityCode, bool) error
	TxsdEducationalMeasureTypeSequenceClassRank                                                                                                                                                                                                       func(*TxsdEducationalMeasureTypeSequenceClassRank, bool) error
	XsdGoPkgHasElem_CategoryDescriptionsequenceOccupationalCategoryTypeschema_CategoryDescription_XsdtString_                                                                                                                                         func(*XsdGoPkgHasElem_CategoryDescriptionsequenceOccupationalCategoryTypeschema_CategoryDescription_XsdtString_, bool) error
	TxsdLicensesAndCertifications                                                                                                                                                                                                                     func(*TxsdLicensesAndCertifications, bool) error
	XsdGoPkgHasElems_LicensesAndCertifications                                                                                                                                                                                                        func(*XsdGoPkgHasElems_LicensesAndCertifications, bool) error
	XsdGoPkgHasElem_InventorssequencePatentDescriptionTypeschema_Inventors_TxsdPatentDescriptionTypeSequenceInventors_                                                                                                                                func(*XsdGoPkgHasElem_InventorssequencePatentDescriptionTypeschema_Inventors_TxsdPatentDescriptionTypeSequenceInventors_, bool) error
	XsdGoPkgHasElems_AffiliatedOrganizationsequenceSpeakingEventTypeschema_AffiliatedOrganization_XsdtString_                                                                                                                                         func(*XsdGoPkgHasElems_AffiliatedOrganizationsequenceSpeakingEventTypeschema_AffiliatedOrganization_XsdtString_, bool) error
	XsdGoPkgHasElem_SecurityCredentials                                                                                                                                                                                                               func(*XsdGoPkgHasElem_SecurityCredentials, bool) error
	XsdGoPkgHasElems_RolesequenceSpeakingEventTypeschema_Role_XsdtString_                                                                                                                                                                             func(*XsdGoPkgHasElems_RolesequenceSpeakingEventTypeschema_Role_XsdtString_, bool) error
	TxsdPostalAddressTypeSequenceRecipient                                                                                                                                                                                                            func(*TxsdPostalAddressTypeSequenceRecipient, bool) error
	TCredentialType                                                                                                                                                                                                                                   func(*TCredentialType, bool) error
	XsdGoPkgHasElem_AttachmentReferencechoicesequenceStaffingSupportingMaterialsTypeschema_AttachmentReference_TxsdStaffingSupportingMaterialsTypeSequenceChoiceAttachmentReference_                                                                  func(*XsdGoPkgHasElem_AttachmentReferencechoicesequenceStaffingSupportingMaterialsTypeschema_AttachmentReference_TxsdStaffingSupportingMaterialsTypeSequenceChoiceAttachmentReference_, bool) error
	TPublicationHistoryType                                                                                                                                                                                                                           func(*TPublicationHistoryType, bool) error
	XsdGoPkgHasElem_ExecutiveSummarysequenceStructuredXMLResumeTypeschema_ExecutiveSummary_XsdtString_                                                                                                                                                func(*XsdGoPkgHasElem_ExecutiveSummarysequenceStructuredXMLResumeTypeschema_ExecutiveSummary_XsdtString_, bool) error
	XsdGoPkgHasElem_LocationSummarysequenceSchoolOrInstitutionTypeschema_LocationSummary_TxsdSchoolOrInstitutionTypeSequenceLocationSummary_                                                                                                          func(*XsdGoPkgHasElem_LocationSummarysequenceSchoolOrInstitutionTypeschema_LocationSummary_TxsdSchoolOrInstitutionTypeSequenceLocationSummary_, bool) error
	XsdGoPkgHasElem_NumericValuechoiceRatingTypeschema_NumericValue_TxsdRatingTypeChoiceNumericValue_                                                                                                                                                 func(*XsdGoPkgHasElem_NumericValuechoiceRatingTypeschema_NumericValue_TxsdRatingTypeChoiceNumericValue_, bool) error
	TEmploymentQuestionAnswerPairType                                                                                                                                                                                                                 func(*TEmploymentQuestionAnswerPairType, bool) error
	XsdGoPkgHasElem_NumberOfPagessequenceextensioncomplexContentBookTypeschema_NumberOfPages_XsdtPositiveInteger_                                                                                                                                     func(*XsdGoPkgHasElem_NumberOfPagessequenceextensioncomplexContentBookTypeschema_NumberOfPages_XsdtPositiveInteger_, bool) error
	XsdGoPkgHasElem_RolesequenceSpeakingEventTypeschema_Role_XsdtString_                                                                                                                                                                              func(*XsdGoPkgHasElem_RolesequenceSpeakingEventTypeschema_Role_XsdtString_, bool) error
	XsdGoPkgHasElem_DistributeTosequenceDistributionGuidelinesTypeschema_DistributeTo_TxsdDistributionGuidelinesTypeSequenceDistributeTo_                                                                                                             func(*XsdGoPkgHasElem_DistributeTosequenceDistributionGuidelinesTypeschema_DistributeTo_TxsdDistributionGuidelinesTypeSequenceDistributeTo_, bool) error
	XsdGoPkgHasElems_OrgSizesequencePositionHistoryTypeschema_OrgSize_XsdtString_                                                                                                                                                                     func(*XsdGoPkgHasElems_OrgSizesequencePositionHistoryTypeschema_OrgSize_XsdtString_, bool) error
	XsdGoPkgHasElems_OrganizationNamesequencePositionOrgNameTypeschema_OrganizationName_XsdtString_                                                                                                                                                   func(*XsdGoPkgHasElems_OrganizationNamesequencePositionOrgNameTypeschema_OrganizationName_XsdtString_, bool) error
	XsdGoPkgHasElem_StringDatechoiceFlexibleDatesTypeschema_StringDate_XsdtString_                                                                                                                                                                    func(*XsdGoPkgHasElem_StringDatechoiceFlexibleDatesTypeschema_StringDate_XsdtString_, bool) error
	TxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestone                                                                                                                                                                              func(*TxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestone, bool) error
	XsdGoPkgHasElem_SchoolIdsequenceSchoolDataTypeschema_SchoolId_TEntityIdType_                                                                                                                                                                      func(*XsdGoPkgHasElem_SchoolIdsequenceSchoolDataTypeschema_SchoolId_TEntityIdType_, bool) error
	XsdGoPkgHasElems_EndDatesequenceDeprecatedDatesOfAttendanceTypeschema_EndDate_TFlexibleDatesType_                                                                                                                                                 func(*XsdGoPkgHasElems_EndDatesequenceDeprecatedDatesOfAttendanceTypeschema_EndDate_TFlexibleDatesType_, bool) error
	XsdGoPkgHasElems_MostRecentDatesequenceTxsdCopyrightTypeSequenceCopyrightDatesCopyrightDatessequenceCopyrightTypeschema_MostRecentDate_TFlexibleDatesType_                                                                                        func(*XsdGoPkgHasElems_MostRecentDatesequenceTxsdCopyrightTypeSequenceCopyrightDatesCopyrightDatessequenceCopyrightTypeschema_MostRecentDate_TFlexibleDatesType_, bool) error
	XsdGoPkgHasElem_Associations                                                                                                                                                                                                                      func(*XsdGoPkgHasElem_Associations, bool) error
	TxsdNumericValue                                                                                                                                                                                                                                  func(*TxsdNumericValue, bool) error
	TxsdSchoolOrInstitutionTypeSequenceOrganizationUnit                                                                                                                                                                                               func(*TxsdSchoolOrInstitutionTypeSequenceOrganizationUnit, bool) error
	XsdGoPkgHasElems_ProgramIdsequenceMinorTypeschema_ProgramId_TEntityIdType_                                                                                                                                                                        func(*XsdGoPkgHasElems_ProgramIdsequenceMinorTypeschema_ProgramId_TEntityIdType_, bool) error
	XsdGoPkgHasElem_EmployerContactInfosequenceEmployerOrgDataTypeschema_EmployerContactInfo_TEmpContactInfoType_                                                                                                                                     func(*XsdGoPkgHasElem_EmployerContactInfosequenceEmployerOrgDataTypeschema_EmployerContactInfo_TEmpContactInfoType_, bool) error
	TPositionHistoryType                                                                                                                                                                                                                              func(*TPositionHistoryType, bool) error
	XsdGoPkgHasElem_ReadsequenceTxsdLanguageLanguageschema_Read_XsdtBoolean_                                                                                                                                                                          func(*XsdGoPkgHasElem_ReadsequenceTxsdLanguageLanguageschema_Read_XsdtBoolean_, bool) error
	XsdGoPkgHasElem_EmployerOrgNamesequenceEmployerOrgDataTypeschema_EmployerOrgName_XsdtString_                                                                                                                                                      func(*XsdGoPkgHasElem_EmployerOrgNamesequenceEmployerOrgDataTypeschema_EmployerOrgName_XsdtString_, bool) error
	TVerificationType                                                                                                                                                                                                                                 func(*TVerificationType, bool) error
	XsdGoPkgHasElems_OtherCompensationsequencePositionCompensationTypeschema_OtherCompensation_TxsdPositionCompensationTypeSequenceOtherCompensation_                                                                                                 func(*XsdGoPkgHasElems_OtherCompensationsequencePositionCompensationTypeschema_OtherCompensation_TxsdPositionCompensationTypeSequenceOtherCompensation_, bool) error
	XsdGoPkgHasElem_PublisherLocationsequenceextensioncomplexContentBookTypeschema_PublisherLocation_XsdtString_                                                                                                                                      func(*XsdGoPkgHasElem_PublisherLocationsequenceextensioncomplexContentBookTypeschema_PublisherLocation_XsdtString_, bool) error
	XsdGoPkgHasElems_ConferenceDatesequenceextensioncomplexContentConferencePaperTypeschema_ConferenceDate_TFlexibleDatesType_                                                                                                                        func(*XsdGoPkgHasElems_ConferenceDatesequenceextensioncomplexContentConferencePaperTypeschema_ConferenceDate_TFlexibleDatesType_, bool) error
	XsdGoPkgHasElems_LegalNamesequenceAlternateScriptsequencePersonNameTypeschema_LegalName_XsdtString_                                                                                                                                               func(*XsdGoPkgHasElems_LegalNamesequenceAlternateScriptsequencePersonNameTypeschema_LegalName_XsdtString_, bool) error
	XsdGoPkgHasElems_DatesOfServicesequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DatesOfService_TDatesOfServiceType_                                                                             func(*XsdGoPkgHasElems_DatesOfServicesequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DatesOfService_TDatesOfServiceType_, bool) error
	XsdGoPkgHasElem_YearchoiceFlexibleDatesTypeschema_Year_XsdtGYear_                                                                                                                                                                                 func(*XsdGoPkgHasElem_YearchoiceFlexibleDatesTypeschema_Year_XsdtGYear_, bool) error
	TMeasureValueType                                                                                                                                                                                                                                 func(*TMeasureValueType, bool) error
	XsdGoPkgHasElems_RecognitionAchievedsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_RecognitionAchieved_XsdtString_                                                                            func(*XsdGoPkgHasElems_RecognitionAchievedsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_RecognitionAchieved_XsdtString_, bool) error
	XsdGoPkgHasElem_SpeakingEvent                                                                                                                                                                                                                     func(*XsdGoPkgHasElem_SpeakingEvent, bool) error
	XsdGoPkgHasElem_CourseLevelCodesequenceEducationalMeasureTypeschema_CourseLevelCode_TCourseLevelCodeType_                                                                                                                                         func(*XsdGoPkgHasElem_CourseLevelCodesequenceEducationalMeasureTypeschema_CourseLevelCode_TCourseLevelCodeType_, bool) error
	XsdGoPkgHasElems_Fax                                                                                                                                                                                                                              func(*XsdGoPkgHasElems_Fax, bool) error
	XsdGoPkgHasElem_ResumeAdditionalItemssequenceStructuredXMLResumeTypeschema_ResumeAdditionalItems_TxsdStructuredXMLResumeTypeSequenceResumeAdditionalItems_                                                                                        func(*XsdGoPkgHasElem_ResumeAdditionalItemssequenceStructuredXMLResumeTypeschema_ResumeAdditionalItems_TxsdStructuredXMLResumeTypeSequenceResumeAdditionalItems_, bool) error
	XsdGoPkgHasElems_EndingCompensationsequencePositionCompensationTypeschema_EndingCompensation_TxsdPositionCompensationTypeSequenceEndingCompensation_                                                                                              func(*XsdGoPkgHasElems_EndingCompensationsequencePositionCompensationTypeschema_EndingCompensation_TxsdPositionCompensationTypeSequenceEndingCompensation_, bool) error
	XsdGoPkgHasElem_TaxonomyNamesequenceOccupationalCategoryTypeschema_TaxonomyName_TxsdOccupationalCategoryTypeSequenceTaxonomyName_                                                                                                                 func(*XsdGoPkgHasElem_TaxonomyNamesequenceOccupationalCategoryTypeschema_TaxonomyName_TxsdOccupationalCategoryTypeSequenceTaxonomyName_, bool) error
	XsdGoPkgHasElems_CampaignsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_Campaign_XsdtString_                                                                                                  func(*XsdGoPkgHasElems_CampaignsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_Campaign_XsdtString_, bool) error
	XsdGoPkgHasElem_PublicationHistory                                                                                                                                                                                                                func(*XsdGoPkgHasElem_PublicationHistory, bool) error
	XsdGoPkgHasElem_DistributionGuidelinessequenceTxsdResumeResumeschema_DistributionGuidelines_TDistributionGuidelinesType_                                                                                                                          func(*XsdGoPkgHasElem_DistributionGuidelinessequenceTxsdResumeResumeschema_DistributionGuidelines_TDistributionGuidelinesType_, bool) error
	XsdGoPkgHasElems_DatesOfAttendancesequenceSchoolOrInstitutionTypeschema_DatesOfAttendance_TDeprecatedDatesOfAttendanceType_                                                                                                                       func(*XsdGoPkgHasElems_DatesOfAttendancesequenceSchoolOrInstitutionTypeschema_DatesOfAttendance_TDeprecatedDatesOfAttendanceType_, bool) error
	XsdGoPkgHasElems_Competency                                                                                                                                                                                                                       func(*XsdGoPkgHasElems_Competency, bool) error
	XsdGoPkgHasElems_NamesequenceMinorTypeschema_Name_XsdtString_                                                                                                                                                                                     func(*XsdGoPkgHasElems_NamesequenceMinorTypeschema_Name_XsdtString_, bool) error
	XsdGoPkgHasElems_AbstractsequenceBasicBibliographicRecordTypeschema_Abstract_XsdtString_                                                                                                                                                          func(*XsdGoPkgHasElems_AbstractsequenceBasicBibliographicRecordTypeschema_Abstract_XsdtString_, bool) error
	XsdGoPkgHasElem_StartDatesequenceAssociationTypeschema_StartDate_TFlexibleDatesType_                                                                                                                                                              func(*XsdGoPkgHasElem_StartDatesequenceAssociationTypeschema_StartDate_TFlexibleDatesType_, bool) error
	XsdGoPkgHasElem_CountryCodesequencePostalAddressTypeschema_CountryCode_TxsdPostalAddressTypeSequenceCountryCode_                                                                                                                                  func(*XsdGoPkgHasElem_CountryCodesequencePostalAddressTypeschema_CountryCode_TxsdPostalAddressTypeSequenceCountryCode_, bool) error
	XsdGoPkgHasElem_StartingCompensationsequencePositionCompensationTypeschema_StartingCompensation_TxsdPositionCompensationTypeSequenceStartingCompensation_                                                                                         func(*XsdGoPkgHasElem_StartingCompensationsequencePositionCompensationTypeschema_StartingCompensation_TxsdPositionCompensationTypeSequenceStartingCompensation_, bool) error
	XsdGoPkgHasElem_ServiceStatussequenceMilitaryHistoryTypeschema_ServiceStatus_XsdtString_                                                                                                                                                          func(*XsdGoPkgHasElem_ServiceStatussequenceMilitaryHistoryTypeschema_ServiceStatus_XsdtString_, bool) error
	TSpeakingEventType                                                                                                                                                                                                                                func(*TSpeakingEventType, bool) error
	XsdGoPkgHasElems_IssuesequenceextensioncomplexContentArticleTypeschema_Issue_XsdtString_                                                                                                                                                          func(*XsdGoPkgHasElems_IssuesequenceextensioncomplexContentArticleTypeschema_Issue_XsdtString_, bool) error
	TAchievementType                                                                                                                                                                                                                                  func(*TAchievementType, bool) error
	TDunsNumberDataType                                                                                                                                                                                                                               func(*TDunsNumberDataType, bool) error
	XsdGoPkgHasElem_InternetDomainName                                                                                                                                                                                                                func(*XsdGoPkgHasElem_InternetDomainName, bool) error
	XsdGoPkgHasElem_MilitaryHistory                                                                                                                                                                                                                   func(*XsdGoPkgHasElem_MilitaryHistory, bool) error
	XsdGoPkgHasElem_NamesequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Name_XsdtString_                                                                                                                                     func(*XsdGoPkgHasElem_NamesequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Name_XsdtString_, bool) error
	TEmploymentLocationSummaryType                                                                                                                                                                                                                    func(*TEmploymentLocationSummaryType, bool) error
	XsdGoPkgHasElem_JobStepsequenceJobLevelInfoTypeschema_JobStep_XsdtString_                                                                                                                                                                         func(*XsdGoPkgHasElem_JobStepsequenceJobLevelInfoTypeschema_JobStep_XsdtString_, bool) error
	TxsdOccupationalCategoryTypeSequenceTaxonomyName                                                                                                                                                                                                  func(*TxsdOccupationalCategoryTypeSequenceTaxonomyName, bool) error
	TxsdDistributionGuidelinesTypeSequenceDistributeTo                                                                                                                                                                                                func(*TxsdDistributionGuidelinesTypeSequenceDistributeTo, bool) error
	XsdGoPkgHasElem_Association                                                                                                                                                                                                                       func(*XsdGoPkgHasElem_Association, bool) error
	TDatesOfAttendanceType                                                                                                                                                                                                                            func(*TDatesOfAttendanceType, bool) error
	XsdGoPkgHasElem_StreetNamesequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_StreetName_XsdtString_                                                                                               func(*XsdGoPkgHasElem_StreetNamesequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_StreetName_XsdtString_, bool) error
	XsdGoPkgHasElem_FirstIssuedDatesequenceTxsdCredentialTypeSequenceEffectiveDateEffectiveDatesequenceCredentialTypeschema_FirstIssuedDate_TFlexibleDatesType_                                                                                       func(*XsdGoPkgHasElem_FirstIssuedDatesequenceTxsdCredentialTypeSequenceEffectiveDateEffectiveDatesequenceCredentialTypeschema_FirstIssuedDate_TFlexibleDatesType_, bool) error
	XsdGoPkgHasElems_LicenseOrCertification                                                                                                                                                                                                           func(*XsdGoPkgHasElems_LicenseOrCertification, bool) error
	XsdGoPkgHasElems_PersonName                                                                                                                                                                                                                       func(*XsdGoPkgHasElems_PersonName, bool) error
	TMobileTelcomNumberType                                                                                                                                                                                                                           func(*TMobileTelcomNumberType, bool) error
	XsdGoPkgHasElems_ContactInfosequenceVerificationTypeschema_ContactInfo_TxsdVerificationTypeSequenceContactInfo_                                                                                                                                   func(*XsdGoPkgHasElems_ContactInfosequenceVerificationTypeschema_ContactInfo_TxsdVerificationTypeSequenceContactInfo_, bool) error
	XsdGoPkgHasElems_MeasureValuesequenceEduMeasureTypeschema_MeasureValue_XsdtString_                                                                                                                                                                func(*XsdGoPkgHasElems_MeasureValuesequenceEduMeasureTypeschema_MeasureValue_XsdtString_, bool) error
	XsdGoPkgHasElems_StringDatechoiceFlexibleDatesTypeschema_StringDate_XsdtString_                                                                                                                                                                   func(*XsdGoPkgHasElems_StringDatechoiceFlexibleDatesTypeschema_StringDate_XsdtString_, bool) error
	XsdGoPkgHasElem_SchoolNamesequenceSchoolDataTypeschema_SchoolName_XsdtString_                                                                                                                                                                     func(*XsdGoPkgHasElem_SchoolNamesequenceSchoolDataTypeschema_SchoolName_XsdtString_, bool) error
	XsdGoPkgHasElem_PermissionToContactsequenceVerificationTypeschema_PermissionToContact_XsdtBoolean_                                                                                                                                                func(*XsdGoPkgHasElem_PermissionToContactsequenceVerificationTypeschema_PermissionToContact_XsdtBoolean_, bool) error
	XsdGoPkgHasElem_WebSitesequencePositionOrgInfoTypeschema_WebSite_TInternetWebAddressType_                                                                                                                                                         func(*XsdGoPkgHasElem_WebSitesequencePositionOrgInfoTypeschema_WebSite_TInternetWebAddressType_, bool) error
	XsdGoPkgHasElems_InternetWebAddress                                                                                                                                                                                                               func(*XsdGoPkgHasElems_InternetWebAddress, bool) error
	XsdGoPkgHasElems_Ttytdd                                                                                                                                                                                                                           func(*XsdGoPkgHasElems_Ttytdd, bool) error
	XsdGoPkgHasElems_AcademicCreditHoursIncludedsequenceEducationalMeasureTypeschema_AcademicCreditHoursIncluded_XsdtDecimal_                                                                                                                         func(*XsdGoPkgHasElems_AcademicCreditHoursIncludedsequenceEducationalMeasureTypeschema_AcademicCreditHoursIncluded_XsdtDecimal_, bool) error
	XsdGoPkgHasElem_ServiceNumbersequenceMilitaryHistoryTypeschema_ServiceNumber_TEntityIdType_                                                                                                                                                       func(*XsdGoPkgHasElem_ServiceNumbersequenceMilitaryHistoryTypeschema_ServiceNumber_TEntityIdType_, bool) error
	XsdGoPkgHasElems_NonStandardValuechoiceSourceTypeTypeschema_NonStandardValue_XsdtString_                                                                                                                                                          func(*XsdGoPkgHasElems_NonStandardValuechoiceSourceTypeTypeschema_NonStandardValue_XsdtString_, bool) error
	XsdGoPkgHasElems_PublisherNamesequenceextensioncomplexContentBookTypeschema_PublisherName_XsdtString_                                                                                                                                             func(*XsdGoPkgHasElems_PublisherNamesequenceextensioncomplexContentBookTypeschema_PublisherName_XsdtString_, bool) error
	XsdGoPkgHasElems_IndustryCodesequencePositionOrgIndustryTypeschema_IndustryCode_TxsdPositionOrgIndustryTypeSequenceIndustryCode_                                                                                                                  func(*XsdGoPkgHasElems_IndustryCodesequencePositionOrgIndustryTypeschema_IndustryCode_TxsdPositionOrgIndustryTypeSequenceIndustryCode_, bool) error
	XsdGoPkgHasElems_InternetDomainNamesequenceSchoolDataTypeschema_InternetDomainName_TInternetDomainNameType_                                                                                                                                       func(*XsdGoPkgHasElems_InternetDomainNamesequenceSchoolDataTypeschema_InternetDomainName_TInternetDomainNameType_, bool) error
	XsdGoPkgHasElems_InventorNamesequenceTxsdPatentDescriptionTypeSequenceInventorsInventorssequencePatentDescriptionTypeschema_InventorName_XsdtString_                                                                                              func(*XsdGoPkgHasElems_InventorNamesequenceTxsdPatentDescriptionTypeSequenceInventorsInventorssequencePatentDescriptionTypeschema_InventorName_XsdtString_, bool) error
	TxsdPatentDescriptionTypeSequenceInventors                                                                                                                                                                                                        func(*TxsdPatentDescriptionTypeSequenceInventors, bool) error
	XsdGoPkgHasElem_ContactInfosequenceStructuredXMLResumeTypeschema_ContactInfo_TSEPContactInfoType_                                                                                                                                                 func(*XsdGoPkgHasElem_ContactInfosequenceStructuredXMLResumeTypeschema_ContactInfo_TSEPContactInfoType_, bool) error
	XsdGoPkgHasElems_ClassRanksequenceEducationalMeasureTypeschema_ClassRank_TxsdEducationalMeasureTypeSequenceClassRank_                                                                                                                             func(*XsdGoPkgHasElems_ClassRanksequenceEducationalMeasureTypeschema_ClassRank_TxsdEducationalMeasureTypeSequenceClassRank_, bool) error
	XsdGoPkgHasElems_MeasuresequenceSchoolOrInstitutionTypeschema_Measure_TEduMeasureType_                                                                                                                                                            func(*XsdGoPkgHasElems_MeasuresequenceSchoolOrInstitutionTypeschema_Measure_TEduMeasureType_, bool) error
	XsdGoPkgHasElem_QuestionAnswerPairsequenceVerificationTypeschema_QuestionAnswerPair_TEmploymentQuestionAnswerPairType_                                                                                                                            func(*XsdGoPkgHasElem_QuestionAnswerPairsequenceVerificationTypeschema_QuestionAnswerPair_TEmploymentQuestionAnswerPairType_, bool) error
	XsdGoPkgHasElems_DegreeMinorsequenceEduDegreeTypeschema_DegreeMinor_TMinorType_                                                                                                                                                                   func(*XsdGoPkgHasElems_DegreeMinorsequenceEduDegreeTypeschema_DegreeMinor_TMinorType_, bool) error
	XsdGoPkgHasElem_ClassRanksequenceEducationalMeasureTypeschema_ClassRank_TxsdEducationalMeasureTypeSequenceClassRank_                                                                                                                              func(*XsdGoPkgHasElem_ClassRanksequenceEducationalMeasureTypeschema_ClassRank_TxsdEducationalMeasureTypeSequenceClassRank_, bool) error
	TxsdPersonNameTypeSequenceAlternateScriptSequenceAffix                                                                                                                                                                                            func(*TxsdPersonNameTypeSequenceAlternateScriptSequenceAffix, bool) error
	TxsdPatentDescriptionTypeSequencePatentDetail                                                                                                                                                                                                     func(*TxsdPatentDescriptionTypeSequencePatentDetail, bool) error
	XsdGoPkgHasElem_JournalOrSerialNamesequenceextensioncomplexContentArticleTypeschema_JournalOrSerialName_XsdtString_                                                                                                                               func(*XsdGoPkgHasElem_JournalOrSerialNamesequenceextensioncomplexContentArticleTypeschema_JournalOrSerialName_XsdtString_, bool) error
	XsdGoPkgHasElem_FormattedPublicationDescriptionsequencePublicationHistoryTypeschema_FormattedPublicationDescription_TxsdPublicationHistoryTypeSequenceFormattedPublicationDescription_                                                            func(*XsdGoPkgHasElem_FormattedPublicationDescriptionsequencePublicationHistoryTypeschema_FormattedPublicationDescription_TxsdPublicationHistoryTypeSequenceFormattedPublicationDescription_, bool) error
	XsdGoPkgHasElems_IndustryDescriptionsequencePositionOrgIndustryTypeschema_IndustryDescription_XsdtString_                                                                                                                                         func(*XsdGoPkgHasElems_IndustryDescriptionsequencePositionOrgIndustryTypeschema_IndustryDescription_XsdtString_, bool) error
	XsdGoPkgHasElems_EmployerOrgsequenceEmploymentHistoryTypeschema_EmployerOrg_TEmployerOrgDataType_                                                                                                                                                 func(*XsdGoPkgHasElems_EmployerOrgsequenceEmploymentHistoryTypeschema_EmployerOrg_TEmployerOrgDataType_, bool) error
	XsdGoPkgHasElem_MajorsequenceSchoolOrInstitutionTypeschema_Major_XsdtString_                                                                                                                                                                      func(*XsdGoPkgHasElem_MajorsequenceSchoolOrInstitutionTypeschema_Major_XsdtString_, bool) error
	XsdGoPkgHasElems_GoodStudentIndicatorsequenceEducationMeasureTypeschema_GoodStudentIndicator_XsdtBoolean_                                                                                                                                         func(*XsdGoPkgHasElems_GoodStudentIndicatorsequenceEducationMeasureTypeschema_GoodStudentIndicator_XsdtBoolean_, bool) error
	XsdGoPkgHasElems_TextResumesequenceNonXMLResumeTypeschema_TextResume_XsdtString_                                                                                                                                                                  func(*XsdGoPkgHasElems_TextResumesequenceNonXMLResumeTypeschema_TextResume_XsdtString_, bool) error
	XsdGoPkgHasElem_LicenseOrCertification                                                                                                                                                                                                            func(*XsdGoPkgHasElem_LicenseOrCertification, bool) error
	XsdGoPkgHasElem_NonXMLResume                                                                                                                                                                                                                      func(*XsdGoPkgHasElem_NonXMLResume, bool) error
	XsdGoPkgHasElem_SchoolsequenceSchoolOrInstitutionTypeschema_School_TSchoolDataType_                                                                                                                                                               func(*XsdGoPkgHasElem_SchoolsequenceSchoolOrInstitutionTypeschema_School_TSchoolDataType_, bool) error
	TFlexibleDatesType                                                                                                                                                                                                                                func(*TFlexibleDatesType, bool) error
	TxsdAchievements                                                                                                                                                                                                                                  func(*TxsdAchievements, bool) error
	TxsdVerificationTypeSequenceContactInfo                                                                                                                                                                                                           func(*TxsdVerificationTypeSequenceContactInfo, bool) error
	XsdGoPkgHasElems_Mobile                                                                                                                                                                                                                           func(*XsdGoPkgHasElems_Mobile, bool) error
	TNonXMLResumeType                                                                                                                                                                                                                                 func(*TNonXMLResumeType, bool) error
	XsdGoPkgHasElem_AbstractsequenceBasicBibliographicRecordTypeschema_Abstract_XsdtString_                                                                                                                                                           func(*XsdGoPkgHasElem_AbstractsequenceBasicBibliographicRecordTypeschema_Abstract_XsdtString_, bool) error
	XsdGoPkgHasElem_CopyrightsequenceBasicBibliographicRecordTypeschema_Copyright_TCopyrightType_                                                                                                                                                     func(*XsdGoPkgHasElem_CopyrightsequenceBasicBibliographicRecordTypeschema_Copyright_TCopyrightType_, bool) error
	TOtherPublicationType                                                                                                                                                                                                                             func(*TOtherPublicationType, bool) error
	XsdGoPkgHasElems_OtherPublicationsequencePublicationHistoryTypeschema_OtherPublication_TOtherPublicationType_                                                                                                                                     func(*XsdGoPkgHasElems_OtherPublicationsequencePublicationHistoryTypeschema_OtherPublication_TOtherPublicationType_, bool) error
	XsdGoPkgHasElems_EffectiveDatesequenceAdditionalItemTypeschema_EffectiveDate_TxsdAdditionalItemTypeSequenceEffectiveDate_                                                                                                                         func(*XsdGoPkgHasElems_EffectiveDatesequenceAdditionalItemTypeschema_EffectiveDate_TxsdAdditionalItemTypeSequenceEffectiveDate_, bool) error
	XsdGoPkgHasElems_EventNamesequenceextensioncomplexContentConferencePaperTypeschema_EventName_XsdtString_                                                                                                                                          func(*XsdGoPkgHasElems_EventNamesequenceextensioncomplexContentConferencePaperTypeschema_EventName_XsdtString_, bool) error
	XsdGoPkgHasElems_JobPlansequenceJobLevelInfoTypeschema_JobPlan_XsdtString_                                                                                                                                                                        func(*XsdGoPkgHasElems_JobPlansequenceJobLevelInfoTypeschema_JobPlan_XsdtString_, bool) error
	XsdGoPkgHasElem_VerificationsequencePositionHistoryTypeschema_Verification_TVerificationType_                                                                                                                                                     func(*XsdGoPkgHasElem_VerificationsequencePositionHistoryTypeschema_Verification_TVerificationType_, bool) error
	XsdGoPkgHasElem_IndustryDescriptionsequencePositionOrgIndustryTypeschema_IndustryDescription_XsdtString_                                                                                                                                          func(*XsdGoPkgHasElem_IndustryDescriptionsequencePositionOrgIndustryTypeschema_IndustryDescription_XsdtString_, bool) error
	XsdGoPkgHasElems_LanguageCode                                                                                                                                                                                                                     func(*XsdGoPkgHasElems_LanguageCode, bool) error
	XsdGoPkgHasElem_EditionsequenceextensioncomplexContentBookTypeschema_Edition_XsdtString_                                                                                                                                                          func(*XsdGoPkgHasElem_EditionsequenceextensioncomplexContentBookTypeschema_Edition_XsdtString_, bool) error
	XsdGoPkgHasElem_PatentDetailsequencePatentDescriptionTypeschema_PatentDetail_TxsdPatentDescriptionTypeSequencePatentDetail_                                                                                                                       func(*XsdGoPkgHasElem_PatentDetailsequencePatentDescriptionTypeschema_PatentDetail_TxsdPatentDescriptionTypeSequencePatentDetail_, bool) error
	XsdGoPkgHasElem_DegreeMinorsequenceEduDegreeTypeschema_DegreeMinor_TMinorType_                                                                                                                                                                    func(*XsdGoPkgHasElem_DegreeMinorsequenceEduDegreeTypeschema_DegreeMinor_TMinorType_, bool) error
	XsdGoPkgHasElems_EditionsequenceextensioncomplexContentBookTypeschema_Edition_XsdtString_                                                                                                                                                         func(*XsdGoPkgHasElems_EditionsequenceextensioncomplexContentBookTypeschema_Edition_XsdtString_, bool) error
	XsdGoPkgHasElems_SchoolIdsequenceSchoolDataTypeschema_SchoolId_TEntityIdType_                                                                                                                                                                     func(*XsdGoPkgHasElems_SchoolIdsequenceSchoolDataTypeschema_SchoolId_TEntityIdType_, bool) error
	XsdGoPkgHasElem_AcademicCreditHoursIncludedsequenceEducationalMeasureTypeschema_AcademicCreditHoursIncluded_XsdtDecimal_                                                                                                                          func(*XsdGoPkgHasElem_AcademicCreditHoursIncludedsequenceEducationalMeasureTypeschema_AcademicCreditHoursIncluded_XsdtDecimal_, bool) error
	XsdGoPkgHasElems_PatentDetailsequencePatentDescriptionTypeschema_PatentDetail_TxsdPatentDescriptionTypeSequencePatentDetail_                                                                                                                      func(*XsdGoPkgHasElems_PatentDetailsequencePatentDescriptionTypeschema_PatentDetail_TxsdPatentDescriptionTypeSequencePatentDetail_, bool) error
	XsdGoPkgHasElems_OriginalDatesequenceTxsdCopyrightTypeSequenceCopyrightDatesCopyrightDatessequenceCopyrightTypeschema_OriginalDate_TFlexibleDatesType_                                                                                            func(*XsdGoPkgHasElems_OriginalDatesequenceTxsdCopyrightTypeSequenceCopyrightDatesCopyrightDatessequenceCopyrightTypeschema_OriginalDate_TFlexibleDatesType_, bool) error
	XsdGoPkgHasElems_ExcessiveValueIndicatorsequenceEducationMeasureTypeschema_ExcessiveValueIndicator_XsdtBoolean_                                                                                                                                   func(*XsdGoPkgHasElems_ExcessiveValueIndicatorsequenceEducationMeasureTypeschema_ExcessiveValueIndicator_XsdtBoolean_, bool) error
	XsdGoPkgHasElems_Achievement                                                                                                                                                                                                                      func(*XsdGoPkgHasElems_Achievement, bool) error
	XsdGoPkgHasElem_Location                                                                                                                                                                                                                          func(*XsdGoPkgHasElem_Location, bool) error
	XsdGoPkgHasElem_CategoryCodesequenceOccupationalCategoryTypeschema_CategoryCode_XsdtString_                                                                                                                                                       func(*XsdGoPkgHasElem_CategoryCodesequenceOccupationalCategoryTypeschema_CategoryCode_XsdtString_, bool) error
	XsdGoPkgHasElem_ValidFromsequenceTxsdCredentialTypeSequenceEffectiveDateEffectiveDatesequenceCredentialTypeschema_ValidFrom_TFlexibleDatesType_                                                                                                   func(*XsdGoPkgHasElem_ValidFromsequenceTxsdCredentialTypeSequenceEffectiveDateEffectiveDatesequenceCredentialTypeschema_ValidFrom_TFlexibleDatesType_, bool) error
	TSEPContactInfoType                                                                                                                                                                                                                               func(*TSEPContactInfoType, bool) error
	TxsdAssociation                                                                                                                                                                                                                                   func(*TxsdAssociation, bool) error
	XsdGoPkgHasElem_Pager                                                                                                                                                                                                                             func(*XsdGoPkgHasElem_Pager, bool) error
	TJobLevelInfoType                                                                                                                                                                                                                                 func(*TJobLevelInfoType, bool) error
	TxsdStructuredXMLResumeTypeSequenceQualifications                                                                                                                                                                                                 func(*TxsdStructuredXMLResumeTypeSequenceQualifications, bool) error
	XsdGoPkgHasElems_GenderCode                                                                                                                                                                                                                       func(*XsdGoPkgHasElems_GenderCode, bool) error
	TxsdCredentialTypeSequenceEffectiveDate                                                                                                                                                                                                           func(*TxsdCredentialTypeSequenceEffectiveDate, bool) error
	XsdGoPkgHasElem_AffixsequenceAlternateScriptsequencePersonNameTypeschema_Affix_TxsdPersonNameTypeSequenceAlternateScriptSequenceAffix_                                                                                                            func(*XsdGoPkgHasElem_AffixsequenceAlternateScriptsequencePersonNameTypeschema_Affix_TxsdPersonNameTypeSequenceAlternateScriptSequenceAffix_, bool) error
	XsdGoPkgHasElems_LocationsequenceSpeakingEventTypeschema_Location_XsdtString_                                                                                                                                                                     func(*XsdGoPkgHasElems_LocationsequenceSpeakingEventTypeschema_Location_XsdtString_, bool) error
	XsdGoPkgHasElem_LinksequenceAssociationTypeschema_Link_TInternetWebAddressType_                                                                                                                                                                   func(*XsdGoPkgHasElem_LinksequenceAssociationTypeschema_Link_TInternetWebAddressType_, bool) error
	XsdGoPkgHasElem_OrgSizesequencePositionHistoryTypeschema_OrgSize_XsdtString_                                                                                                                                                                      func(*XsdGoPkgHasElem_OrgSizesequencePositionHistoryTypeschema_OrgSize_XsdtString_, bool) error
	XsdGoPkgHasElem_PositionTitlesequenceReferenceTypeschema_PositionTitle_XsdtString_                                                                                                                                                                func(*XsdGoPkgHasElem_PositionTitlesequenceReferenceTypeschema_PositionTitle_XsdtString_, bool) error
	TxsdReferences                                                                                                                                                                                                                                    func(*TxsdReferences, bool) error
	XsdGoPkgHasElems_DistributeTosequenceDistributionGuidelinesTypeschema_DistributeTo_TxsdDistributionGuidelinesTypeSequenceDistributeTo_                                                                                                            func(*XsdGoPkgHasElems_DistributeTosequenceDistributionGuidelinesTypeschema_DistributeTo_TxsdDistributionGuidelinesTypeSequenceDistributeTo_, bool) error
	XsdGoPkgHasElems_DegreeMeasuresequenceEduDegreeTypeschema_DegreeMeasure_TEducationalMeasureType_                                                                                                                                                  func(*XsdGoPkgHasElems_DegreeMeasuresequenceEduDegreeTypeschema_DegreeMeasure_TEducationalMeasureType_, bool) error
	TxsdPostalAddressTypeSequenceDeliveryAddress                                                                                                                                                                                                      func(*TxsdPostalAddressTypeSequenceDeliveryAddress, bool) error
	XsdGoPkgHasElem_EndingCompensationsequencePositionCompensationTypeschema_EndingCompensation_TxsdPositionCompensationTypeSequenceEndingCompensation_                                                                                               func(*XsdGoPkgHasElem_EndingCompensationsequencePositionCompensationTypeschema_EndingCompensation_TxsdPositionCompensationTypeSequenceEndingCompensation_, bool) error
	TxsdMilitaryHistoryTypeSequenceServiceDetail                                                                                                                                                                                                      func(*TxsdMilitaryHistoryTypeSequenceServiceDetail, bool) error
	XsdGoPkgHasElem_SecurityCredential                                                                                                                                                                                                                func(*XsdGoPkgHasElem_SecurityCredential, bool) error
	XsdGoPkgHasElems_Telephone                                                                                                                                                                                                                        func(*XsdGoPkgHasElems_Telephone, bool) error
	XsdGoPkgHasElems_DegreeNamesequenceEduDegreeTypeschema_DegreeName_TxsdEduDegreeTypeSequenceDegreeName_                                                                                                                                            func(*XsdGoPkgHasElems_DegreeNamesequenceEduDegreeTypeschema_DegreeName_TxsdEduDegreeTypeSequenceDegreeName_, bool) error
	XsdGoPkgHasElem_DegreeMeasuresequenceEduDegreeTypeschema_DegreeMeasure_TEducationalMeasureType_                                                                                                                                                   func(*XsdGoPkgHasElem_DegreeMeasuresequenceEduDegreeTypeschema_DegreeMeasure_TEducationalMeasureType_, bool) error
	TxsdPublicationHistoryTypeSequenceFormattedPublicationDescription                                                                                                                                                                                 func(*TxsdPublicationHistoryTypeSequenceFormattedPublicationDescription, bool) error
	TCopyrightType                                                                                                                                                                                                                                    func(*TCopyrightType, bool) error
	XsdGoPkgHasElems_SecurityCredentials                                                                                                                                                                                                              func(*XsdGoPkgHasElems_SecurityCredentials, bool) error
	XsdGoPkgHasElems_RankAchievedsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_RankAchieved_TRankAchievedType_                                                                                   func(*XsdGoPkgHasElems_RankAchievedsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_RankAchieved_TRankAchievedType_, bool) error
	TxsdPersonNameTypeSequenceAlternateScript                                                                                                                                                                                                         func(*TxsdPersonNameTypeSequenceAlternateScript, bool) error
	TEducationHistoryType                                                                                                                                                                                                                             func(*TEducationHistoryType, bool) error
	XsdGoPkgHasElem_Use                                                                                                                                                                                                                               func(*XsdGoPkgHasElem_Use, bool) error
	TxsdStructuredXMLResumeTypeSequenceResumeAdditionalItems                                                                                                                                                                                          func(*TxsdStructuredXMLResumeTypeSequenceResumeAdditionalItems, bool) error
	XsdGoPkgHasElems_PostalCodesequenceLocationSummarysequenceSchoolOrInstitutionTypeschema_PostalCode_XsdtString_                                                                                                                                    func(*XsdGoPkgHasElems_PostalCodesequenceLocationSummarysequenceSchoolOrInstitutionTypeschema_PostalCode_XsdtString_, bool) error
	XsdGoPkgHasElems_ServiceNumbersequenceMilitaryHistoryTypeschema_ServiceNumber_TEntityIdType_                                                                                                                                                      func(*XsdGoPkgHasElems_ServiceNumbersequenceMilitaryHistoryTypeschema_ServiceNumber_TEntityIdType_, bool) error
	XsdGoPkgHasElem_PageNumbersequenceextensioncomplexContentArticleTypeschema_PageNumber_XsdtString_                                                                                                                                                 func(*XsdGoPkgHasElem_PageNumbersequenceextensioncomplexContentArticleTypeschema_PageNumber_XsdtString_, bool) error
	XsdGoPkgHasElem_ConferenceLocationsequenceextensioncomplexContentConferencePaperTypeschema_ConferenceLocation_XsdtString_                                                                                                                         func(*XsdGoPkgHasElem_ConferenceLocationsequenceextensioncomplexContentConferencePaperTypeschema_ConferenceLocation_XsdtString_, bool) error
	XsdGoPkgHasElem_RecipientsequencePostalAddressTypeschema_Recipient_TxsdPostalAddressTypeSequenceRecipient_                                                                                                                                        func(*XsdGoPkgHasElem_RecipientsequencePostalAddressTypeschema_Recipient_TxsdPostalAddressTypeSequenceRecipient_, bool) error
	XsdGoPkgHasElem_Achievements                                                                                                                                                                                                                      func(*XsdGoPkgHasElem_Achievements, bool) error
	XsdGoPkgHasElem_OrgNamesequencePositionHistoryTypeschema_OrgName_TPositionOrgNameType_                                                                                                                                                            func(*XsdGoPkgHasElem_OrgNamesequencePositionHistoryTypeschema_OrgName_TPositionOrgNameType_, bool) error
	XsdGoPkgHasElem_StructuredXMLResume                                                                                                                                                                                                               func(*XsdGoPkgHasElem_StructuredXMLResume, bool) error
	XsdGoPkgHasElems_AcademicCreditHoursEarnedsequenceEducationalMeasureTypeschema_AcademicCreditHoursEarned_XsdtDecimal_                                                                                                                             func(*XsdGoPkgHasElems_AcademicCreditHoursEarnedsequenceEducationalMeasureTypeschema_AcademicCreditHoursEarned_XsdtDecimal_, bool) error
	XsdGoPkgHasElems_MeasureValuesequenceEducationMeasureTypeschema_MeasureValue_TMeasureValueType_                                                                                                                                                   func(*XsdGoPkgHasElems_MeasureValuesequenceEducationMeasureTypeschema_MeasureValue_TMeasureValueType_, bool) error
	XsdGoPkgHasElems_AttachmentReferencechoicesequenceStaffingSupportingMaterialsTypeschema_AttachmentReference_TxsdStaffingSupportingMaterialsTypeSequenceChoiceAttachmentReference_                                                                 func(*XsdGoPkgHasElems_AttachmentReferencechoicesequenceStaffingSupportingMaterialsTypeschema_AttachmentReference_TxsdStaffingSupportingMaterialsTypeSequenceChoiceAttachmentReference_, bool) error
	XsdGoPkgHasElem_ReasonForLeavingsequenceVerificationTypeschema_ReasonForLeaving_XsdtString_                                                                                                                                                       func(*XsdGoPkgHasElem_ReasonForLeavingsequenceVerificationTypeschema_ReasonForLeaving_XsdtString_, bool) error
	TOccupationalCategoryType                                                                                                                                                                                                                         func(*TOccupationalCategoryType, bool) error
	TRankAchievedType                                                                                                                                                                                                                                 func(*TRankAchievedType, bool) error
	XsdGoPkgHasElem_AffixsequencePersonNameTypeschema_Affix_TxsdPersonNameTypeSequenceAffix_                                                                                                                                                          func(*XsdGoPkgHasElem_AffixsequencePersonNameTypeschema_Affix_TxsdPersonNameTypeSequenceAffix_, bool) error
	XsdGoPkgHasElems_MiddleNamesequencePersonNameTypeschema_MiddleName_XsdtString_                                                                                                                                                                    func(*XsdGoPkgHasElems_MiddleNamesequencePersonNameTypeschema_MiddleName_XsdtString_, bool) error
	XsdGoPkgHasElems_VerificationsequencePositionHistoryTypeschema_Verification_TVerificationType_                                                                                                                                                    func(*XsdGoPkgHasElems_VerificationsequencePositionHistoryTypeschema_Verification_TVerificationType_, bool) error
	TxsdAssociations                                                                                                                                                                                                                                  func(*TxsdAssociations, bool) error
	XsdGoPkgHasElem_InternationalCountryCode                                                                                                                                                                                                          func(*XsdGoPkgHasElem_InternationalCountryCode, bool) error
	XsdGoPkgHasElem_EventTypesequenceSpeakingEventTypeschema_EventType_TExtendedEventTypeType_                                                                                                                                                        func(*XsdGoPkgHasElem_EventTypesequenceSpeakingEventTypeschema_EventType_TExtendedEventTypeType_, bool) error
	XsdGoPkgHasElem_CommentssequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Comments_XsdtString_                                                                                                                             func(*XsdGoPkgHasElem_CommentssequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Comments_XsdtString_, bool) error
	XsdGoPkgHasElems_DegreeMajorsequenceEduDegreeTypeschema_DegreeMajor_TMajorType_                                                                                                                                                                   func(*XsdGoPkgHasElems_DegreeMajorsequenceEduDegreeTypeschema_DegreeMajor_TMajorType_, bool) error
	TConferencePaperType                                                                                                                                                                                                                              func(*TConferencePaperType, bool) error
	XsdGoPkgHasElems_JournalOrSerialNamesequenceextensioncomplexContentArticleTypeschema_JournalOrSerialName_XsdtString_                                                                                                                              func(*XsdGoPkgHasElems_JournalOrSerialNamesequenceextensioncomplexContentArticleTypeschema_JournalOrSerialName_XsdtString_, bool) error
	TBookType                                                                                                                                                                                                                                         func(*TBookType, bool) error
	XsdGoPkgHasElems_PublisherLocationsequenceextensioncomplexContentBookTypeschema_PublisherLocation_XsdtString_                                                                                                                                     func(*XsdGoPkgHasElems_PublisherLocationsequenceextensioncomplexContentBookTypeschema_PublisherLocation_XsdtString_, bool) error
	XsdGoPkgHasElems_LowestPossibleValuesequenceEducationMeasureTypeschema_LowestPossibleValue_TMeasureValueType_                                                                                                                                     func(*XsdGoPkgHasElems_LowestPossibleValuesequenceEducationMeasureTypeschema_LowestPossibleValue_TMeasureValueType_, bool) error
	XsdGoPkgHasElems_EmployerContactInfosequenceEmployerOrgDataTypeschema_EmployerContactInfo_TEmpContactInfoType_                                                                                                                                    func(*XsdGoPkgHasElems_EmployerContactInfosequenceEmployerOrgDataTypeschema_EmployerContactInfo_TEmpContactInfoType_, bool) error
	XsdGoPkgHasElems_WritesequenceTxsdLanguageLanguageschema_Write_XsdtBoolean_                                                                                                                                                                       func(*XsdGoPkgHasElems_WritesequenceTxsdLanguageLanguageschema_Write_XsdtBoolean_, bool) error
	XsdGoPkgHasElems_GivenNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_GivenName_XsdtString_                                                                                                      func(*XsdGoPkgHasElems_GivenNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_GivenName_XsdtString_, bool) error
	XsdGoPkgHasElem_WhenAvailable                                                                                                                                                                                                                     func(*XsdGoPkgHasElem_WhenAvailable, bool) error
	XsdGoPkgHasElem_ChaptersequenceextensioncomplexContentBookTypeschema_Chapter_XsdtString_                                                                                                                                                          func(*XsdGoPkgHasElem_ChaptersequenceextensioncomplexContentBookTypeschema_Chapter_XsdtString_, bool) error
	XsdGoPkgHasElems_LocationSummarysequenceSchoolOrInstitutionTypeschema_LocationSummary_TxsdSchoolOrInstitutionTypeSequenceLocationSummary_                                                                                                         func(*XsdGoPkgHasElems_LocationSummarysequenceSchoolOrInstitutionTypeschema_LocationSummary_TxsdSchoolOrInstitutionTypeSequenceLocationSummary_, bool) error
	XsdGoPkgHasElem_Fax                                                                                                                                                                                                                               func(*XsdGoPkgHasElem_Fax, bool) error
	XsdGoPkgHasElem_SupportingMaterialssequenceStructuredXMLResumeTypeschema_SupportingMaterials_TStaffingSupportingMaterialsType_                                                                                                                    func(*XsdGoPkgHasElem_SupportingMaterialssequenceStructuredXMLResumeTypeschema_SupportingMaterials_TStaffingSupportingMaterialsType_, bool) error
	XsdGoPkgHasElems_CountryCodesequencePostalAddressTypeschema_CountryCode_TxsdPostalAddressTypeSequenceCountryCode_                                                                                                                                 func(*XsdGoPkgHasElems_CountryCodesequencePostalAddressTypeschema_CountryCode_TxsdPostalAddressTypeSequenceCountryCode_, bool) error
	XsdGoPkgHasElem_OtherPublicationsequencePublicationHistoryTypeschema_OtherPublication_TOtherPublicationType_                                                                                                                                      func(*XsdGoPkgHasElem_OtherPublicationsequencePublicationHistoryTypeschema_OtherPublication_TOtherPublicationType_, bool) error
	XsdGoPkgHasElems_ServiceDetailsequenceMilitaryHistoryTypeschema_ServiceDetail_TxsdMilitaryHistoryTypeSequenceServiceDetail_                                                                                                                       func(*XsdGoPkgHasElems_ServiceDetailsequenceMilitaryHistoryTypeschema_ServiceDetail_TxsdMilitaryHistoryTypeSequenceServiceDetail_, bool) error
	XsdGoPkgHasElem_HighestPossibleValuesequenceEducationMeasureTypeschema_HighestPossibleValue_TMeasureValueType_                                                                                                                                    func(*XsdGoPkgHasElem_HighestPossibleValuesequenceEducationMeasureTypeschema_HighestPossibleValue_TMeasureValueType_, bool) error
	XsdGoPkgHasElem_FormattedNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_FormattedName_XsdtString_                                                                                               func(*XsdGoPkgHasElem_FormattedNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_FormattedName_XsdtString_, bool) error
	TSchoolOrInstitutionType                                                                                                                                                                                                                          func(*TSchoolOrInstitutionType, bool) error
	XsdGoPkgHasElem_SubscriberNumber                                                                                                                                                                                                                  func(*XsdGoPkgHasElem_SubscriberNumber, bool) error
	TEmployerOrgDataType                                                                                                                                                                                                                              func(*TEmployerOrgDataType, bool) error
	XsdGoPkgHasElems_MeasureSystemsequenceEduMeasureTypeschema_MeasureSystem_XsdtString_                                                                                                                                                              func(*XsdGoPkgHasElems_MeasureSystemsequenceEduMeasureTypeschema_MeasureSystem_XsdtString_, bool) error
	XsdGoPkgHasElems_ChaptersequenceextensioncomplexContentBookTypeschema_Chapter_XsdtString_                                                                                                                                                         func(*XsdGoPkgHasElems_ChaptersequenceextensioncomplexContentBookTypeschema_Chapter_XsdtString_, bool) error
	XsdGoPkgHasElem_DegreeDatesequenceEduDegreeTypeschema_DegreeDate_TFlexibleDatesType_                                                                                                                                                              func(*XsdGoPkgHasElem_DegreeDatesequenceEduDegreeTypeschema_DegreeDate_TFlexibleDatesType_, bool) error
	XsdGoPkgHasElems_ArticlesequencePublicationHistoryTypeschema_Article_TArticleType_                                                                                                                                                                func(*XsdGoPkgHasElems_ArticlesequencePublicationHistoryTypeschema_Article_TArticleType_, bool) error
	XsdGoPkgHasElems_StreetNamesequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_StreetName_XsdtString_                                                                                              func(*XsdGoPkgHasElems_StreetNamesequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_StreetName_XsdtString_, bool) error
	XsdGoPkgHasElem_RecognitionAchievedsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_RecognitionAchieved_XsdtString_                                                                             func(*XsdGoPkgHasElem_RecognitionAchievedsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_RecognitionAchieved_XsdtString_, bool) error
	XsdGoPkgHasElems_PublicationLanguagesequenceextensioncomplexContentArticleTypeschema_PublicationLanguage_TLanguageCodeType_                                                                                                                       func(*XsdGoPkgHasElems_PublicationLanguagesequenceextensioncomplexContentArticleTypeschema_PublicationLanguage_TLanguageCodeType_, bool) error
	XsdGoPkgHasElems_QuestionAnswerPairsequenceVerificationTypeschema_QuestionAnswerPair_TEmploymentQuestionAnswerPairType_                                                                                                                           func(*XsdGoPkgHasElems_QuestionAnswerPairsequenceVerificationTypeschema_QuestionAnswerPair_TEmploymentQuestionAnswerPairType_, bool) error
	XsdGoPkgHasElems_OrganizationsequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_Organization_XsdtString_                                                                                                      func(*XsdGoPkgHasElems_OrganizationsequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_Organization_XsdtString_, bool) error
	XsdGoPkgHasElems_StatussequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Status_TPatentStatusTypes_ func(*XsdGoPkgHasElems_StatussequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Status_TPatentStatusTypes_, bool) error
	XsdGoPkgHasElems_EventTypesequenceSpeakingEventTypeschema_EventType_TExtendedEventTypeType_                                                                                                                                                       func(*XsdGoPkgHasElems_EventTypesequenceSpeakingEventTypeschema_EventType_TExtendedEventTypeType_, bool) error
	XsdGoPkgHasElem_YearMonthchoiceFlexibleDatesTypeschema_YearMonth_XsdtGYearMonth_                                                                                                                                                                  func(*XsdGoPkgHasElem_YearMonthchoiceFlexibleDatesTypeschema_YearMonth_XsdtGYearMonth_, bool) error
	TStaffingSupportingMaterialsType                                                                                                                                                                                                                  func(*TStaffingSupportingMaterialsType, bool) error
	XsdGoPkgHasGroup_Comments                                                                                                                                                                                                                         func(*XsdGoPkgHasGroup_Comments, bool) error
	XsdGoPkgHasElems_NumberOfPagessequenceextensioncomplexContentBookTypeschema_NumberOfPages_XsdtPositiveInteger_                                                                                                                                    func(*XsdGoPkgHasElems_NumberOfPagessequenceextensioncomplexContentBookTypeschema_NumberOfPages_XsdtPositiveInteger_, bool) error
	XsdGoPkgHasElems_ProfessionalAssociationssequenceStructuredXMLResumeTypeschema_ProfessionalAssociations_TProfessionalAssociationType_                                                                                                             func(*XsdGoPkgHasElems_ProfessionalAssociationssequenceStructuredXMLResumeTypeschema_ProfessionalAssociations_TProfessionalAssociationType_, bool) error
	XsdGoPkgHasElems_DunsNumber                                                                                                                                                                                                                       func(*XsdGoPkgHasElems_DunsNumber, bool) error
	XsdGoPkgHasElems_OrganizationUnitsequenceSchoolOrInstitutionTypeschema_OrganizationUnit_TxsdSchoolOrInstitutionTypeSequenceOrganizationUnit_                                                                                                      func(*XsdGoPkgHasElems_OrganizationUnitsequenceSchoolOrInstitutionTypeschema_OrganizationUnit_TxsdSchoolOrInstitutionTypeSequenceOrganizationUnit_, bool) error
	XsdGoPkgHasElem_OrgNamesequencePositionOrgNameTypeschema_OrgName_TPositionOrgNameType_                                                                                                                                                            func(*XsdGoPkgHasElem_OrgNamesequencePositionOrgNameTypeschema_OrgName_TPositionOrgNameType_, bool) error
	XsdGoPkgHasElems_IssuingAuthoritysequenceAchievementTypeschema_IssuingAuthority_XsdtString_                                                                                                                                                       func(*XsdGoPkgHasElems_IssuingAuthoritysequenceAchievementTypeschema_IssuingAuthority_XsdtString_, bool) error
	TCompetencyType                                                                                                                                                                                                                                   func(*TCompetencyType, bool) error
	XsdGoPkgHasElems_EffectiveDatesequenceCredentialTypeschema_EffectiveDate_TxsdCredentialTypeSequenceEffectiveDate_                                                                                                                                 func(*XsdGoPkgHasElems_EffectiveDatesequenceCredentialTypeschema_EffectiveDate_TxsdCredentialTypeSequenceEffectiveDate_, bool) error
	TPersonNameType                                                                                                                                                                                                                                   func(*TPersonNameType, bool) error
	XsdGoPkgHasElems_MinorsequenceSchoolOrInstitutionTypeschema_Minor_XsdtString_                                                                                                                                                                     func(*XsdGoPkgHasElems_MinorsequenceSchoolOrInstitutionTypeschema_Minor_XsdtString_, bool) error
	TxsdStaffingSupportingMaterialsTypeSequenceChoiceAttachmentReference                                                                                                                                                                              func(*TxsdStaffingSupportingMaterialsTypeSequenceChoiceAttachmentReference, bool) error
	XsdGoPkgHasElem_CopyrightTextsequenceCopyrightTypeschema_CopyrightText_XsdtString_                                                                                                                                                                func(*XsdGoPkgHasElem_CopyrightTextsequenceCopyrightTypeschema_CopyrightText_XsdtString_, bool) error
	XsdGoPkgHasElem_ConferenceDatesequenceextensioncomplexContentConferencePaperTypeschema_ConferenceDate_TFlexibleDatesType_                                                                                                                         func(*XsdGoPkgHasElem_ConferenceDatesequenceextensioncomplexContentConferencePaperTypeschema_ConferenceDate_TFlexibleDatesType_, bool) error
	XsdGoPkgHasElems_ReadsequenceLanguageschema_Read_XsdtBoolean_                                                                                                                                                                                     func(*XsdGoPkgHasElems_ReadsequenceLanguageschema_Read_XsdtBoolean_, bool) error
	XsdGoPkgHasElem_ContactMethodsequenceContactInfosequenceVerificationTypeschema_ContactMethod_TContactMethodType_                                                                                                                                  func(*XsdGoPkgHasElem_ContactMethodsequenceContactInfosequenceVerificationTypeschema_ContactMethod_TContactMethodType_, bool) error
	XsdGoPkgHasElem_OptionsequenceMajorTypeschema_Option_XsdtString_                                                                                                                                                                                  func(*XsdGoPkgHasElem_OptionsequenceMajorTypeschema_Option_XsdtString_, bool) error
	XsdGoPkgHasElems_DegreeConcentrationsequenceMajorTypeschema_DegreeConcentration_XsdtString_                                                                                                                                                       func(*XsdGoPkgHasElems_DegreeConcentrationsequenceMajorTypeschema_DegreeConcentration_XsdtString_, bool) error
	TPostalAddressType                                                                                                                                                                                                                                func(*TPostalAddressType, bool) error
	XsdGoPkgHasElem_GivenNamesequencePersonNameTypeschema_GivenName_XsdtString_                                                                                                                                                                       func(*XsdGoPkgHasElem_GivenNamesequencePersonNameTypeschema_GivenName_XsdtString_, bool) error
	XsdGoPkgHasElems_ISBNsequenceextensioncomplexContentOtherPublicationTypeschema_Isbn_TisbnType_                                                                                                                                                    func(*XsdGoPkgHasElems_ISBNsequenceextensioncomplexContentOtherPublicationTypeschema_Isbn_TisbnType_, bool) error
	XsdGoPkgHasElems_DistributionGuidelinessequenceTxsdResumeResumeschema_DistributionGuidelines_TDistributionGuidelinesType_                                                                                                                         func(*XsdGoPkgHasElems_DistributionGuidelinessequenceTxsdResumeResumeschema_DistributionGuidelines_TDistributionGuidelinesType_, bool) error
	XsdGoPkgHasElem_IdsequenceCredentialTypeschema_Id_XsdtString_                                                                                                                                                                                     func(*XsdGoPkgHasElem_IdsequenceCredentialTypeschema_Id_XsdtString_, bool) error
	XsdGoPkgHasElems_Reference                                                                                                                                                                                                                        func(*XsdGoPkgHasElems_Reference, bool) error
	XsdGoPkgHasElems_WhenAvailable                                                                                                                                                                                                                    func(*XsdGoPkgHasElems_WhenAvailable, bool) error
	XsdGoPkgHasElems_IssuingAuthoritysequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_IssuingAuthority_TxsdPatentDescriptionTypeSequencePatentDetailSequenceIssuingAuthority_                     func(*XsdGoPkgHasElems_IssuingAuthoritysequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_IssuingAuthority_TxsdPatentDescriptionTypeSequencePatentDetailSequenceIssuingAuthority_, bool) error
	XsdGoPkgHasElems_DegreeDatesequenceEduDegreeTypeschema_DegreeDate_TFlexibleDatesType_                                                                                                                                                             func(*XsdGoPkgHasElems_DegreeDatesequenceEduDegreeTypeschema_DegreeDate_TFlexibleDatesType_, bool) error
	TxsdStringValue                                                                                                                                                                                                                                   func(*TxsdStringValue, bool) error
	XsdGoPkgHasElem_OverallPerformanceRatingsequenceVerificationTypeschema_OverallPerformanceRating_TRatingType_                                                                                                                                      func(*XsdGoPkgHasElem_OverallPerformanceRatingsequenceVerificationTypeschema_OverallPerformanceRating_TRatingType_, bool) error
	XsdGoPkgHasElem_TitlesequencePositionHistoryTypeschema_Title_XsdtString_                                                                                                                                                                          func(*XsdGoPkgHasElem_TitlesequencePositionHistoryTypeschema_Title_XsdtString_, bool) error
	XsdGoPkgHasElems_NonXMLResume                                                                                                                                                                                                                     func(*XsdGoPkgHasElems_NonXMLResume, bool) error
	XsdGoPkgHasElems_Pager                                                                                                                                                                                                                            func(*XsdGoPkgHasElems_Pager, bool) error
	XsdGoPkgHasElem_MostRecentDatesequenceTxsdCopyrightTypeSequenceCopyrightDatesCopyrightDatessequenceCopyrightTypeschema_MostRecentDate_TFlexibleDatesType_                                                                                         func(*XsdGoPkgHasElem_MostRecentDatesequenceTxsdCopyrightTypeSequenceCopyrightDatesCopyrightDatessequenceCopyrightTypeschema_MostRecentDate_TFlexibleDatesType_, bool) error
	XsdGoPkgHasElems_FormattedNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_FormattedName_XsdtString_                                                                                              func(*XsdGoPkgHasElems_FormattedNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_FormattedName_XsdtString_, bool) error
	XsdGoPkgHasElem_TaxonomyIdsequenceCompetencyTypeschema_TaxonomyId_TxsdCompetencyTypeSequenceTaxonomyId_                                                                                                                                           func(*XsdGoPkgHasElem_TaxonomyIdsequenceCompetencyTypeschema_TaxonomyId_TxsdCompetencyTypeSequenceTaxonomyId_, bool) error
	XsdGoPkgHasElem_OrganizationUnitsequenceSchoolOrInstitutionTypeschema_OrganizationUnit_TxsdSchoolOrInstitutionTypeSequenceOrganizationUnit_                                                                                                       func(*XsdGoPkgHasElem_OrganizationUnitsequenceSchoolOrInstitutionTypeschema_OrganizationUnit_TxsdSchoolOrInstitutionTypeSequenceOrganizationUnit_, bool) error
	XsdGoPkgHasElem_UnitsequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_Unit_XsdtString_                                                                                                           func(*XsdGoPkgHasElem_UnitsequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_Unit_XsdtString_, bool) error
	XsdGoPkgHasElem_CompensationsequencePositionHistoryTypeschema_Compensation_TPositionCompensationType_                                                                                                                                             func(*XsdGoPkgHasElem_CompensationsequencePositionHistoryTypeschema_Compensation_TPositionCompensationType_, bool) error
	XsdGoPkgHasElems_NationalNumber                                                                                                                                                                                                                   func(*XsdGoPkgHasElems_NationalNumber, bool) error
	XsdGoPkgHasElem_OriginalDatesequenceTxsdCopyrightTypeSequenceCopyrightDatesCopyrightDatessequenceCopyrightTypeschema_OriginalDate_TFlexibleDatesType_                                                                                             func(*XsdGoPkgHasElem_OriginalDatesequenceTxsdCopyrightTypeSequenceCopyrightDatesCopyrightDatessequenceCopyrightTypeschema_OriginalDate_TFlexibleDatesType_, bool) error
	XsdGoPkgHasElems_DeliverablesequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Deliverable_XsdtString_                                                                                                                      func(*XsdGoPkgHasElems_DeliverablesequenceTxsdAssociationTypeSequenceRoleRolesequenceAssociationTypeschema_Deliverable_XsdtString_, bool) error
	XsdGoPkgHasElem_LinkToResumesequenceNonXMLResumeTypeschema_LinkToResume_XsdtString_                                                                                                                                                               func(*XsdGoPkgHasElem_LinkToResumesequenceNonXMLResumeTypeschema_LinkToResume_XsdtString_, bool) error
	XsdGoPkgHasElem_RevisionDatesequenceNonXMLResumeTypeschema_RevisionDate_TAnyDateTimeNkType_                                                                                                                                                       func(*XsdGoPkgHasElem_RevisionDatesequenceNonXMLResumeTypeschema_RevisionDate_TAnyDateTimeNkType_, bool) error
	XsdGoPkgHasElems_PreferredGivenNamesequencePersonNameTypeschema_PreferredGivenName_XsdtString_                                                                                                                                                    func(*XsdGoPkgHasElems_PreferredGivenNamesequencePersonNameTypeschema_PreferredGivenName_XsdtString_, bool) error
	XsdGoPkgHasElems_ObjectivesequenceStructuredXMLResumeTypeschema_Objective_XsdtString_                                                                                                                                                             func(*XsdGoPkgHasElems_ObjectivesequenceStructuredXMLResumeTypeschema_Objective_XsdtString_, bool) error
	TxsdEduDegreeTypeSequenceOtherHonors                                                                                                                                                                                                              func(*TxsdEduDegreeTypeSequenceOtherHonors, bool) error
	XsdGoPkgHasElem_MeasureSystemsequenceEducationMeasureTypeschema_MeasureSystem_XsdtString_                                                                                                                                                         func(*XsdGoPkgHasElem_MeasureSystemsequenceEducationMeasureTypeschema_MeasureSystem_XsdtString_, bool) error
	TEducationMeasureType                                                                                                                                                                                                                             func(*TEducationMeasureType, bool) error
	XsdGoPkgHasElems_AlternateScriptsequencePersonNameTypeschema_AlternateScript_TxsdPersonNameTypeSequenceAlternateScript_                                                                                                                           func(*XsdGoPkgHasElems_AlternateScriptsequencePersonNameTypeschema_AlternateScript_TxsdPersonNameTypeSequenceAlternateScript_, bool) error
	XsdGoPkgHasElem_InternetWebAddress                                                                                                                                                                                                                func(*XsdGoPkgHasElem_InternetWebAddress, bool) error
	XsdGoPkgHasElems_EmploymentHistory                                                                                                                                                                                                                func(*XsdGoPkgHasElems_EmploymentHistory, bool) error
	XsdGoPkgHasElem_PublisherNamesequenceextensioncomplexContentBookTypeschema_PublisherName_XsdtString_                                                                                                                                              func(*XsdGoPkgHasElem_PublisherNamesequenceextensioncomplexContentBookTypeschema_PublisherName_XsdtString_, bool) error
	XsdGoPkgHasElems_SchoolNamesequenceSchoolDataTypeschema_SchoolName_XsdtString_                                                                                                                                                                    func(*XsdGoPkgHasElems_SchoolNamesequenceSchoolDataTypeschema_SchoolName_XsdtString_, bool) error
	XsdGoPkgHasElem_BooksequencePublicationHistoryTypeschema_Book_TBookType_                                                                                                                                                                          func(*XsdGoPkgHasElem_BooksequencePublicationHistoryTypeschema_Book_TBookType_, bool) error
	TRatingType                                                                                                                                                                                                                                       func(*TRatingType, bool) error
	TxsdPositionCompensationTypeSequenceOtherCompensation                                                                                                                                                                                             func(*TxsdPositionCompensationTypeSequenceOtherCompensation, bool) error
	XsdGoPkgHasElem_LanguageCode                                                                                                                                                                                                                      func(*XsdGoPkgHasElem_LanguageCode, bool) error
	XsdGoPkgHasElem_ISSNsequenceextensioncomplexContentArticleTypeschema_Issn_TissnType_                                                                                                                                                              func(*XsdGoPkgHasElem_ISSNsequenceextensioncomplexContentArticleTypeschema_Issn_TissnType_, bool) error
	XsdGoPkgHasElems_DeliveryAddresssequencePostalAddressTypeschema_DeliveryAddress_TxsdPostalAddressTypeSequenceDeliveryAddress_                                                                                                                     func(*XsdGoPkgHasElems_DeliveryAddresssequencePostalAddressTypeschema_DeliveryAddress_TxsdPostalAddressTypeSequenceDeliveryAddress_, bool) error
	XsdGoPkgHasElem_MunicipalitysequencePostalAddressTypeschema_Municipality_XsdtString_                                                                                                                                                              func(*XsdGoPkgHasElem_MunicipalitysequencePostalAddressTypeschema_Municipality_XsdtString_, bool) error
	XsdGoPkgHasElems_AffixsequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_Affix_TxsdPersonNameTypeSequenceAlternateScriptSequenceAffix_                                                                  func(*XsdGoPkgHasElems_AffixsequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_Affix_TxsdPersonNameTypeSequenceAlternateScriptSequenceAffix_, bool) error
	XsdGoPkgHasElem_FormattedNumber                                                                                                                                                                                                                   func(*XsdGoPkgHasElem_FormattedNumber, bool) error
	XsdGoPkgHasGroup_TelcomNumberGroup                                                                                                                                                                                                                func(*XsdGoPkgHasGroup_TelcomNumberGroup, bool) error
	XsdGoPkgHasElems_Association                                                                                                                                                                                                                      func(*XsdGoPkgHasElems_Association, bool) error
	XsdGoPkgHasElem_MeasureValuesequenceEduMeasureTypeschema_MeasureValue_XsdtString_                                                                                                                                                                 func(*XsdGoPkgHasElem_MeasureValuesequenceEduMeasureTypeschema_MeasureValue_XsdtString_, bool) error
	TxsdRatingTypeChoiceNumericValue                                                                                                                                                                                                                  func(*TxsdRatingTypeChoiceNumericValue, bool) error
	XsdGoPkgHasElems_EmployerOrgNamesequenceEmployerOrgDataTypeschema_EmployerOrgName_XsdtString_                                                                                                                                                     func(*XsdGoPkgHasElems_EmployerOrgNamesequenceEmployerOrgDataTypeschema_EmployerOrgName_XsdtString_, bool) error
	XsdGoPkgHasElems_MunicipalitysequenceEmploymentLocationSummaryTypeschema_Municipality_XsdtString_                                                                                                                                                 func(*XsdGoPkgHasElems_MunicipalitysequenceEmploymentLocationSummaryTypeschema_Municipality_XsdtString_, bool) error
	XsdGoPkgHasElems_IdsequenceDistributionTypeschema_Id_TEntityIdType_                                                                                                                                                                               func(*XsdGoPkgHasElems_IdsequenceDistributionTypeschema_Id_TEntityIdType_, bool) error
	TxsdCompetencyTypeSequenceCompetencyEvidence                                                                                                                                                                                                      func(*TxsdCompetencyTypeSequenceCompetencyEvidence, bool) error
	XsdGoPkgHasElem_DatesOfAttendancesequenceSchoolOrInstitutionTypeschema_DatesOfAttendance_TDeprecatedDatesOfAttendanceType_                                                                                                                        func(*XsdGoPkgHasElem_DatesOfAttendancesequenceSchoolOrInstitutionTypeschema_DatesOfAttendance_TDeprecatedDatesOfAttendanceType_, bool) error
	XsdGoPkgHasElems_AddressLinesequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_AddressLine_XsdtString_                                                                                            func(*XsdGoPkgHasElems_AddressLinesequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_AddressLine_XsdtString_, bool) error
	XsdGoPkgHasElems_AdditionalTextsequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_AdditionalText_XsdtString_                                                                                                  func(*XsdGoPkgHasElems_AdditionalTextsequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_AdditionalText_XsdtString_, bool) error
	XsdGoPkgHasElem_CurrentOrEndRanksequenceRankAchievedTypeschema_CurrentOrEndRank_XsdtString_                                                                                                                                                       func(*XsdGoPkgHasElem_CurrentOrEndRanksequenceRankAchievedTypeschema_CurrentOrEndRank_XsdtString_, bool) error
	XsdGoPkgHasElem_RankAchievedsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_RankAchieved_TRankAchievedType_                                                                                    func(*XsdGoPkgHasElem_RankAchievedsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_RankAchieved_TRankAchievedType_, bool) error
	XsdGoPkgHasElems_DisciplinaryActionsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DisciplinaryAction_XsdtString_                                                                              func(*XsdGoPkgHasElems_DisciplinaryActionsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DisciplinaryAction_XsdtString_, bool) error
	XsdGoPkgHasElem_ObjectivesequenceStructuredXMLResumeTypeschema_Objective_XsdtString_                                                                                                                                                              func(*XsdGoPkgHasElem_ObjectivesequenceStructuredXMLResumeTypeschema_Objective_XsdtString_, bool) error
	XsdGoPkgHasElems_CopyrightTextsequenceCopyrightTypeschema_CopyrightText_XsdtString_                                                                                                                                                               func(*XsdGoPkgHasElems_CopyrightTextsequenceCopyrightTypeschema_CopyrightText_XsdtString_, bool) error
	XsdGoPkgHasElems_VolumesequenceextensioncomplexContentArticleTypeschema_Volume_XsdtString_                                                                                                                                                        func(*XsdGoPkgHasElems_VolumesequenceextensioncomplexContentArticleTypeschema_Volume_XsdtString_, bool) error
	XsdGoPkgHasElem_IdsequenceAssociationTypeschema_Id_TEntityIdType_                                                                                                                                                                                 func(*XsdGoPkgHasElem_IdsequenceAssociationTypeschema_Id_TEntityIdType_, bool) error
	TxsdCompetencyTypeSequenceCompetencyId                                                                                                                                                                                                            func(*TxsdCompetencyTypeSequenceCompetencyId, bool) error
	XsdGoPkgHasElems_DatesOfAttendancesequenceEduDegreeTypeschema_DatesOfAttendance_TDatesOfAttendanceType_                                                                                                                                           func(*XsdGoPkgHasElems_DatesOfAttendancesequenceEduDegreeTypeschema_DatesOfAttendance_TDatesOfAttendanceType_, bool) error
	XsdGoPkgHasElem_JobPlansequenceJobLevelInfoTypeschema_JobPlan_XsdtString_                                                                                                                                                                         func(*XsdGoPkgHasElem_JobPlansequenceJobLevelInfoTypeschema_JobPlan_XsdtString_, bool) error
	XsdGoPkgHasElem_ValidTosequenceTxsdCredentialTypeSequenceEffectiveDateEffectiveDatesequenceCredentialTypeschema_ValidTo_TFlexibleDatesType_                                                                                                       func(*XsdGoPkgHasElem_ValidTosequenceTxsdCredentialTypeSequenceEffectiveDateEffectiveDatesequenceCredentialTypeschema_ValidTo_TFlexibleDatesType_, bool) error
	XsdGoPkgHasElem_DatesOfServicesequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DatesOfService_TDatesOfServiceType_                                                                              func(*XsdGoPkgHasElem_DatesOfServicesequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DatesOfService_TDatesOfServiceType_, bool) error
	XsdGoPkgHasElems_WebSitesequencePositionOrgInfoTypeschema_WebSite_TInternetWebAddressType_                                                                                                                                                        func(*XsdGoPkgHasElems_WebSitesequencePositionOrgInfoTypeschema_WebSite_TInternetWebAddressType_, bool) error
	XsdGoPkgHasElem_Achievement                                                                                                                                                                                                                       func(*XsdGoPkgHasElem_Achievement, bool) error
	TEducationalMeasureType                                                                                                                                                                                                                           func(*TEducationalMeasureType, bool) error
	XsdGoPkgHasElem_JobGradesequenceJobLevelInfoTypeschema_JobGrade_XsdtString_                                                                                                                                                                       func(*XsdGoPkgHasElem_JobGradesequenceJobLevelInfoTypeschema_JobGrade_XsdtString_, bool) error
	TPositionOrgInfoType                                                                                                                                                                                                                              func(*TPositionOrgInfoType, bool) error
	XsdGoPkgHasElems_AssociationsequenceProfessionalAssociationTypeschema_Association_XsdtString_                                                                                                                                                     func(*XsdGoPkgHasElems_AssociationsequenceProfessionalAssociationTypeschema_Association_XsdtString_, bool) error
	XsdGoPkgHasElems_SpeaksequenceTxsdLanguageLanguageschema_Speak_XsdtBoolean_                                                                                                                                                                       func(*XsdGoPkgHasElems_SpeaksequenceTxsdLanguageLanguageschema_Speak_XsdtBoolean_, bool) error
	XsdGoPkgHasElem_DatesOfAttendancesequenceEduDegreeTypeschema_DatesOfAttendance_TDatesOfAttendanceType_                                                                                                                                            func(*XsdGoPkgHasElem_DatesOfAttendancesequenceEduDegreeTypeschema_DatesOfAttendance_TDatesOfAttendanceType_, bool) error
	XsdGoPkgHasElems_UnitOrDivisionsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_UnitOrDivision_XsdtString_                                                                                      func(*XsdGoPkgHasElems_UnitOrDivisionsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_UnitOrDivision_XsdtString_, bool) error
	XsdGoPkgHasElem_DisciplinaryActionsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DisciplinaryAction_XsdtString_                                                                               func(*XsdGoPkgHasElem_DisciplinaryActionsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DisciplinaryAction_XsdtString_, bool) error
	XsdGoPkgHasElems_Associations                                                                                                                                                                                                                     func(*XsdGoPkgHasElems_Associations, bool) error
	TIssuingAuthorityType                                                                                                                                                                                                                             func(*TIssuingAuthorityType, bool) error
	XsdGoPkgHasElems_CommentssequenceTxsdLanguageLanguageschema_Comments_XsdtString_                                                                                                                                                                  func(*XsdGoPkgHasElems_CommentssequenceTxsdLanguageLanguageschema_Comments_XsdtString_, bool) error
	XsdGoPkgHasElems_DatesequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Date_TAnyDateTimeNkNaType_   func(*XsdGoPkgHasElems_DatesequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Date_TAnyDateTimeNkNaType_, bool) error
	XsdGoPkgHasElems_FirstIssuedDatesequenceEffectiveDatesequenceCredentialTypeschema_FirstIssuedDate_TFlexibleDatesType_                                                                                                                             func(*XsdGoPkgHasElems_FirstIssuedDatesequenceEffectiveDatesequenceCredentialTypeschema_FirstIssuedDate_TFlexibleDatesType_, bool) error
	XsdGoPkgHasElem_OtherHonorssequenceEduDegreeTypeschema_OtherHonors_TxsdEduDegreeTypeSequenceOtherHonors_                                                                                                                                          func(*XsdGoPkgHasElem_OtherHonorssequenceEduDegreeTypeschema_OtherHonors_TxsdEduDegreeTypeSequenceOtherHonors_, bool) error
	XsdGoPkgHasElem_EducationalMeasuresequenceEducationalMeasureTypeschema_EducationalMeasure_TEducationMeasureType_                                                                                                                                  func(*XsdGoPkgHasElem_EducationalMeasuresequenceEducationalMeasureTypeschema_EducationalMeasure_TEducationMeasureType_, bool) error
	XsdGoPkgHasElems_EducationHistory                                                                                                                                                                                                                 func(*XsdGoPkgHasElems_EducationHistory, bool) error
	XsdGoPkgHasElem_StartRanksequenceRankAchievedTypeschema_StartRank_XsdtString_                                                                                                                                                                     func(*XsdGoPkgHasElem_StartRanksequenceRankAchievedTypeschema_StartRank_XsdtString_, bool) error
	XsdGoPkgHasElems_BooksequencePublicationHistoryTypeschema_Book_TBookType_                                                                                                                                                                         func(*XsdGoPkgHasElems_BooksequencePublicationHistoryTypeschema_Book_TBookType_, bool) error
	XsdGoPkgHasElems_ResumeAdditionalItemssequenceStructuredXMLResumeTypeschema_ResumeAdditionalItems_TxsdStructuredXMLResumeTypeSequenceResumeAdditionalItems_                                                                                       func(*XsdGoPkgHasElems_ResumeAdditionalItemssequenceStructuredXMLResumeTypeschema_ResumeAdditionalItems_TxsdStructuredXMLResumeTypeSequenceResumeAdditionalItems_, bool) error
	XsdGoPkgHasElems_StandardValuechoiceSourceTypeTypeschema_StandardValue_TSourceEnumType_                                                                                                                                                           func(*XsdGoPkgHasElems_StandardValuechoiceSourceTypeTypeschema_StandardValue_TSourceEnumType_, bool) error
	XsdGoPkgHasElems_RolesequenceAssociationTypeschema_Role_TxsdAssociationTypeSequenceRole_                                                                                                                                                          func(*XsdGoPkgHasElems_RolesequenceAssociationTypeschema_Role_TxsdAssociationTypeSequenceRole_, bool) error
	XsdGoPkgHasElem_Mobile                                                                                                                                                                                                                            func(*XsdGoPkgHasElem_Mobile, bool) error
	XsdGoPkgHasElem_IssuesequenceextensioncomplexContentArticleTypeschema_Issue_XsdtString_                                                                                                                                                           func(*XsdGoPkgHasElem_IssuesequenceextensioncomplexContentArticleTypeschema_Issue_XsdtString_, bool) error
	TxsdCopyrightTypeSequenceCopyrightDates                                                                                                                                                                                                           func(*TxsdCopyrightTypeSequenceCopyrightDates, bool) error
	XsdGoPkgHasElem_ResumeIdsequenceTxsdResumeResumeschema_ResumeId_TEntityIdType_                                                                                                                                                                    func(*XsdGoPkgHasElem_ResumeIdsequenceTxsdResumeResumeschema_ResumeId_TEntityIdType_, bool) error
	XsdGoPkgHasElem_StringValue                                                                                                                                                                                                                       func(*XsdGoPkgHasElem_StringValue, bool) error
	TEduDegreeType                                                                                                                                                                                                                                    func(*TEduDegreeType, bool) error
	XsdGoPkgHasElem_DeliveryAddresssequencePostalAddressTypeschema_DeliveryAddress_TxsdPostalAddressTypeSequenceDeliveryAddress_                                                                                                                      func(*XsdGoPkgHasElem_DeliveryAddresssequencePostalAddressTypeschema_DeliveryAddress_TxsdPostalAddressTypeSequenceDeliveryAddress_, bool) error
	TxsdPositionCompensationTypeSequenceStartingCompensation                                                                                                                                                                                          func(*TxsdPositionCompensationTypeSequenceStartingCompensation, bool) error
	TDatesOfServiceType                                                                                                                                                                                                                               func(*TDatesOfServiceType, bool) error
	XsdGoPkgHasElem_PatentsequencePatentHistoryTypeschema_Patent_TPatentDescriptionType_                                                                                                                                                              func(*XsdGoPkgHasElem_PatentsequencePatentHistoryTypeschema_Patent_TPatentDescriptionType_, bool) error
	XsdGoPkgHasElems_YearMonthchoiceFlexibleDatesTypeschema_YearMonth_XsdtGYearMonth_                                                                                                                                                                 func(*XsdGoPkgHasElems_YearMonthchoiceFlexibleDatesTypeschema_YearMonth_XsdtGYearMonth_, bool) error
	XsdGoPkgHasElem_CurrencyCode                                                                                                                                                                                                                      func(*XsdGoPkgHasElem_CurrencyCode, bool) error
	XsdGoPkgHasElems_MajorsequenceSchoolOrInstitutionTypeschema_Major_XsdtString_                                                                                                                                                                     func(*XsdGoPkgHasElems_MajorsequenceSchoolOrInstitutionTypeschema_Major_XsdtString_, bool) error
	XsdGoPkgHasElem_ContactInfosequenceVerificationTypeschema_ContactInfo_TxsdVerificationTypeSequenceContactInfo_                                                                                                                                    func(*XsdGoPkgHasElem_ContactInfosequenceVerificationTypeschema_ContactInfo_TxsdVerificationTypeSequenceContactInfo_, bool) error
	XsdGoPkgHasElem_SpeaksequenceTxsdLanguageLanguageschema_Speak_XsdtBoolean_                                                                                                                                                                        func(*XsdGoPkgHasElem_SpeaksequenceTxsdLanguageLanguageschema_Speak_XsdtBoolean_, bool) error
	XsdGoPkgHasElem_AlternateScriptsequencePersonNameTypeschema_AlternateScript_TxsdPersonNameTypeSequenceAlternateScript_                                                                                                                            func(*XsdGoPkgHasElem_AlternateScriptsequencePersonNameTypeschema_AlternateScript_TxsdPersonNameTypeSequenceAlternateScript_, bool) error
	XsdGoPkgHasElem_EmployerOrgsequenceEmploymentHistoryTypeschema_EmployerOrg_TEmployerOrgDataType_                                                                                                                                                  func(*XsdGoPkgHasElem_EmployerOrgsequenceEmploymentHistoryTypeschema_EmployerOrg_TEmployerOrgDataType_, bool) error
	XsdGoPkgHasElem_AcademicCreditHoursEarnedsequenceEducationalMeasureTypeschema_AcademicCreditHoursEarned_XsdtDecimal_                                                                                                                              func(*XsdGoPkgHasElem_AcademicCreditHoursEarnedsequenceEducationalMeasureTypeschema_AcademicCreditHoursEarned_XsdtDecimal_, bool) error
	XsdGoPkgHasElem_CumulativeSummaryIndicatorsequenceEducationalMeasureTypeschema_CumulativeSummaryIndicator_XsdtBoolean_                                                                                                                            func(*XsdGoPkgHasElem_CumulativeSummaryIndicatorsequenceEducationalMeasureTypeschema_CumulativeSummaryIndicator_XsdtBoolean_, bool) error
	XsdGoPkgHasElem_MiddleNamesequencePersonNameTypeschema_MiddleName_XsdtString_                                                                                                                                                                     func(*XsdGoPkgHasElem_MiddleNamesequencePersonNameTypeschema_MiddleName_XsdtString_, bool) error
	TPositionCompensationType                                                                                                                                                                                                                         func(*TPositionCompensationType, bool) error
	XsdGoPkgHasElem_GenderCode                                                                                                                                                                                                                        func(*XsdGoPkgHasElem_GenderCode, bool) error
	XsdGoPkgHasElem_Language                                                                                                                                                                                                                          func(*XsdGoPkgHasElem_Language, bool) error
	XsdGoPkgHasElems_BuildingNumbersequenceDeliveryAddresssequencePostalAddressTypeschema_BuildingNumber_XsdtString_                                                                                                                                  func(*XsdGoPkgHasElems_BuildingNumbersequenceDeliveryAddresssequencePostalAddressTypeschema_BuildingNumber_XsdtString_, bool) error
	XsdGoPkgHasElems_AnyDatechoiceFlexibleDatesTypeschema_AnyDate_TAnyDateTimeNkNaType_                                                                                                                                                               func(*XsdGoPkgHasElems_AnyDatechoiceFlexibleDatesTypeschema_AnyDate_TAnyDateTimeNkNaType_, bool) error
	XsdGoPkgHasElems_EligibleForRehiresequenceVerificationTypeschema_EligibleForRehire_XsdtBoolean_                                                                                                                                                   func(*XsdGoPkgHasElems_EligibleForRehiresequenceVerificationTypeschema_EligibleForRehire_XsdtBoolean_, bool) error
	XsdGoPkgHasElem_MonthDaychoiceFlexibleDatesTypeschema_MonthDay_XsdtGMonthDay_                                                                                                                                                                     func(*XsdGoPkgHasElem_MonthDaychoiceFlexibleDatesTypeschema_MonthDay_XsdtGMonthDay_, bool) error
	XsdGoPkgHasElem_NationalNumber                                                                                                                                                                                                                    func(*XsdGoPkgHasElem_NationalNumber, bool) error
	XsdGoPkgHasElem_Ttytdd                                                                                                                                                                                                                            func(*XsdGoPkgHasElem_Ttytdd, bool) error
	XsdGoPkgHasElems_JobLevelInfosequencePositionHistoryTypeschema_JobLevelInfo_TJobLevelInfoType_                                                                                                                                                    func(*XsdGoPkgHasElems_JobLevelInfosequencePositionHistoryTypeschema_JobLevelInfo_TJobLevelInfoType_, bool) error
	XsdGoPkgHasElem_StatussequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Status_TPatentStatusTypes_  func(*XsdGoPkgHasElem_StatussequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Status_TPatentStatusTypes_, bool) error
	TPatentHistoryType                                                                                                                                                                                                                                func(*TPatentHistoryType, bool) error
	XsdGoPkgHasElems_EducationalMeasuresequenceEducationalMeasureTypeschema_EducationalMeasure_TEducationMeasureType_                                                                                                                                 func(*XsdGoPkgHasElems_EducationalMeasuresequenceEducationalMeasureTypeschema_EducationalMeasure_TEducationMeasureType_, bool) error
	XsdGoPkgHasElems_IdsequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Id_XsdtString_                 func(*XsdGoPkgHasElems_IdsequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Id_XsdtString_, bool) error
	XsdGoPkgHasElem_PositionHistorysequenceEmployerOrgDataTypeschema_PositionHistory_TxsdEmployerOrgDataTypeSequencePositionHistory_                                                                                                                  func(*XsdGoPkgHasElem_PositionHistorysequenceEmployerOrgDataTypeschema_PositionHistory_TxsdEmployerOrgDataTypeSequencePositionHistory_, bool) error
	XsdGoPkgHasElem_NumericValue                                                                                                                                                                                                                      func(*XsdGoPkgHasElem_NumericValue, bool) error
	XsdGoPkgHasElem_EffectiveDatesequenceAdditionalItemTypeschema_EffectiveDate_TxsdAdditionalItemTypeSequenceEffectiveDate_                                                                                                                          func(*XsdGoPkgHasElem_EffectiveDatesequenceAdditionalItemTypeschema_EffectiveDate_TxsdAdditionalItemTypeSequenceEffectiveDate_, bool) error
	XsdGoPkgHasElem_AddressLinesequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_AddressLine_XsdtString_                                                                                             func(*XsdGoPkgHasElem_AddressLinesequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_AddressLine_XsdtString_, bool) error
	TDistributionGuidelinesType                                                                                                                                                                                                                       func(*TDistributionGuidelinesType, bool) error
	TAdditionalItemType                                                                                                                                                                                                                               func(*TAdditionalItemType, bool) error
	XsdGoPkgHasElem_DeliverablesequenceRolesequenceAssociationTypeschema_Deliverable_XsdtString_                                                                                                                                                      func(*XsdGoPkgHasElem_DeliverablesequenceRolesequenceAssociationTypeschema_Deliverable_XsdtString_, bool) error
	XsdGoPkgHasElems_PublicationDatesequenceBasicBibliographicRecordTypeschema_PublicationDate_TFlexibleDatesType_                                                                                                                                    func(*XsdGoPkgHasElems_PublicationDatesequenceBasicBibliographicRecordTypeschema_PublicationDate_TFlexibleDatesType_, bool) error
	XsdGoPkgHasElems_AttendanceRatingsequenceVerificationTypeschema_AttendanceRating_TRatingType_                                                                                                                                                     func(*XsdGoPkgHasElems_AttendanceRatingsequenceVerificationTypeschema_AttendanceRating_TRatingType_, bool) error
	XsdGoPkgHasElem_CountryCode                                                                                                                                                                                                                       func(*XsdGoPkgHasElem_CountryCode, bool) error
	TxsdPositionOrgIndustryTypeSequenceIndustryCode                                                                                                                                                                                                   func(*TxsdPositionOrgIndustryTypeSequenceIndustryCode, bool) error
	XsdGoPkgHasElems_PostOfficeBoxsequenceDeliveryAddresssequencePostalAddressTypeschema_PostOfficeBox_XsdtString_                                                                                                                                    func(*XsdGoPkgHasElems_PostOfficeBoxsequenceDeliveryAddresssequencePostalAddressTypeschema_PostOfficeBox_XsdtString_, bool) error
	XsdGoPkgHasElem_OtherCompensationsequencePositionCompensationTypeschema_OtherCompensation_TxsdPositionCompensationTypeSequenceOtherCompensation_                                                                                                  func(*XsdGoPkgHasElem_OtherCompensationsequencePositionCompensationTypeschema_OtherCompensation_TxsdPositionCompensationTypeSequenceOtherCompensation_, bool) error
	XsdGoPkgHasElem_NonStandardValuechoiceSourceTypeTypeschema_NonStandardValue_XsdtString_                                                                                                                                                           func(*XsdGoPkgHasElem_NonStandardValuechoiceSourceTypeTypeschema_NonStandardValue_XsdtString_, bool) error
	XsdGoPkgHasElem_DegreesequenceSchoolOrInstitutionTypeschema_Degree_TEduDegreeType_                                                                                                                                                                func(*XsdGoPkgHasElem_DegreesequenceSchoolOrInstitutionTypeschema_Degree_TEduDegreeType_, bool) error
	XsdGoPkgHasElems_PostalAddress                                                                                                                                                                                                                    func(*XsdGoPkgHasElems_PostalAddress, bool) error
	XsdGoPkgHasElem_QualificationssequenceStructuredXMLResumeTypeschema_Qualifications_TxsdStructuredXMLResumeTypeSequenceQualifications_                                                                                                             func(*XsdGoPkgHasElem_QualificationssequenceStructuredXMLResumeTypeschema_Qualifications_TxsdStructuredXMLResumeTypeSequenceQualifications_, bool) error
	XsdGoPkgHasElems_TitlesequenceBasicBibliographicRecordTypeschema_Title_XsdtString_                                                                                                                                                                func(*XsdGoPkgHasElems_TitlesequenceBasicBibliographicRecordTypeschema_Title_XsdtString_, bool) error
	XsdGoPkgHasElems_OtherHonorssequenceEduDegreeTypeschema_OtherHonors_TxsdEduDegreeTypeSequenceOtherHonors_                                                                                                                                         func(*XsdGoPkgHasElems_OtherHonorssequenceEduDegreeTypeschema_OtherHonors_TxsdEduDegreeTypeSequenceOtherHonors_, bool) error
	TMajorType                                                                                                                                                                                                                                        func(*TMajorType, bool) error
	XsdGoPkgHasElems_StartDatesequenceDeprecatedDatesOfAttendanceTypeschema_StartDate_TFlexibleDatesType_                                                                                                                                             func(*XsdGoPkgHasElems_StartDatesequenceDeprecatedDatesOfAttendanceTypeschema_StartDate_TFlexibleDatesType_, bool) error
	XsdGoPkgHasElems_RevisionDatesequenceStructuredXMLResumeTypeschema_RevisionDate_TAnyDateTimeNkType_                                                                                                                                               func(*XsdGoPkgHasElems_RevisionDatesequenceStructuredXMLResumeTypeschema_RevisionDate_TAnyDateTimeNkType_, bool) error
	XsdGoPkgHasElem_IdValuesequenceEntityIdTypeschema_IdValue_TxsdEntityIdTypeSequenceIdValue_                                                                                                                                                        func(*XsdGoPkgHasElem_IdValuesequenceEntityIdTypeschema_IdValue_TxsdEntityIdTypeSequenceIdValue_, bool) error
	XsdGoPkgHasElems_ContactInfosequenceStructuredXMLResumeTypeschema_ContactInfo_TSEPContactInfoType_                                                                                                                                                func(*XsdGoPkgHasElems_ContactInfosequenceStructuredXMLResumeTypeschema_ContactInfo_TSEPContactInfoType_, bool) error
	TInternetDomainNameType                                                                                                                                                                                                                           func(*TInternetDomainNameType, bool) error
	TxsdSchoolOrInstitutionTypeSequenceLocationSummary                                                                                                                                                                                                func(*TxsdSchoolOrInstitutionTypeSequenceLocationSummary, bool) error
	XsdGoPkgHasElems_InternetEmailAddress                                                                                                                                                                                                             func(*XsdGoPkgHasElems_InternetEmailAddress, bool) error
	XsdGoPkgHasElem_TextResumesequenceNonXMLResumeTypeschema_TextResume_XsdtString_                                                                                                                                                                   func(*XsdGoPkgHasElem_TextResumesequenceNonXMLResumeTypeschema_TextResume_XsdtString_, bool) error
	XsdGoPkgHasElems_StartingCompensationsequencePositionCompensationTypeschema_StartingCompensation_TxsdPositionCompensationTypeSequenceStartingCompensation_                                                                                        func(*XsdGoPkgHasElems_StartingCompensationsequencePositionCompensationTypeschema_StartingCompensation_TxsdPositionCompensationTypeSequenceStartingCompensation_, bool) error
	XsdGoPkgHasElems_JobCategorysequencePositionHistoryTypeschema_JobCategory_TOccupationalCategoryType_                                                                                                                                              func(*XsdGoPkgHasElems_JobCategorysequencePositionHistoryTypeschema_JobCategory_TOccupationalCategoryType_, bool) error
	TxsdPersonNameTypeSequenceAffix                                                                                                                                                                                                                   func(*TxsdPersonNameTypeSequenceAffix, bool) error
	TPositionOrgIndustryType                                                                                                                                                                                                                          func(*TPositionOrgIndustryType, bool) error
	XsdGoPkgHasElem_StandardValuechoiceSourceTypeTypeschema_StandardValue_TSourceEnumType_                                                                                                                                                            func(*XsdGoPkgHasElem_StandardValuechoiceSourceTypeTypeschema_StandardValue_TSourceEnumType_, bool) error
	TUserAreaType                                                                                                                                                                                                                                     func(*TUserAreaType, bool) error
	XsdGoPkgHasElems_MilitaryHistory                                                                                                                                                                                                                  func(*XsdGoPkgHasElems_MilitaryHistory, bool) error
	XsdGoPkgHasElem_SupportingInformation                                                                                                                                                                                                             func(*XsdGoPkgHasElem_SupportingInformation, bool) error
	XsdGoPkgHasElems_ValidTosequenceEffectiveDatesequenceCredentialTypeschema_ValidTo_TFlexibleDatesType_                                                                                                                                             func(*XsdGoPkgHasElems_ValidTosequenceEffectiveDatesequenceCredentialTypeschema_ValidTo_TFlexibleDatesType_, bool) error
	XsdGoPkgHasElems_VerifyEmploymentsequenceVerificationTypeschema_VerifyEmployment_XsdtBoolean_                                                                                                                                                     func(*XsdGoPkgHasElems_VerifyEmploymentsequenceVerificationTypeschema_VerifyEmployment_XsdtBoolean_, bool) error
	TEntityIdType                                                                                                                                                                                                                                     func(*TEntityIdType, bool) error
	XsdGoPkgHasElems_AreaOfExpertisesequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_AreaOfExpertise_XsdtString_                                                                                    func(*XsdGoPkgHasElems_AreaOfExpertisesequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_AreaOfExpertise_XsdtString_, bool) error
	XsdGoPkgHasElems_StringValuechoiceRatingTypeschema_StringValue_TxsdRatingTypeChoiceStringValue_                                                                                                                                                   func(*XsdGoPkgHasElems_StringValuechoiceRatingTypeschema_StringValue_TxsdRatingTypeChoiceStringValue_, bool) error
	XsdGoPkgHasElems_OverallPerformanceRatingsequenceVerificationTypeschema_OverallPerformanceRating_TRatingType_                                                                                                                                     func(*XsdGoPkgHasElems_OverallPerformanceRatingsequenceVerificationTypeschema_OverallPerformanceRating_TRatingType_, bool) error
	XsdGoPkgHasElems_LocationSummarysequenceEmpContactInfoTypeschema_LocationSummary_TEmploymentLocationSummaryType_                                                                                                                                  func(*XsdGoPkgHasElems_LocationSummarysequenceEmpContactInfoTypeschema_LocationSummary_TEmploymentLocationSummaryType_, bool) error
	TEduMeasureType                                                                                                                                                                                                                                   func(*TEduMeasureType, bool) error
	XsdGoPkgHasElems_UnitsequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_Unit_XsdtString_                                                                                                          func(*XsdGoPkgHasElems_UnitsequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_Unit_XsdtString_, bool) error
	XsdGoPkgHasElems_CopyrightDatessequenceCopyrightTypeschema_CopyrightDates_TxsdCopyrightTypeSequenceCopyrightDates_                                                                                                                                func(*XsdGoPkgHasElems_CopyrightDatessequenceCopyrightTypeschema_CopyrightDates_TxsdCopyrightTypeSequenceCopyrightDates_, bool) error
	TAssociationType                                                                                                                                                                                                                                  func(*TAssociationType, bool) error
	TMinorType                                                                                                                                                                                                                                        func(*TMinorType, bool) error
	XsdGoPkgHasElem_AnyDatechoiceFlexibleDatesTypeschema_AnyDate_TAnyDateTimeNkNaType_                                                                                                                                                                func(*XsdGoPkgHasElem_AnyDatechoiceFlexibleDatesTypeschema_AnyDate_TAnyDateTimeNkNaType_, bool) error
	TelcomNumberType                                                                                                                                                                                                                                  func(*TelcomNumberType, bool) error
	XsdGoPkgHasElems_ValidFromsequenceEffectiveDatesequenceCredentialTypeschema_ValidFrom_TFlexibleDatesType_                                                                                                                                         func(*XsdGoPkgHasElems_ValidFromsequenceEffectiveDatesequenceCredentialTypeschema_ValidFrom_TFlexibleDatesType_, bool) error
	XsdGoPkgHasElems_SupportingInformation                                                                                                                                                                                                            func(*XsdGoPkgHasElems_SupportingInformation, bool) error
	XsdGoPkgHasElems_FormattedPublicationDescriptionsequencePublicationHistoryTypeschema_FormattedPublicationDescription_TxsdPublicationHistoryTypeSequenceFormattedPublicationDescription_                                                           func(*XsdGoPkgHasElems_FormattedPublicationDescriptionsequencePublicationHistoryTypeschema_FormattedPublicationDescription_TxsdPublicationHistoryTypeSequenceFormattedPublicationDescription_, bool) error
	XsdGoPkgHasElem_VolumesequenceextensioncomplexContentArticleTypeschema_Volume_XsdtString_                                                                                                                                                         func(*XsdGoPkgHasElem_VolumesequenceextensioncomplexContentArticleTypeschema_Volume_XsdtString_, bool) error
	XsdGoPkgHasElems_AcademicCreditHoursAttemptedsequenceEducationalMeasureTypeschema_AcademicCreditHoursAttempted_XsdtDecimal_                                                                                                                       func(*XsdGoPkgHasElems_AcademicCreditHoursAttemptedsequenceEducationalMeasureTypeschema_AcademicCreditHoursAttempted_XsdtDecimal_, bool) error
	XsdGoPkgHasElems_HighestPossibleValuesequenceEducationMeasureTypeschema_HighestPossibleValue_TMeasureValueType_                                                                                                                                   func(*XsdGoPkgHasElems_HighestPossibleValuesequenceEducationMeasureTypeschema_HighestPossibleValue_TMeasureValueType_, bool) error
	XsdGoPkgHasElem_ExcessiveValueIndicatorsequenceEducationMeasureTypeschema_ExcessiveValueIndicator_XsdtBoolean_                                                                                                                                    func(*XsdGoPkgHasElem_ExcessiveValueIndicatorsequenceEducationMeasureTypeschema_ExcessiveValueIndicator_XsdtBoolean_, bool) error
	XsdGoPkgHasElem_AcademicCreditCodesequenceEducationalMeasureTypeschema_AcademicCreditCode_TAcademicCreditCodeType_                                                                                                                                func(*XsdGoPkgHasElem_AcademicCreditCodesequenceEducationalMeasureTypeschema_AcademicCreditCode_TAcademicCreditCodeType_, bool) error
	XsdGoPkgHasElems_OrgIndustrysequencePositionHistoryTypeschema_OrgIndustry_TPositionOrgIndustryType_                                                                                                                                               func(*XsdGoPkgHasElems_OrgIndustrysequencePositionHistoryTypeschema_OrgIndustry_TPositionOrgIndustryType_, bool) error
	XsdGoPkgHasElem_CopyrightDatessequenceCopyrightTypeschema_CopyrightDates_TxsdCopyrightTypeSequenceCopyrightDates_                                                                                                                                 func(*XsdGoPkgHasElem_CopyrightDatessequenceCopyrightTypeschema_CopyrightDates_TxsdCopyrightTypeSequenceCopyrightDates_, bool) error
	XsdGoPkgHasElem_ProgramIdsequenceMinorTypeschema_ProgramId_TEntityIdType_                                                                                                                                                                         func(*XsdGoPkgHasElem_ProgramIdsequenceMinorTypeschema_ProgramId_TEntityIdType_, bool) error
	XsdGoPkgHasElems_CountryCode                                                                                                                                                                                                                      func(*XsdGoPkgHasElems_CountryCode, bool) error
	XsdGoPkgHasElem_GoodStudentIndicatorsequenceEducationMeasureTypeschema_GoodStudentIndicator_XsdtBoolean_                                                                                                                                          func(*XsdGoPkgHasElem_GoodStudentIndicatorsequenceEducationMeasureTypeschema_GoodStudentIndicator_XsdtBoolean_, bool) error
	XsdGoPkgHasElems_FamilyNamesequencePersonNameTypeschema_FamilyName_TxsdPersonNameTypeSequenceFamilyName_                                                                                                                                          func(*XsdGoPkgHasElems_FamilyNamesequencePersonNameTypeschema_FamilyName_TxsdPersonNameTypeSequenceFamilyName_, bool) error
	TPositionOrgNameType                                                                                                                                                                                                                              func(*TPositionOrgNameType, bool) error
	XsdGoPkgHasElem_DatesequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Date_TAnyDateTimeNkNaType_    func(*XsdGoPkgHasElem_DatesequenceTxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestonePatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_Date_TAnyDateTimeNkNaType_, bool) error
	TxsdBasicBibliographicRecordTypeSequenceName                                                                                                                                                                                                      func(*TxsdBasicBibliographicRecordTypeSequenceName, bool) error
	XsdGoPkgHasElems_CourseLevelCodesequenceEducationalMeasureTypeschema_CourseLevelCode_TCourseLevelCodeType_                                                                                                                                        func(*XsdGoPkgHasElems_CourseLevelCodesequenceEducationalMeasureTypeschema_CourseLevelCode_TCourseLevelCodeType_, bool) error
	XsdGoPkgHasElems_JobGradesequenceJobLevelInfoTypeschema_JobGrade_XsdtString_                                                                                                                                                                      func(*XsdGoPkgHasElems_JobGradesequenceJobLevelInfoTypeschema_JobGrade_XsdtString_, bool) error
	XsdGoPkgHasElems_FamilyNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_FamilyName_TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyName_                                                   func(*XsdGoPkgHasElems_FamilyNamesequenceTxsdPersonNameTypeSequenceAlternateScriptAlternateScriptsequencePersonNameTypeschema_FamilyName_TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyName_, bool) error
	XsdGoPkgHasElem_JobCategorysequenceOccupationalCategoryTypeschema_JobCategory_TOccupationalCategoryType_                                                                                                                                          func(*XsdGoPkgHasElem_JobCategorysequenceOccupationalCategoryTypeschema_JobCategory_TOccupationalCategoryType_, bool) error
	TxsdStructuredXMLResumeTypeSequenceLanguages                                                                                                                                                                                                      func(*TxsdStructuredXMLResumeTypeSequenceLanguages, bool) error
	XsdGoPkgHasElem_InternetEmailAddress                                                                                                                                                                                                              func(*XsdGoPkgHasElem_InternetEmailAddress, bool) error
	TArticleType                                                                                                                                                                                                                                      func(*TArticleType, bool) error
	XsdGoPkgHasElems_PageNumbersequenceextensioncomplexContentArticleTypeschema_PageNumber_XsdtString_                                                                                                                                                func(*XsdGoPkgHasElems_PageNumbersequenceextensioncomplexContentArticleTypeschema_PageNumber_XsdtString_, bool) error
	XsdGoPkgHasElems_CurrentOrEndRanksequenceRankAchievedTypeschema_CurrentOrEndRank_XsdtString_                                                                                                                                                      func(*XsdGoPkgHasElems_CurrentOrEndRanksequenceRankAchievedTypeschema_CurrentOrEndRank_XsdtString_, bool) error
	XsdGoPkgHasElem_EligibleForRehiresequenceVerificationTypeschema_EligibleForRehire_XsdtBoolean_                                                                                                                                                    func(*XsdGoPkgHasElem_EligibleForRehiresequenceVerificationTypeschema_EligibleForRehire_XsdtBoolean_, bool) error
	XsdGoPkgHasElem_ArticlesequencePublicationHistoryTypeschema_Article_TArticleType_                                                                                                                                                                 func(*XsdGoPkgHasElem_ArticlesequencePublicationHistoryTypeschema_Article_TArticleType_, bool) error
	XsdGoPkgHasElems_TaxonomyIdsequenceCompetencyTypeschema_TaxonomyId_TxsdCompetencyTypeSequenceTaxonomyId_                                                                                                                                          func(*XsdGoPkgHasElems_TaxonomyIdsequenceCompetencyTypeschema_TaxonomyId_TxsdCompetencyTypeSequenceTaxonomyId_, bool) error
	XsdGoPkgHasElem_Extension                                                                                                                                                                                                                         func(*XsdGoPkgHasElem_Extension, bool) error
	XsdGoPkgHasElem_QuestionsequenceEmploymentQuestionAnswerPairTypeschema_Question_XsdtString_                                                                                                                                                       func(*XsdGoPkgHasElem_QuestionsequenceEmploymentQuestionAnswerPairTypeschema_Question_XsdtString_, bool) error
	XsdGoPkgHasElem_PositionLocationsequencePositionOrgInfoTypeschema_PositionLocation_TPostalAddressType_                                                                                                                                            func(*XsdGoPkgHasElem_PositionLocationsequencePositionOrgInfoTypeschema_PositionLocation_TPostalAddressType_, bool) error
	XsdGoPkgHasElems_NamesequenceBasicBibliographicRecordTypeschema_Name_TxsdBasicBibliographicRecordTypeSequenceName_                                                                                                                                func(*XsdGoPkgHasElems_NamesequenceBasicBibliographicRecordTypeschema_Name_TxsdBasicBibliographicRecordTypeSequenceName_, bool) error
	XsdGoPkgHasElem_Resume                                                                                                                                                                                                                            func(*XsdGoPkgHasElem_Resume, bool) error
	XsdGoPkgHasElems_UserArea                                                                                                                                                                                                                         func(*XsdGoPkgHasElems_UserArea, bool) error
	XsdGoPkgHasElem_EducationHistory                                                                                                                                                                                                                  func(*XsdGoPkgHasElem_EducationHistory, bool) error
	XsdGoPkgHasElem_ProfessionalAssociationssequenceStructuredXMLResumeTypeschema_ProfessionalAssociations_TProfessionalAssociationType_                                                                                                              func(*XsdGoPkgHasElem_ProfessionalAssociationssequenceStructuredXMLResumeTypeschema_ProfessionalAssociations_TProfessionalAssociationType_, bool) error
	XsdGoPkgHasElem_AcademicCreditHoursAttemptedsequenceEducationalMeasureTypeschema_AcademicCreditHoursAttempted_XsdtDecimal_                                                                                                                        func(*XsdGoPkgHasElem_AcademicCreditHoursAttemptedsequenceEducationalMeasureTypeschema_AcademicCreditHoursAttempted_XsdtDecimal_, bool) error
	XsdGoPkgHasElem_OrganizationsequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_Organization_XsdtString_                                                                                                       func(*XsdGoPkgHasElem_OrganizationsequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_Organization_XsdtString_, bool) error
	XsdGoPkgHasElems_ConferencePapersequencePublicationHistoryTypeschema_ConferencePaper_TConferencePaperType_                                                                                                                                        func(*XsdGoPkgHasElems_ConferencePapersequencePublicationHistoryTypeschema_ConferencePaper_TConferencePaperType_, bool) error
	TDistributionType                                                                                                                                                                                                                                 func(*TDistributionType, bool) error
	XsdGoPkgHasElem_SpeakingEventsHistory                                                                                                                                                                                                             func(*XsdGoPkgHasElem_SpeakingEventsHistory, bool) error
	XsdGoPkgHasElem_SchoolOrInstitutionsequenceEducationHistoryTypeschema_SchoolOrInstitution_TSchoolOrInstitutionType_                                                                                                                               func(*XsdGoPkgHasElem_SchoolOrInstitutionsequenceEducationHistoryTypeschema_SchoolOrInstitution_TSchoolOrInstitutionType_, bool) error
	XsdGoPkgHasElems_CompetencyEvidencesequenceCompetencyTypeschema_CompetencyEvidence_TxsdCompetencyTypeSequenceCompetencyEvidence_                                                                                                                  func(*XsdGoPkgHasElems_CompetencyEvidencesequenceCompetencyTypeschema_CompetencyEvidence_TxsdCompetencyTypeSequenceCompetencyEvidence_, bool) error
	XsdGoPkgHasElem_AnswersequenceEmploymentQuestionAnswerPairTypeschema_Answer_XsdtString_                                                                                                                                                           func(*XsdGoPkgHasElem_AnswersequenceEmploymentQuestionAnswerPairTypeschema_Answer_XsdtString_, bool) error
	XsdGoPkgHasElem_AffiliatedOrganizationsequenceSpeakingEventTypeschema_AffiliatedOrganization_XsdtString_                                                                                                                                          func(*XsdGoPkgHasElem_AffiliatedOrganizationsequenceSpeakingEventTypeschema_AffiliatedOrganization_XsdtString_, bool) error
	XsdGoPkgHasElems_CumulativeSummaryIndicatorsequenceEducationalMeasureTypeschema_CumulativeSummaryIndicator_XsdtBoolean_                                                                                                                           func(*XsdGoPkgHasElems_CumulativeSummaryIndicatorsequenceEducationalMeasureTypeschema_CumulativeSummaryIndicator_XsdtBoolean_, bool) error
	XsdGoPkgHasElem_CompetencyWeightsequenceCompetencyTypeschema_CompetencyWeight_TxsdCompetencyTypeSequenceCompetencyWeight_                                                                                                                         func(*XsdGoPkgHasElem_CompetencyWeightsequenceCompetencyTypeschema_CompetencyWeight_TxsdCompetencyTypeSequenceCompetencyWeight_, bool) error
	XsdGoPkgHasElem_PatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_PatentMilestone_TxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestone_                         func(*XsdGoPkgHasElem_PatentMilestonesequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_PatentMilestone_TxsdPatentDescriptionTypeSequencePatentDetailSequencePatentMilestone_, bool) error
	XsdGoPkgHasElems_ExecutiveSummarysequenceStructuredXMLResumeTypeschema_ExecutiveSummary_XsdtString_                                                                                                                                               func(*XsdGoPkgHasElems_ExecutiveSummarysequenceStructuredXMLResumeTypeschema_ExecutiveSummary_XsdtString_, bool) error
	TSchoolDataType                                                                                                                                                                                                                                   func(*TSchoolDataType, bool) error
	TContactMethodType                                                                                                                                                                                                                                func(*TContactMethodType, bool) error
	XsdGoPkgHasElem_EmploymentHistory                                                                                                                                                                                                                 func(*XsdGoPkgHasElem_EmploymentHistory, bool) error
	XsdGoPkgHasElems_Language                                                                                                                                                                                                                         func(*XsdGoPkgHasElems_Language, bool) error
	XsdGoPkgHasElems_SupportingMaterialssequenceNonXMLResumeTypeschema_SupportingMaterials_TStaffingSupportingMaterialsType_                                                                                                                          func(*XsdGoPkgHasElems_SupportingMaterialssequenceNonXMLResumeTypeschema_SupportingMaterials_TStaffingSupportingMaterialsType_, bool) error
	XsdGoPkgHasElems_PermissionToContactsequenceVerificationTypeschema_PermissionToContact_XsdtBoolean_                                                                                                                                               func(*XsdGoPkgHasElems_PermissionToContactsequenceVerificationTypeschema_PermissionToContact_XsdtBoolean_, bool) error
	TEmploymentHistoryType                                                                                                                                                                                                                            func(*TEmploymentHistoryType, bool) error
	XsdGoPkgHasElems_Extension                                                                                                                                                                                                                        func(*XsdGoPkgHasElems_Extension, bool) error
	TBasicBibliographicRecordType                                                                                                                                                                                                                     func(*TBasicBibliographicRecordType, bool) error
	XsdGoPkgHasElem_AreaOfExpertisesequenceServiceDetailsequenceMilitaryHistoryTypeschema_AreaOfExpertise_XsdtString_                                                                                                                                 func(*XsdGoPkgHasElem_AreaOfExpertisesequenceServiceDetailsequenceMilitaryHistoryTypeschema_AreaOfExpertise_XsdtString_, bool) error
	XsdGoPkgHasElem_OrgIndustrysequencePositionHistoryTypeschema_OrgIndustry_TPositionOrgIndustryType_                                                                                                                                                func(*XsdGoPkgHasElem_OrgIndustrysequencePositionHistoryTypeschema_OrgIndustry_TPositionOrgIndustryType_, bool) error
	XsdGoPkgHasElem_PostOfficeBoxsequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_PostOfficeBox_XsdtString_                                                                                         func(*XsdGoPkgHasElem_PostOfficeBoxsequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_PostOfficeBox_XsdtString_, bool) error
	XsdGoPkgHasElems_YearchoiceFlexibleDatesTypeschema_Year_XsdtGYear_                                                                                                                                                                                func(*XsdGoPkgHasElems_YearchoiceFlexibleDatesTypeschema_Year_XsdtGYear_, bool) error
	XsdGoPkgHasElem_DegreeConcentrationsequenceMajorTypeschema_DegreeConcentration_XsdtString_                                                                                                                                                        func(*XsdGoPkgHasElem_DegreeConcentrationsequenceMajorTypeschema_DegreeConcentration_XsdtString_, bool) error
	XsdGoPkgHasElems_TaxonomyNamesequenceOccupationalCategoryTypeschema_TaxonomyName_TxsdOccupationalCategoryTypeSequenceTaxonomyName_                                                                                                                func(*XsdGoPkgHasElems_TaxonomyNamesequenceOccupationalCategoryTypeschema_TaxonomyName_TxsdOccupationalCategoryTypeSequenceTaxonomyName_, bool) error
	XsdGoPkgHasElem_DescriptionsequenceAchievementTypeschema_Description_XsdtString_                                                                                                                                                                  func(*XsdGoPkgHasElem_DescriptionsequenceAchievementTypeschema_Description_XsdtString_, bool) error
	TxsdCompetencyTypeSequenceCompetencyWeight                                                                                                                                                                                                        func(*TxsdCompetencyTypeSequenceCompetencyWeight, bool) error
	XsdGoPkgHasElem_DegreeNamesequenceEduDegreeTypeschema_DegreeName_TxsdEduDegreeTypeSequenceDegreeName_                                                                                                                                             func(*XsdGoPkgHasElem_DegreeNamesequenceEduDegreeTypeschema_DegreeName_TxsdEduDegreeTypeSequenceDegreeName_, bool) error
	XsdGoPkgHasElems_RegionsequencePostalAddressTypeschema_Region_XsdtString_                                                                                                                                                                         func(*XsdGoPkgHasElems_RegionsequencePostalAddressTypeschema_Region_XsdtString_, bool) error
	XsdGoPkgHasElem_LocationSummarysequenceEmpContactInfoTypeschema_LocationSummary_TEmploymentLocationSummaryType_                                                                                                                                   func(*XsdGoPkgHasElem_LocationSummarysequenceEmpContactInfoTypeschema_LocationSummary_TEmploymentLocationSummaryType_, bool) error
	XsdGoPkgHasElems_FormattedNumber                                                                                                                                                                                                                  func(*XsdGoPkgHasElems_FormattedNumber, bool) error
	XsdGoPkgHasElem_WritesequenceTxsdLanguageLanguageschema_Write_XsdtBoolean_                                                                                                                                                                        func(*XsdGoPkgHasElem_WritesequenceTxsdLanguageLanguageschema_Write_XsdtBoolean_, bool) error
	TProfessionalAssociationType                                                                                                                                                                                                                      func(*TProfessionalAssociationType, bool) error
	XsdGoPkgHasElems_CategoryCodesequenceOccupationalCategoryTypeschema_CategoryCode_XsdtString_                                                                                                                                                      func(*XsdGoPkgHasElems_CategoryCodesequenceOccupationalCategoryTypeschema_CategoryCode_XsdtString_, bool) error
	XsdGoPkgHasElem_NamesequenceBasicBibliographicRecordTypeschema_Name_TxsdBasicBibliographicRecordTypeSequenceName_                                                                                                                                 func(*XsdGoPkgHasElem_NamesequenceBasicBibliographicRecordTypeschema_Name_TxsdBasicBibliographicRecordTypeSequenceName_, bool) error
	XsdGoPkgHasElem_RolesequenceAssociationTypeschema_Role_TxsdAssociationTypeSequenceRole_                                                                                                                                                           func(*XsdGoPkgHasElem_RolesequenceAssociationTypeschema_Role_TxsdAssociationTypeSequenceRole_, bool) error
	XsdGoPkgHasElems_CompetencyIdsequenceCompetencyTypeschema_CompetencyId_TxsdCompetencyTypeSequenceCompetencyId_                                                                                                                                    func(*XsdGoPkgHasElems_CompetencyIdsequenceCompetencyTypeschema_CompetencyId_TxsdCompetencyTypeSequenceCompetencyId_, bool) error
	XsdGoPkgHasElem_LocationsequenceSpeakingEventTypeschema_Location_XsdtString_                                                                                                                                                                      func(*XsdGoPkgHasElem_LocationsequenceSpeakingEventTypeschema_Location_XsdtString_, bool) error
	XsdGoPkgHasElems_ResumeAdditionalItem                                                                                                                                                                                                             func(*XsdGoPkgHasElems_ResumeAdditionalItem, bool) error
	XsdGoPkgHasElems_MonthDaychoiceFlexibleDatesTypeschema_MonthDay_XsdtGMonthDay_                                                                                                                                                                    func(*XsdGoPkgHasElems_MonthDaychoiceFlexibleDatesTypeschema_MonthDay_XsdtGMonthDay_, bool) error
	XsdGoPkgHasElem_CompetencyEvidencesequenceCompetencyTypeschema_CompetencyEvidence_TxsdCompetencyTypeSequenceCompetencyEvidence_                                                                                                                   func(*XsdGoPkgHasElem_CompetencyEvidencesequenceCompetencyTypeschema_CompetencyEvidence_TxsdCompetencyTypeSequenceCompetencyEvidence_, bool) error
	XsdGoPkgHasElem_DatesequenceAchievementTypeschema_Date_TFlexibleDatesType_                                                                                                                                                                        func(*XsdGoPkgHasElem_DatesequenceAchievementTypeschema_Date_TFlexibleDatesType_, bool) error
	XsdGoPkgHasElems_DegreesequenceSchoolOrInstitutionTypeschema_Degree_TEduDegreeType_                                                                                                                                                               func(*XsdGoPkgHasElems_DegreesequenceSchoolOrInstitutionTypeschema_Degree_TEduDegreeType_, bool) error
	XsdGoPkgHasElem_OrganizationNamesequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_OrganizationName_XsdtString_                                                                                               func(*XsdGoPkgHasElem_OrganizationNamesequenceTxsdPostalAddressTypeSequenceRecipientRecipientsequencePostalAddressTypeschema_OrganizationName_XsdtString_, bool) error
	XsdGoPkgHasElem_PostalAddress                                                                                                                                                                                                                     func(*XsdGoPkgHasElem_PostalAddress, bool) error
	XsdGoPkgHasElem_IssuingAuthoritysequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_IssuingAuthority_TxsdPatentDescriptionTypeSequencePatentDetailSequenceIssuingAuthority_                      func(*XsdGoPkgHasElem_IssuingAuthoritysequenceTxsdPatentDescriptionTypeSequencePatentDetailPatentDetailsequencePatentDescriptionTypeschema_IssuingAuthority_TxsdPatentDescriptionTypeSequencePatentDetailSequenceIssuingAuthority_, bool) error
	TxsdSpeakingEventsHistory                                                                                                                                                                                                                         func(*TxsdSpeakingEventsHistory, bool) error
	XsdGoPkgHasElems_Resume                                                                                                                                                                                                                           func(*XsdGoPkgHasElems_Resume, bool) error
	XsdGoPkgHasElems_DischargeStatussequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DischargeStatus_XsdtString_                                                                                    func(*XsdGoPkgHasElems_DischargeStatussequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_DischargeStatus_XsdtString_, bool) error
	XsdGoPkgHasElem_CampaignsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_Campaign_XsdtString_                                                                                                   func(*XsdGoPkgHasElem_CampaignsequenceTxsdMilitaryHistoryTypeSequenceServiceDetailServiceDetailsequenceMilitaryHistoryTypeschema_Campaign_XsdtString_, bool) error
	XsdGoPkgHasElems_AnswersequenceEmploymentQuestionAnswerPairTypeschema_Answer_XsdtString_                                                                                                                                                          func(*XsdGoPkgHasElems_AnswersequenceEmploymentQuestionAnswerPairTypeschema_Answer_XsdtString_, bool) error
	XsdGoPkgHasElems_QualificationSummarysequenceQualificationssequenceStructuredXMLResumeTypeschema_QualificationSummary_XsdtString_                                                                                                                 func(*XsdGoPkgHasElems_QualificationSummarysequenceQualificationssequenceStructuredXMLResumeTypeschema_QualificationSummary_XsdtString_, bool) error
	XsdGoPkgHasElems_ConferenceLocationsequenceextensioncomplexContentConferencePaperTypeschema_ConferenceLocation_XsdtString_                                                                                                                        func(*XsdGoPkgHasElems_ConferenceLocationsequenceextensioncomplexContentConferencePaperTypeschema_ConferenceLocation_XsdtString_, bool) error
	XsdGoPkgHasElem_BuildingNumbersequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_BuildingNumber_XsdtString_                                                                                       func(*XsdGoPkgHasElem_BuildingNumbersequenceTxsdPostalAddressTypeSequenceDeliveryAddressDeliveryAddresssequencePostalAddressTypeschema_BuildingNumber_XsdtString_, bool) error
	XsdGoPkgHasElem_PatentHistory                                                                                                                                                                                                                     func(*XsdGoPkgHasElem_PatentHistory, bool) error
	XsdGoPkgHasElem_Reference                                                                                                                                                                                                                         func(*XsdGoPkgHasElem_Reference, bool) error
	XsdGoPkgHasElem_References                                                                                                                                                                                                                        func(*XsdGoPkgHasElem_References, bool) error
	XsdGoPkgHasElems_DatesequenceAchievementTypeschema_Date_TFlexibleDatesType_                                                                                                                                                                       func(*XsdGoPkgHasElems_DatesequenceAchievementTypeschema_Date_TFlexibleDatesType_, bool) error
	XsdGoPkgHasElems_OrgInfosequencePositionHistoryTypeschema_OrgInfo_TPositionOrgInfoType_                                                                                                                                                           func(*XsdGoPkgHasElems_OrgInfosequencePositionHistoryTypeschema_OrgInfo_TPositionOrgInfoType_, bool) error
	XsdGoPkgHasElem_FamilyNamesequenceAlternateScriptsequencePersonNameTypeschema_FamilyName_TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyName_                                                                                             func(*XsdGoPkgHasElem_FamilyNamesequenceAlternateScriptsequencePersonNameTypeschema_FamilyName_TxsdPersonNameTypeSequenceAlternateScriptSequenceFamilyName_, bool) error
	XsdGoPkgHasElems_PositionLocationsequencePositionOrgInfoTypeschema_PositionLocation_TPostalAddressType_                                                                                                                                           func(*XsdGoPkgHasElems_PositionLocationsequencePositionOrgInfoTypeschema_PositionLocation_TPostalAddressType_, bool) error
	XsdGoPkgHasElems_CountryServedsequenceMilitaryHistoryTypeschema_CountryServed_TCountryCodeType_                                                                                                                                                   func(*XsdGoPkgHasElems_CountryServedsequenceMilitaryHistoryTypeschema_CountryServed_TCountryCodeType_, bool) error
	XsdGoPkgHasElem_AssociationsequenceProfessionalAssociationTypeschema_Association_XsdtString_                                                                                                                                                      func(*XsdGoPkgHasElem_AssociationsequenceProfessionalAssociationTypeschema_Association_XsdtString_, bool) error
	XsdGoPkgHasElem_Telephone                                                                                                                                                                                                                         func(*XsdGoPkgHasElem_Telephone, bool) error
	XsdGoPkgHasElem_LanguagessequenceStructuredXMLResumeTypeschema_Languages_TxsdStructuredXMLResumeTypeSequenceLanguages_                                                                                                                            func(*XsdGoPkgHasElem_LanguagessequenceStructuredXMLResumeTypeschema_Languages_TxsdStructuredXMLResumeTypeSequenceLanguages_, bool) error
	XsdGoPkgHasElem_DoNotDistributeTosequenceDistributionGuidelinesTypeschema_DoNotDistributeTo_TDistributionType_                                                                                                                                    func(*XsdGoPkgHasElem_DoNotDistributeTosequenceDistributionGuidelinesTypeschema_DoNotDistributeTo_TDistributionType_, bool) error
	TDeprecatedDatesOfAttendanceType                                                                                                                                                                                                                  func(*TDeprecatedDatesOfAttendanceType, bool) error
	XsdGoPkgHasElems_OrgNamesequencePositionHistoryTypeschema_OrgName_TPositionOrgNameType_                                                                                                                                                           func(*XsdGoPkgHasElems_OrgNamesequencePositionHistoryTypeschema_OrgName_TPositionOrgNameType_, bool) error
}
